{
  "code": [
  {
    "name": "/home/miguel/.nvm/versions/node/v18.3.0/bin/node",
    "type": "SHARED_LIB"
  },
  {
    "name": "_init",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.74]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<>(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_PROTO_ACCESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProtoThrower(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.208]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::SetLocalAddress(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.434]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.668]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.666]",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*) [clone .cold.774]",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*) [clone .cold.775]",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*) [clone .cold.776]",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Serialize(v8::SnapshotCreator*) [clone .cold.777]",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfo(node::MemoryTracker*) const [clone .cold.778]",
    "type": "CPP"
  },
  {
    "name": "node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long) [clone .cold.779]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.432]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&>(_IO_FILE*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*>(_IO_FILE*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Maybe<bool> node::ProcessEmitWarning<int&>(node::Environment*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long>(_IO_FILE*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&, unsigned long, unsigned long>(_IO_FILE*, char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.51]",
    "type": "CPP"
  },
  {
    "name": "node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.269]",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.270]",
    "type": "CPP"
  },
  {
    "name": "node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.271]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "napi_wrap.cold.63",
    "type": "CPP"
  },
  {
    "name": "napi_unwrap.cold.64",
    "type": "CPP"
  },
  {
    "name": "napi_remove_wrap.cold.65",
    "type": "CPP"
  },
  {
    "name": "napi_type_tag_object.cold.66",
    "type": "CPP"
  },
  {
    "name": "napi_check_object_type_tag.cold.67",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.48]",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.71]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.315]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.316]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>) [clone .cold.317]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ImportModuleDynamically(v8::Local<v8::Context>, v8::Local<v8::Data>, v8::Local<v8::Value>, v8::Local<v8::String>, v8::Local<v8::FixedArray>) [clone .cold.318]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.319]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.320]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ResolveModuleCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::FixedArray>, v8::Local<v8::Module>) [clone .cold.321]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.322]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_CACHED_DATA_REJECTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_TIMEOUT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_INTERRUPTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_LINK_FAILURE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(v8::Isolate*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_VM_MODULE_LINK_FAILURE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(v8::Isolate*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.276]",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::AsyncCb(uv_async_s*) [clone .cold.183]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int) [clone .cold.184]",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::Cleanup(void*) [clone .cold.185]",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*)) [clone .cold.189]",
    "type": "CPP"
  },
  {
    "name": "napi_open_callback_scope.cold.190",
    "type": "CPP"
  },
  {
    "name": "napi_async_init.cold.191",
    "type": "CPP"
  },
  {
    "name": "napi_make_callback.cold.192",
    "type": "CPP"
  },
  {
    "name": "napi_get_uv_event_loop.cold.193",
    "type": "CPP"
  },
  {
    "name": "napi_create_threadsafe_function.cold.194",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.147]",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.148]",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.149]",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}::operator()(node::binding::DLib*) const [clone .cold.150]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_NON_CONTEXT_AWARE_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >) [clone .cold.331]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeInto(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.163]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::GetZeroFillToggle(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.164]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeUtf8String(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.165]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, unsigned long) [clone .cold.166]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding) [clone .cold.167]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(node::Environment*, char const*, unsigned long) [clone .cold.168]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long) [clone .cold.169]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*) [clone .cold.170]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap64(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.171]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap32(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.172]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap16(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.173]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Compare(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.174]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.175]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.176]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.177]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.178]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.179]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.180]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.181]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Fill(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.182]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CompareOffset(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.183]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Copy(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.184]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.185]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.189]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.190]",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.191]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfString(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.192]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_CONTEXT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_BUFFER_CONTEXT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MEMORY_ALLOCATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_TOO_LARGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_BUFFER_TOO_LARGE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_OUT_OF_BOUNDS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_BUFFER_OUT_OF_BOUNDS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.1]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.316]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.317]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.318]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::EvalMachine(node::Environment*, long, bool, bool, bool, std::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.319]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_THIS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.109]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEUid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.110]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEGid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.111]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetUid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.112]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEGid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.113]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetUid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.114]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetGid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.115]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEUid(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.116]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.117]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGroups(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.118]",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.119]",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.173]",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::OpenDir(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.174]",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.175]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EnvQuery(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Integer> const&) [clone .cold.203]",
    "type": "CPP"
  },
  {
    "name": "node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&) [clone .cold.204]",
    "type": "CPP"
  },
  {
    "name": "node::EnvGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&) [clone .cold.205]",
    "type": "CPP"
  },
  {
    "name": "node::EnvSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&) [clone .cold.206]",
    "type": "CPP"
  },
  {
    "name": "node::EnvDeleter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&) [clone .cold.207]",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Enumerate(v8::Isolate*) const [clone .cold.208]",
    "type": "CPP"
  },
  {
    "name": "node::EnvDefiner(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&) [clone .cold.209]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_STRING_TOO_LONG<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_OBJECT_DEFINE_PROPERTY<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_OBJECT_DEFINE_PROPERTY<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.96]",
    "type": "CPP"
  },
  {
    "name": "node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.100]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.73]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.71]",
    "type": "CPP"
  },
  {
    "name": "node::OnFatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetErrorSource(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Message>, bool*) [clone .constprop.95] [clone .cold.101]",
    "type": "CPP"
  },
  {
    "name": "node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>) [clone .cold.102]",
    "type": "CPP"
  },
  {
    "name": "node::ReportFatalException(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::EnhanceFatalException) [clone .cold.103]",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<>(_IO_FILE*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*&>(_IO_FILE*, char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [8]>(char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const (&) [8]>(char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [8]>(_IO_FILE*, char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int const&, int const&>(_IO_FILE*, char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*, int const&, int const&>(_IO_FILE*, char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(_IO_FILE*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(_IO_FILE*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*) [clone .cold.426]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*) [clone .cold.427]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::file_handle() [clone .cold.428]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::MemoryInfo(node::MemoryTracker*) const [clone .cold.235]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned char, 0>(unsigned char const&) [clone .isra.686]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned char, 0>(unsigned char const&) [clone .isra.684]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, long, 0>(long const&) [clone .isra.680]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, long, 0>(long const&) [clone .isra.678]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.674]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.672]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned int, 0>(unsigned int const&) [clone .isra.668]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned int, 0>(unsigned int const&) [clone .isra.666]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.588]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.586]",
    "type": "CPP"
  },
  {
    "name": "node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.791]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.792]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::operator*() const [clone .cold.793]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::stream() const [clone .cold.794]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long) [clone .cold.795]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long) [clone .cold.796]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::diagnostic_name[abi:cxx11]() const [clone .cold.797]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const [clone .cold.798]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&) [clone .cold.799]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack() [clone .cold.800]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char) [clone .cold.801]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::Local<v8::Object>) [clone .cold.802]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::OnTrailers() [clone .cold.803]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStop() [clone .cold.804]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*) [clone .part.141] [clone .cold.805]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*) [clone .cold.806]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.807]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.808]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite() [clone .part.516] [clone .cold.809]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Send() [clone .cold.810]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream() [clone .part.517] [clone .cold.811]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Send(unsigned char const*) [clone .cold.812]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.813]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddSettings(v8::Local<v8::Function>) [clone .cold.814]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>) [clone .cold.815]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream() [clone .cold.816]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*) [clone .cold.817]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int) [clone .cold.818]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.819]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool) [clone .cold.820]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStart() [clone .cold.821]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.822]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream() [clone .cold.823]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session() [clone .cold.824]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*) [clone .cold.825]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.826]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy() [clone .part.725] [clone .cold.827]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.828]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int) [clone .cold.829]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int) [clone .cold.830]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int) [clone .cold.831]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long) [clone .cold.832]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStop() [clone .cold.833]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStart() [clone .cold.834]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*) [clone .cold.835]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*) [clone .cold.836]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>) [clone .cold.837]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.838]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long) [clone .cold.839]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long) [clone .cold.840]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.841]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*) [clone .cold.842]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*) [clone .cold.843]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*) [clone .cold.844]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Close(int) [clone .cold.845]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*) [clone .part.150] [clone .cold.846]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading() [clone .part.186] [clone .cold.847]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.848]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.849]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecrefHeaders(nghttp2_frame const*) [clone .cold.850]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*) [clone .cold.851]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*) [clone .cold.852]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading() [clone .cold.853]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*) [clone .cold.854]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*) [clone .cold.855]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*) [clone .cold.856]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SendPendingData() [clone .cold.857]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int) [clone .cold.858]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Close(unsigned int, bool) [clone .cold.859]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.860]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitRstStream(unsigned int) [clone .cold.861]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.862]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int) [clone .constprop.757] [clone .cold.863]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::StartHeaders(nghttp2_headers_category) [clone .cold.864]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*) [clone .cold.865]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&) [clone .cold.866]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&) [clone .cold.867]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*) [clone .cold.868]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.869]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.870]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ConsumeHTTP2Data() [clone .cold.871]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&) [clone .cold.872]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int) [clone .cold.873]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*) [clone .cold.874]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*) [clone .cold.875]",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<>(node::AsyncWrap*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*&>(node::AsyncWrap*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, int&, char const*>(_IO_FILE*, char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*>(node::AsyncWrap*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&>(_IO_FILE*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&>(node::AsyncWrap*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&>(_IO_FILE*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&>(node::AsyncWrap*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, char const*>(char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&, char const*>(char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, char const*>(_IO_FILE*, char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, char const*>(node::AsyncWrap*, char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&>(_IO_FILE*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&>(node::AsyncWrap*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&>(_IO_FILE*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&>(node::AsyncWrap*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&, int&>(_IO_FILE*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&, int&>(node::AsyncWrap*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned int&>(_IO_FILE*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned int&>(node::AsyncWrap*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&>(_IO_FILE*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&>(node::AsyncWrap*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, unsigned long&>(_IO_FILE*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, unsigned long&>(node::AsyncWrap*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<nghttp2_headers_category&>(_IO_FILE*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<nghttp2_headers_category&>(node::AsyncWrap*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long>(node::AsyncWrap*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&>(_IO_FILE*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&>(node::AsyncWrap*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int>(_IO_FILE*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int>(node::AsyncWrap*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int>(_IO_FILE*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int>(node::AsyncWrap*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int const&, int&>(char const*, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int const&, int&>(char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int const&, int&>(char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int const&, int&>(_IO_FILE*, char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&, unsigned int const&, int&>(node::AsyncWrap*, char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char&>(char const*, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned long&, unsigned char&>(node::AsyncWrap*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::Transcode(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.134]",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.135]",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.136]",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.137]",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.138]",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Entangle(std::initializer_list<node::worker::MessagePortData*>) [clone .cold.566]",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>) [clone .cold.567]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.568]",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >) [clone .cold.569]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop() [clone .cold.570]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.571]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start() [clone .cold.572]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, node::worker::MessagePort::MessageProcessingMode, v8::Local<v8::Value>*) [clone .cold.573]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.574]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnMessage(node::worker::MessagePort::MessageProcessingMode) [clone .cold.575]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>) [clone .cold.576]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::AddToIncomingQueue(std::shared_ptr<node::worker::Message>) [clone .cold.577]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&) [clone .cold.578]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.579]",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Disentangle(node::worker::MessagePortData*) [clone .cold.580]",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::MessageChannel(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.581]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.582]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnClose() [clone .cold.583]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.584]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Close(v8::Local<v8::Value>) [clone .cold.585]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_TRANSFER_OBJECT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_INVALID<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CLOSED_MESSAGE_PORT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.208]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*) [clone .cold.210]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*>(char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*>(char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*>(_IO_FILE*, char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [12]>(char const*, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*, char const (&) [12]>(char const*, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*, char const (&) [12]>(char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*, char const (&) [12]>(char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*, char const (&) [12]>(_IO_FILE*, char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.211]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.212]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&) [clone .cold.213]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileAllModules(v8::Local<v8::Context>) [clone .cold.214]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetEmbedderOptions(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.782]",
    "type": "CPP"
  },
  {
    "name": "node::os::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.79]",
    "type": "CPP"
  },
  {
    "name": "node::os::GetInterfaceAddresses(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.80]",
    "type": "CPP"
  },
  {
    "name": "node::os::GetCPUInfo(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.81]",
    "type": "CPP"
  },
  {
    "name": "node::performance::RemoveGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.159]",
    "type": "CPP"
  },
  {
    "name": "node::performance::InstallGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.160]",
    "type": "CPP"
  },
  {
    "name": "node::performance::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.161]",
    "type": "CPP"
  },
  {
    "name": "node::performance::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.162]",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*) [clone .cold.163]",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::GetForegroundTaskRunner() [clone .cold.321]",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double) [clone .part.304] [clone .cold.322]",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetForegroundTaskRunner(v8::Isolate*) [clone .cold.323]",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown() [clone .cold.324]",
    "type": "CPP"
  },
  {
    "name": "node::DebugEnd(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.194]",
    "type": "CPP"
  },
  {
    "name": "node::Uptime(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.195]",
    "type": "CPP"
  },
  {
    "name": "node::Cwd(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.196]",
    "type": "CPP"
  },
  {
    "name": "node::MemoryUsage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.197]",
    "type": "CPP"
  },
  {
    "name": "node::Chdir(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.198]",
    "type": "CPP"
  },
  {
    "name": "node::Umask(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.199]",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandles(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.200]",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveRequests(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.201]",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandlesInfo(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.202]",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveRequestsInfo(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.203]",
    "type": "CPP"
  },
  {
    "name": "node::Kill(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.204]",
    "type": "CPP"
  },
  {
    "name": "node::DebugProcess(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.205]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&) [clone .cold.76]",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&) [clone .cold.77]",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnSignal(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.68]",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.69]",
    "type": "CPP"
  },
  {
    "name": "report::SetCompact(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.70]",
    "type": "CPP"
  },
  {
    "name": "report::GetSignal(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.71]",
    "type": "CPP"
  },
  {
    "name": "report::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.72]",
    "type": "CPP"
  },
  {
    "name": "report::WriteReport(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.73]",
    "type": "CPP"
  },
  {
    "name": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.74]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.109]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.110]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.111]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteRawBytes(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.112]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.113]",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.114]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.225]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.184]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.182]",
    "type": "CPP"
  },
  {
    "name": "node::SerializeBindingData(node::Environment*, v8::SnapshotCreator*, node::EnvSerializeInfo*) [clone .cold.230]",
    "type": "CPP"
  },
  {
    "name": "node::DeserializeNodeInternalFields(v8::Local<v8::Object>, int, v8::StartupData, void*) [clone .cold.231]",
    "type": "CPP"
  },
  {
    "name": "node::SerializeNodeContextInternalFields(v8::Local<v8::Object>, int, void*) [clone .cold.232]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*, char const*>(char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*, char const*>(char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*, char const*>(_IO_FILE*, char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*, char const*>(char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<v8::Object*, char const*>(char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<v8::Object*, char const*>(_IO_FILE*, char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*, char const*>(char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*, char const*>(char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*, char const*>(_IO_FILE*, char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*, int>(char const*, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*, int>(char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*, int>(char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*, int>(_IO_FILE*, char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*>(char const*, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*>(char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*>(char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*>(_IO_FILE*, char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ADDRESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.297]",
    "type": "CPP"
  },
  {
    "name": "node::symbols::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.2]",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::RunMicrotasks(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.70]",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::EnqueueMicrotask(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.71]",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.72]",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.177]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeTypes(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.22]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.131]",
    "type": "CPP"
  },
  {
    "name": "node::util::GetOwnNonIndexProperties(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.99]",
    "type": "CPP"
  },
  {
    "name": "node::util::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.100]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.244]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned char, 0>(unsigned char const&) [clone .isra.214]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned char, 0>(unsigned char const&) [clone .isra.212]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned short, 0>(unsigned short const&) [clone .isra.202]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned short, 0>(unsigned short const&) [clone .isra.200]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.196]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.194]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned int, 0>(unsigned int const&) [clone .isra.188]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned int, 0>(unsigned int const&) [clone .isra.186]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.247]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SchedYield(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.248]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdClose(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.249]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdDatasync(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.250]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSync(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.251]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcExit(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.252]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcRaise(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.253]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsSizesGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.254]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockResGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.255]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironSizesGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.256]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.257]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.258]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.259]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRenumber(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.260]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdTell(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.261]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::RandomGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.262]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.263]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.264]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatDirName(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.265]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathCreateDirectory(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.266]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.267]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRemoveDirectory(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.268]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathUnlinkFile(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.269]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PollOneoff(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.270]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRead(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.271]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdWrite(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.272]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathSymlink(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.273]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathReadlink(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.274]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRename(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.275]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathLink(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.276]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockTimeGet(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.277]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetFlags(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.278]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetSize(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.279]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAllocate(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.280]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetRights(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.281]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPread(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.282]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdReaddir(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.283]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPwrite(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.284]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockShutdown(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.285]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAdvise(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.286]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.287]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSeek(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.288]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.289]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockRecv(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.290]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockSend(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.291]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathOpen(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.292]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, long, 0>(long const&) [clone .isra.208]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WASI_NOT_STARTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_WASI_NOT_STARTED(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned int&>(char const*, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&>(char const*, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&>(char const*, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char&, unsigned int&>(char const*, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, unsigned char&, unsigned int&>(char const*, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&, unsigned int&>(char const*, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.117]",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::SetURL(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.118]",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Push(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.119]",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt() [clone .part.64]",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt() [clone .cold.74]",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*) [clone .cold.75]",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::GetEnvMessagePort(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.301]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.295]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.281]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.279]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.265]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.263]",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::InitWorker(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.302]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.303]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker() [clone .cold.304]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Worker(node::Environment*, v8::Local<v8::Object>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::PerIsolateOptions>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&&, std::shared_ptr<node::KVStore>, node::SnapshotData const*) [clone .cold.305]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.306]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.307]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Exit(int, char const*, char const*) [clone .cold.308]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StopThread(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.309]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Run() [clone .cold.310]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::NearHeapLimit(void*, unsigned long, unsigned long) [clone .cold.311]",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&) [clone .cold.312]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PLATFORM_FOR_WORKER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WORKER_INIT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*&, char const*&>(char const*, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&, char const*&, char const*&>(_IO_FILE*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&, char const*&, char const*&>(node::AsyncWrap*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.195]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::MemoryInfo(node::MemoryTracker*) const [clone .cold.196]",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.63]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.34]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Spawn(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.35]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.93]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.94]",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.56]",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Writev(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.155]",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.156]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStreamPipe(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.113]",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.72]",
    "type": "CPP"
  },
  {
    "name": "node::ERR_STRING_TOO_LONG(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_MEMORY_ALLOCATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, unsigned short const*, unsigned long, v8::Local<v8::Value>*) [clone .cold.39]",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*) [clone .part.36] [clone .cold.40]",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*) [clone .cold.41]",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, node::encoding, v8::Local<v8::Value>*) [clone .cold.42]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStringDecoder(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.61]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::MakeString(v8::Isolate*, char const*, unsigned long, node::encoding) [clone .cold.62]",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.85]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.23]",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.46]",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.155]",
    "type": "CPP"
  },
  {
    "name": "node::ThrowErrStringTooLong(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "node::uv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.62]",
    "type": "CPP"
  },
  {
    "name": "node::uv::GetErrMap(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.63]",
    "type": "CPP"
  },
  {
    "name": "node::uv::ErrName(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.64]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.46]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FindNodeTextRegion() [clone .cold.48]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*>(char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<void*>(char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<void*>(_IO_FILE*, char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*, void*>(char const*, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*, void*, void*>(char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<void*, void*, void*>(char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<void*, void*, void*>(_IO_FILE*, char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*&>(char const*, char*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*&, char*&>(char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*&, char*&>(char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*&, char*&>(_IO_FILE*, char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.178]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.174]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.109]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.107]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::WriteProfile(v8::Local<v8::Object>) [clone .cold.179]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::WriteProfile(v8::Local<v8::Object>) [clone .cold.180]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::DispatchMessage(char const*, char const*, bool) [clone .cold.181]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&) [clone .cold.182]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::End() [clone .cold.183]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::End() [clone .cold.184]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::End() [clone .cold.185]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StartProfilers(node::Environment*)::{lambda(void*)#1}::_FUN(void*) [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::TakeCoverage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StopCoverage(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.88]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long>(char const*, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, unsigned long&, unsigned long>(char const*, int&&, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, unsigned long&, unsigned long>(char const*, int&&, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*>(_IO_FILE*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&>(_IO_FILE*, char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [3]>(_IO_FILE*, char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::IsEnabled(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.112]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::WaitForDebugger(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.113]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Url(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.114]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::InspectorConsoleCall(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.115]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Open(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.116]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.117]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::HandleGetRequest(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .cold.203]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnHttpGet(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .cold.204]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >) [clone .cold.249]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool) [clone .cold.250]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::MakeDelegateThreadSafe(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >) [clone .cold.251]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::WorkerCreated(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::shared_ptr<node::inspector::MainThreadHandle>) [clone .cold.129]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetAutoAttach(std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> >) [clone .cold.170]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_COUNTER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::ValidateIV(node::Environment*, node::crypto::CryptoJobMode, v8::Local<v8::Value>, node::crypto::AESCipherConfig*) [clone .cold.190]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::ValidateAdditionalData(node::Environment*, node::crypto::CryptoJobMode, v8::Local<v8::Value>, node::crypto::AESCipherConfig*) [clone .cold.191]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::ValidateAuthTag(node::Environment*, node::crypto::CryptoJobMode, node::crypto::WebCryptoCipherMode, v8::Local<v8::Value>, node::crypto::AESCipherConfig*) [clone .cold.192]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::WebCryptoCipherMode, node::crypto::AESCipherConfig*) [clone .cold.193]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_TAG_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_TAG_LENGTH(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_IV<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::CryptoErrorStore::Insert<>(node::crypto::NodeCryptoError)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>*) [clone .cold.181]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYLEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HKDFConfig*) [clone .cold.118]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.58]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Traits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::PBKDF2Config*) [clone .cold.61]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<int>(v8::Isolate*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_DIGEST<char*>(v8::Isolate*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_STATE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_OPERATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_OPERATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::(anonymous namespace)::CheckThrow(node::Environment*, node::crypto::SignBase::Error) [clone .cold.246]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignTraits::DeriveBits(node::Environment*, node::crypto::SignConfiguration const&, node::crypto::ByteSource*) [clone .cold.247]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long) [clone .cold.248]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long) [clone .cold.249]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.250]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::SignConfiguration*) [clone .cold.251]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Timing::TimingSafeEqual(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.58]",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int) [clone .constprop.196]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.194]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CheckCCMMessageLength(int) [clone .cold.198]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(char const*, unsigned long, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*) [clone .part.104] [clone .cold.199]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long) [clone .cold.200]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(node::crypto::ArrayBufferOrViewContents<unsigned char> const&, int) [clone .cold.201]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.202]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.203]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.204]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitAuthenticated(char const*, int, unsigned int) [clone .cold.205]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CommonInit(char const*, evp_cipher_st const*, unsigned char const*, int, unsigned char const*, int, unsigned int) [clone .cold.206]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(char const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, unsigned int) [clone .cold.207]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.208]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(char const*, node::crypto::ByteSource const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, unsigned int) [clone .cold.209]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.210]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OSSL_EVP_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_OSSL_EVP_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNSUPPORTED_OPERATION<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_UNSUPPORTED_OPERATION<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_CIPHER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_CIPHER(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_IV(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_MESSAGELEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_AUTH_TAG<char const*&>(v8::Isolate*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_AUTH_TAG<unsigned int&>(v8::Isolate*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_AUTH_TAG<unsigned int&>(v8::Isolate*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetECDHCurve(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.184]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCRL(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.185]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetEngineKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetDHParam(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::LoadPKCS12(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Init(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.189]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_CURVE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_CURVE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_OPERATION_FAILED<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.299]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.300]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.301]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.302]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::BufferToPoint(node::Environment*, ec_group_st const*, v8::Local<v8::Value>) [clone .cold.303]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.304]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ConvertKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.305]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>*) [clone .cold.306]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.307]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.308]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::ECDHBitsConfig*) [clone .cold.309]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ImportJWKEcKey(node::Environment*, v8::Local<v8::Object>, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int) [clone .cold.310]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYPAIR<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYTYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_KEYTYPE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_JWK<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_JWK<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_JWK_UNSUPPORTED_CURVE<char const*>(v8::Isolate*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(char const*, char const*, int) [clone .cold.216]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long) [clone .cold.217]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HmacConfig*) [clone .cold.218]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::RandomBytesConfig*) [clone .cold.185]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::CheckPrimeConfig*) [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::RandomPrimeConfig*) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>*) [clone .cold.210]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::WebCryptoCipherMode, node::crypto::RSACipherConfig*) [clone .cold.211]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ImportJWKRsaKey(node::Environment*, v8::Local<v8::Object>, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int) [clone .cold.212]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportChallenge(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.67]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::VerifySpkac(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.68]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportPublicKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.69]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::ToException(node::Environment*, v8::Local<v8::String>) const [clone .cold.155]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LoadEngineById(char const*, node::crypto::CryptoErrorStore*) [clone .cold.156]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_DH_GROUP<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_DH_GROUP(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INITIALIZATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellmanGroup(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.274]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetKey(v8::FunctionCallbackInfo<v8::Value> const&, int (*)(dh_st*, bignum_st*), char const*) [clone .cold.275]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>*) [clone .cold.276]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::New(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.277]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.278]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.279]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetField(v8::FunctionCallbackInfo<v8::Value> const&, bignum_st const* (*)(dh_st const*), char const*) [clone .cold.280]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.281]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::DHBitsConfig*) [clone .cold.282]",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_KEYLEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long)#1}::_FUN(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long) [clone .cold.247]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HashConfig*) [clone .cold.248]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPrivateKeyEncodingFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyEncodingContext) [clone .cold.186]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetParsedKey(node::Environment*, std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >&&, node::crypto::ParseKeyResult, char const*) [clone .cold.187]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPublicOrPrivateKeyFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*) [clone .cold.188]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Equals(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.189]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >) [clone .cold.190]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::InitJWK(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.191]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_JWK<char const*&>(v8::Isolate*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_SCRYPT_PARAMS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::ScryptConfig*) [clone .cold.56]",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int) [clone .constprop.289]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, unsigned long, 0>(unsigned long const&) [clone .isra.251]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, unsigned long, 0>(unsigned long const&) [clone .isra.249]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<4u, int, 0>(int const&) [clone .isra.245]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToStringHelper::BaseConvert<3u, int, 0>(int const&) [clone .isra.243]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetPskIdentityHint(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.291]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetSession(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.292]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetOCSPResponse(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.293]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ReadStart() [clone .cold.294]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ReadStop() [clone .cold.295]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SSLInfoCallback(ssl_st const*, int, int) [clone .cold.296]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::TLSWrap(node::Environment*, v8::Local<v8::Object>, node::crypto::TLSWrap::Kind, node::StreamBase*, node::crypto::SecureContext*) [clone .cold.297]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::ReadStop() [clone .cold.298]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::ReadStart() [clone .cold.299]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::InvokeQueued(int, char const*) [clone .cold.300]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DestroySSL(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.301]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearIn() [clone .cold.302]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*) [clone .cold.303]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EncOut() [clone .cold.304]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int) [clone .cold.305]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearOut() [clone .cold.306]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DoShutdown(node::ShutdownWrap*) [clone .cold.307]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int) [clone .constprop.282] [clone .cold.308]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::NewSessionDoneCb() [clone .cold.309]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnClientHelloParseEnd(void*) [clone .cold.310]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::NewSessionDone(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.311]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamRead(long, uv_buf_t const&) [clone .cold.312]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Receive(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.313]",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, char const*&>(_IO_FILE*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, char const*&>(node::AsyncWrap*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, int&>(_IO_FILE*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long, int&>(node::AsyncWrap*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_OPERATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckHost(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.194]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckIP(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.195]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckEmail(v8::FunctionCallbackInfo<v8::Value> const&) [clone .cold.196]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >) [clone .cold.197]",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*) [clone .cold.165]",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::CreateBlob(v8::SnapshotCreator::FunctionCodeHandling) [clone .cold.721]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ObjectLiteralProperty::ObjectLiteralProperty(v8::internal::AstValueFactory*, v8::internal::Expression*, v8::internal::Expression*, bool) [clone .cold.148]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::BinaryOperation::IsSmiLiteralOperation(v8::internal::Expression**, v8::internal::Smi*) [clone .cold.149]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCallNew(v8::internal::CallNew*) [clone .cold.113]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CallPrinter::VisitCall(v8::internal::Call*) [clone .cold.114]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DeclarationScope::DeclareParameter(v8::internal::AstRawString const*, v8::internal::VariableMode, bool, bool, v8::internal::AstValueFactory*, int) [clone .cold.203]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ModuleScope::AllocateModuleVariables() [clone .cold.204]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ClassScope::FinalizeReparsedClassScope(v8::internal::Isolate*, v8::internal::MaybeHandle<v8::internal::ScopeInfo>, v8::internal::AstValueFactory*, bool) [clone .cold.205]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::baseline::BaselineBatchCompiler::InstallBatch() [clone .cold.174]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::CreateDynamicFunction(v8::internal::Isolate*, v8::internal::BuiltinArguments, char const*) [clone .cold.42]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SafeStackFrameIterator::SafeStackFrameIterator(v8::internal::Isolate*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) [clone .cold.356]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FutexEmulation::CleanupAsyncWaiterPromise(v8::internal::FutexWaitListNode*) [clone .cold.121]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FutexEmulation::Wake(v8::internal::Handle<v8::internal::JSArrayBuffer>, unsigned long, unsigned int) [clone .cold.122]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ErrorUtils::ThrowLoadFromNullOrUndefined(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::MaybeHandle<v8::internal::Object>) [clone .cold.119]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::Flag::CheckFlagChange(v8::internal::(anonymous namespace)::Flag::SetBy, bool, char const*) [clone .cold.73]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::(anonymous namespace)::Flag::Reset() [clone .cold.74]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FlagList::ResetAllFlags() [clone .cold.75]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FlagList::SetFlagsFromCommandLine(int*, char**, bool, v8::internal::FlagList::HelpOptions) [clone .cold.76]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ReadOnlyHeap::InitFromIsolate(v8::internal::Isolate*) [clone .cold.117]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::AllocateTopLevelRegisters() [clone .cold.836]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildInvalidPropertyAccess(v8::internal::MessageTemplate, v8::internal::Property*) [clone .cold.837]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildPrivateBrandCheck(v8::internal::Property*, v8::internal::interpreter::Register) [clone .cold.838]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitNamedSuperPropertyLoad(v8::internal::Property*, v8::internal::interpreter::Register) [clone .cold.839]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitKeyedSuperPropertyLoad(v8::internal::Property*, v8::internal::interpreter::Register) [clone .cold.840]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitSwitchStatement(v8::internal::SwitchStatement*) [clone .cold.841]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildClassProperty(v8::internal::ClassLiteralProperty*) [clone .cold.842]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildCreateArrayLiteral(v8::internal::ZoneList<v8::internal::Expression*> const*, v8::internal::ArrayLiteral*) [clone .cold.843]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitNaryArithmeticExpression(v8::internal::NaryOperation*) [clone .cold.844]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildLoadPropertyKey(v8::internal::LiteralProperty*, v8::internal::interpreter::Register) [clone .cold.845]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::PrepareAssignmentLhs(v8::internal::Expression*, v8::internal::interpreter::BytecodeGenerator::AccumulatorPreservingMode) [clone .cold.846]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::PrepareAssignmentLhs(v8::internal::Expression*, v8::internal::interpreter::BytecodeGenerator::AccumulatorPreservingMode) [clone .constprop.817] [clone .cold.847]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildClassLiteral(v8::internal::ClassLiteral*, v8::internal::interpreter::Register) [clone .cold.848]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildDestructuringObjectAssignment(v8::internal::ObjectLiteral*, v8::internal::Token::Value, v8::internal::LookupHoistingMode) [clone .cold.849]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::BuildAssignment(v8::internal::interpreter::BytecodeGenerator::AssignmentLhsData const&, v8::internal::Token::Value, v8::internal::LookupHoistingMode) [clone .cold.850]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitCompoundAssignment(v8::internal::CompoundAssignment*) [clone .cold.851]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitPropertyLoad(v8::internal::interpreter::Register, v8::internal::Property*) [clone .cold.852]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitProperty(v8::internal::Property*) [clone .cold.853]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitCountOperation(v8::internal::CountOperation*) [clone .cold.854]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitCompareOperation(v8::internal::CompareOperation*) [clone .cold.855]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitCallSuper(v8::internal::Call*) [clone .cold.856]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeGenerator::VisitCall(v8::internal::Call*) [clone .cold.857]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeRegisterOptimizer::Materialize(v8::internal::interpreter::BytecodeRegisterOptimizer::RegisterInfo*) [clone .cold.70]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::interpreter::BytecodeRegisterOptimizer::GetInputRegisterList(v8::internal::interpreter::RegisterList) [clone .cold.71]",
    "type": "CPP"
  },
  {
    "name": "v8::sampler::SamplerManager::RemoveSampler(v8::sampler::Sampler*) [clone .cold.87]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::metrics::Recorder::Delay(std::unique_ptr<v8::internal::metrics::Recorder::DelayedEventBase, std::default_delete<v8::internal::metrics::Recorder::DelayedEventBase> >&&) [clone .cold.45]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FeedbackNexus::ConfigureCloneObject(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Map>) [clone .cold.247]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Object::NoSideEffectsToMaybeString(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>) [clone .cold.851]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::JSProxy::SetPrivateSymbol(v8::internal::Isolate*, v8::internal::Handle<v8::internal::JSProxy>, v8::internal::Handle<v8::internal::Symbol>, v8::internal::PropertyDescriptor*, v8::Maybe<v8::internal::ShouldThrow>) [clone .cold.852]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SwissNameDictionary::NumberOfEnumerableProperties() [clone .cold.70]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SwissNameDictionary::SlowReverseLookup(v8::internal::Isolate*, v8::internal::Object) [clone .cold.71]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::ShortcutNumericLiteralBinaryExpression(v8::internal::Expression**, v8::internal::Expression*, v8::internal::Token::Value, int) [clone .cold.1031]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::RewriteForVarInLegacy(v8::internal::ParserBase<v8::internal::Parser>::ForInfo const&) [clone .cold.1032]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::DeclareArrowFunctionFormalParameters(v8::internal::ParserFormalParameters*, v8::internal::Expression*, v8::internal::Scanner::Location const&) [clone .cold.1033]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::BuildRejectPromiseOnException(v8::internal::Block*, v8::internal::REPLMode) [clone .cold.1034]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::ParseAndRewriteAsyncGeneratorFunctionBody(int, v8::internal::FunctionKind, v8::internal::ScopedList<v8::internal::Statement*, void*>*) [clone .cold.1035]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::ParseFunction(v8::internal::ScopedList<v8::internal::Statement*, void*>*, v8::internal::AstRawString const*, int, v8::internal::FunctionKind, v8::internal::FunctionSyntaxKind, v8::internal::DeclarationScope*, int*, int*, bool*, int*, int*, v8::internal::ZoneList<v8::internal::AstRawString const*>*) [clone .cold.1036]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::DoParseFunction(v8::internal::Isolate*, v8::internal::ParseInfo*, int, int, int, v8::internal::AstRawString const*) [clone .cold.1037]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::ParseClassForInstanceMemberInitialization(v8::internal::Isolate*, v8::internal::MaybeHandle<v8::internal::ScopeInfo>, int, int, int) [clone .cold.1038]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Parser::DoParseDeserializedFunction(v8::internal::Isolate*, v8::internal::MaybeHandle<v8::internal::ScopeInfo>, v8::internal::ParseInfo*, int, int, int, v8::internal::AstRawString const*) [clone .cold.1039]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapObjectsMap::RemoveDeadEntries() [clone .cold.1022]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::NativeObjectsExplorer::EntryForEmbedderGraphNode(v8::EmbedderGraph::Node*) [clone .cold.1023]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapObjectsMap::AddMergedNativeEntry(void*, unsigned long) [clone .cold.1024]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Runtime_ThrowNoAccess(int, unsigned long*, v8::internal::Isolate*) [clone .cold.35]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::SharedHeapSerializer::SerializeUsingSharedHeapObjectCache(v8::internal::SnapshotByteSink*, v8::internal::Handle<v8::internal::HeapObject>) [clone .cold.99]",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8Debugger::asyncTaskStartedForStack(void*) [clone .cold.618]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::InitializeStdlibTypes() [clone .cold.310]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateCall() [clone .cold.311]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmJsParser::ValidateFunction() [clone .cold.312]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsmOverloadedFunctionType::CanBeInvokedWith(v8::internal::wasm::AsmType*, v8::internal::ZoneVector<v8::internal::wasm::AsmType*> const&) [clone .cold.59]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Runtime_WasmNumCodeSpaces(int, unsigned long*, v8::internal::Isolate*) [clone .cold.146]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::trap_handler::MetadataLock::MetadataLock() [clone .cold.1]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::trap_handler::MetadataLock::~MetadataLock() [clone .cold.2]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::AsyncStreamingDecoder::Finish(bool) [clone .cold.174]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::DebugInfo::GetStackValue(int, unsigned long, unsigned long, unsigned long, v8::internal::Isolate*) [clone .cold.569]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::WasmEngine::EnableCodeLogging(v8::internal::Isolate*) [clone .cold.921]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::WasmEngine::RemoveCompileJob(v8::internal::wasm::AsyncCompileJob*) [clone .cold.922]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::WasmEngine::FreeNativeModule(v8::internal::wasm::NativeModule*) [clone .cold.923]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::WasmEngine::RemoveIsolate(v8::internal::Isolate*) [clone .cold.924]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::wasm::WasmEngine::AddPotentiallyDeadCode(v8::internal::wasm::WasmCode*) [clone .cold.925]",
    "type": "CPP"
  },
  {
    "name": "cppgc::internal::PageBackend::FreeLargePageMemory(unsigned char*) [clone .cold.161]",
    "type": "CPP"
  },
  {
    "name": "cppgc::internal::PageBackend::AllocateNormalPageMemory(unsigned long) [clone .cold.162]",
    "type": "CPP"
  },
  {
    "name": "poll_cb.cold.3",
    "type": "CPP"
  },
  {
    "name": "timer_cb.cold.4",
    "type": "CPP"
  },
  {
    "name": "uv__cancelled",
    "type": "CPP"
  },
  {
    "name": "init_once.cold.2",
    "type": "CPP"
  },
  {
    "name": "uv__threadpool_cleanup.cold.3",
    "type": "CPP"
  },
  {
    "name": "uv__print_handles.cold.4",
    "type": "CPP"
  },
  {
    "name": "uv__async_io.part.1.cold.3",
    "type": "CPP"
  },
  {
    "name": "uv_async_send.cold.4",
    "type": "CPP"
  },
  {
    "name": "uv__io_start.cold.14",
    "type": "CPP"
  },
  {
    "name": "uv__fs_work.cold.13",
    "type": "CPP"
  },
  {
    "name": "uv__getnameinfo_work.cold.1",
    "type": "CPP"
  },
  {
    "name": "uv_getnameinfo.cold.2",
    "type": "CPP"
  },
  {
    "name": "uv__chld.cold.3",
    "type": "CPP"
  },
  {
    "name": "uv_spawn.cold.4",
    "type": "CPP"
  },
  {
    "name": "uv__signal_block_and_lock.cold.12",
    "type": "CPP"
  },
  {
    "name": "uv__signal_global_init.cold.13",
    "type": "CPP"
  },
  {
    "name": "uv__signal_global_reinit.cold.14",
    "type": "CPP"
  },
  {
    "name": "uv__signal_stop.part.6.cold.15",
    "type": "CPP"
  },
  {
    "name": "uv__signal_start.cold.16",
    "type": "CPP"
  },
  {
    "name": "uv_barrier_destroy.cold.0",
    "type": "CPP"
  },
  {
    "name": "uv_thread_create.cold.1",
    "type": "CPP"
  },
  {
    "name": "uv_thread_create_ex.cold.2",
    "type": "CPP"
  },
  {
    "name": "uv_mutex_init_recursive.cold.3",
    "type": "CPP"
  },
  {
    "name": "uv_mutex_destroy.cold.4",
    "type": "CPP"
  },
  {
    "name": "uv_mutex_lock.cold.5",
    "type": "CPP"
  },
  {
    "name": "uv_mutex_unlock.cold.6",
    "type": "CPP"
  },
  {
    "name": "uv_rwlock_destroy.cold.7",
    "type": "CPP"
  },
  {
    "name": "uv_rwlock_rdlock.cold.8",
    "type": "CPP"
  },
  {
    "name": "uv_rwlock_rdunlock.cold.9",
    "type": "CPP"
  },
  {
    "name": "uv_rwlock_wrlock.cold.10",
    "type": "CPP"
  },
  {
    "name": "uv_rwlock_wrunlock.cold.11",
    "type": "CPP"
  },
  {
    "name": "uv_once.cold.12",
    "type": "CPP"
  },
  {
    "name": "uv_sem_init.cold.13",
    "type": "CPP"
  },
  {
    "name": "uv_sem_destroy.cold.14",
    "type": "CPP"
  },
  {
    "name": "uv_sem_post.cold.15",
    "type": "CPP"
  },
  {
    "name": "uv_cond_destroy.cold.16",
    "type": "CPP"
  },
  {
    "name": "uv_cond_signal.cold.17",
    "type": "CPP"
  },
  {
    "name": "uv_cond_broadcast.cold.18",
    "type": "CPP"
  },
  {
    "name": "uv_cond_wait.cold.19",
    "type": "CPP"
  },
  {
    "name": "uv_cond_timedwait.cold.20",
    "type": "CPP"
  },
  {
    "name": "uv_key_delete.cold.21",
    "type": "CPP"
  },
  {
    "name": "uv_key_set.cold.22",
    "type": "CPP"
  },
  {
    "name": "uv__io_check_fd.cold.1",
    "type": "CPP"
  },
  {
    "name": "uv__io_poll.cold.2",
    "type": "CPP"
  },
  {
    "name": "read_times.cold.5",
    "type": "CPP"
  },
  {
    "name": "uv__read_cgroups_uint64.constprop.3.cold.6",
    "type": "CPP"
  },
  {
    "name": "uv__read_proc_meminfo.cold.7",
    "type": "CPP"
  },
  {
    "name": "uv_uptime.cold.8",
    "type": "CPP"
  },
  {
    "name": "uv_loadavg.cold.9",
    "type": "CPP"
  },
  {
    "name": "EVP_PKEY_asn1_find_str.cold.2",
    "type": "CPP"
  },
  {
    "name": "fd_gets.cold.4",
    "type": "CPP"
  },
  {
    "name": "X509_PURPOSE_add.cold.14",
    "type": "CPP"
  },
  {
    "name": "X509_check_purpose.cold.15",
    "type": "CPP"
  },
  {
    "name": "v8::platform::DefaultJobState::NotifyConcurrencyIncrease() [clone .part.10] [clone .cold.15]",
    "type": "CPP"
  },
  {
    "name": "v8::platform::DefaultJobState::DidRunTask() [clone .cold.16]",
    "type": "CPP"
  },
  {
    "name": "icu_71::PatternMap::copyFrom(icu_71::PatternMap const&, UErrorCode&) [clone .part.68] [clone .cold.82]",
    "type": "CPP"
  },
  {
    "name": "icu_71::IslamicCalendar::getType() const [clone .cold.11]",
    "type": "CPP"
  },
  {
    "name": "icu_71::IslamicCalendar::handleComputeFields(int, UErrorCode&) [clone .cold.12]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::AffixUtils::getFieldForType(icu_71::number::impl::AffixPatternType) [clone .cold.5]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::AffixUtils::nextToken(icu_71::number::impl::AffixTag, icu_71::UnicodeString const&, UErrorCode&) [clone .cold.6]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::Grouper::forStrategy(UNumberGroupingStrategy) [clone .cold.3]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MixedUnitLongNameHandler::getModifier(icu_71::number::impl::Signum, icu_71::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MixedUnitLongNameHandler::getModifier(icu_71::number::impl::Signum, icu_71::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::SimpleModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::ConstantAffixModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_71::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_71::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::getSymbol(icu_71::number::impl::AffixPatternType) const [clone .cold.10]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::getSymbol(icu_71::number::impl::AffixPatternType) const [clone .cold.11]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::ParsedPatternInfo::charAt(int, int) const [clone .cold.27]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::PatternStringUtils::resolveSignDisplay(UNumberSignDisplay, icu_71::number::impl::Signum) [clone .cold.28]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::RoundingImpl::apply(icu_71::number::impl::DecimalQuantity&, UErrorCode&) const [clone .part.4] [clone .cold.7]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::ScientificModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::stem_to_object::notation(icu_71::number::impl::skeleton::StemEnum) [clone .cold.50]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::stem_to_object::roundingMode(icu_71::number::impl::skeleton::StemEnum) [clone .cold.51]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::enum_to_stem_string::roundingMode(UNumberFormatRoundingMode, icu_71::UnicodeString&) [clone .cold.52]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::enum_to_stem_string::groupingStrategy(UNumberGroupingStrategy, icu_71::UnicodeString&) [clone .cold.53]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::enum_to_stem_string::unitWidth(UNumberUnitWidth, icu_71::UnicodeString&) [clone .cold.54]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::enum_to_stem_string::signDisplay(UNumberSignDisplay, icu_71::UnicodeString&) [clone .cold.55]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::GeneratorHelpers::roundingMode(icu_71::number::impl::MacroProps const&, icu_71::UnicodeString&, UErrorCode&) [clone .cold.56]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::GeneratorHelpers::unitWidth(icu_71::number::impl::MacroProps const&, icu_71::UnicodeString&, UErrorCode&) [clone .cold.57]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::GeneratorHelpers::sign(icu_71::number::impl::MacroProps const&, icu_71::UnicodeString&, UErrorCode&) [clone .cold.58]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::GeneratorHelpers::decimal(icu_71::number::impl::MacroProps const&, icu_71::UnicodeString&, UErrorCode&) [clone .cold.59]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::skeleton::parseStem(icu_71::StringSegment const&, icu_71::UCharsTrie const&, icu_71::number::impl::SeenMacroProps&, icu_71::number::impl::MacroProps&, UErrorCode&) [clone .cold.60]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::GeneratorHelpers::generateSkeleton(icu_71::number::impl::MacroProps const&, icu_71::UnicodeString&, UErrorCode&) [clone .part.40] [clone .cold.61]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::utils::getPatternForStyle(icu_71::Locale const&, char const*, icu_71::number::impl::CldrPatternStyle, UErrorCode&) [clone .cold.16]",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::NumberRangeFormatterImpl::format(icu_71::number::impl::UFormattedNumberRangeData&, bool, UErrorCode&) const [clone .cold.33]",
    "type": "CPP"
  },
  {
    "name": "icu_71::FixedDecimal::getPluralOperand(icu_71::PluralOperand) const [clone .cold.62]",
    "type": "CPP"
  },
  {
    "name": "icu_71::PluralRules::select(int) const [clone .cold.63]",
    "type": "CPP"
  },
  {
    "name": "icu_71::PluralRules::select(double) const [clone .cold.64]",
    "type": "CPP"
  },
  {
    "name": "icu_71::AndConstraint::isFulfilled(icu_71::IFixedDecimal const&) [clone .cold.65]",
    "type": "CPP"
  },
  {
    "name": "icu_71::tokenTypeToPluralOperand(icu_71::tokenType) [clone .cold.66]",
    "type": "CPP"
  },
  {
    "name": "icu_71::Region::getContainedRegions(URegionType, UErrorCode&) const [clone .cold.29]",
    "type": "CPP"
  },
  {
    "name": "icu_71::SimpleDateFormat::subFormat(icu_71::UnicodeString&, char16_t, int, UDisplayContext, int, char16_t, icu_71::FieldPositionHandler&, icu_71::Calendar&, UErrorCode&) const [clone .cold.55]",
    "type": "CPP"
  },
  {
    "name": "icu_71::TimeZoneFormat::setGMTOffsetPattern(UTimeZoneFormatGMTOffsetPatternType, icu_71::UnicodeString const&, UErrorCode&) [clone .cold.51]",
    "type": "CPP"
  },
  {
    "name": "icu_71::CollationDataBuilder::copyFromBaseCE32(int, unsigned int, signed char, UErrorCode&) [clone .part.35] [clone .cold.45]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::DoubleToStringConverter::DoubleToAscii(double, icu_71::double_conversion::DoubleToStringConverter::DtoaMode, int, char*, int, bool*, int*, int*) [clone .cold.2]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::ComputeGuess(icu_71::double_conversion::Vector<char const>, int, double*) [clone .isra.20] [clone .cold.28]",
    "type": "CPP"
  },
  {
    "name": "icu_71::NFRuleSet::parseRules(icu_71::UnicodeString&, UErrorCode&) [clone .cold.21]",
    "type": "CPP"
  },
  {
    "name": "icu_71::NFRuleSet::setDecimalFormatSymbols(icu_71::DecimalFormatSymbols const&, UErrorCode&) [clone .cold.22]",
    "type": "CPP"
  },
  {
    "name": "icu_71::NFRuleSet::findFractionRuleSetRule(double) const [clone .cold.23]",
    "type": "CPP"
  },
  {
    "name": "icu_71::NFRuleSet::appendRules(icu_71::UnicodeString&) const [clone .cold.24]",
    "type": "CPP"
  },
  {
    "name": "icu_71::NFRuleSet::parse(icu_71::UnicodeString const&, icu_71::ParsePosition&, double, unsigned int, icu_71::Formattable&) const [clone .cold.25]",
    "type": "CPP"
  },
  {
    "name": "icu_71::numparse::impl::AffixPatternMatcherBuilder::consumeToken(icu_71::number::impl::AffixPatternType, int, UErrorCode&) [clone .cold.26]",
    "type": "CPP"
  },
  {
    "name": "umsg_vparse_71.part.11.cold.13",
    "type": "CPP"
  },
  {
    "name": "umsg_vformat_71.cold.14",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::MultiplyByPowerOfTen(int) [clone .part.5] [clone .cold.15]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::AddUInt64(unsigned long) [clone .part.13] [clone .cold.16]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::AssignHexString(icu_71::double_conversion::Vector<char const>) [clone .cold.17]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::AddBignum(icu_71::double_conversion::Bignum const&) [clone .cold.18]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::SubtractBignum(icu_71::double_conversion::Bignum const&) [clone .cold.19]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::ShiftLeft(int) [clone .cold.20]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::MultiplyByUInt32(unsigned int) [clone .cold.21]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::MultiplyByUInt64(unsigned long) [clone .cold.22]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::Square() [clone .cold.23]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::AssignPowerUInt16(unsigned short, int) [clone .cold.24]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::Align(icu_71::double_conversion::Bignum const&) [clone .cold.25]",
    "type": "CPP"
  },
  {
    "name": "icu_71::double_conversion::Bignum::DivideModuloIntBignum(icu_71::double_conversion::Bignum const&) [clone .cold.26]",
    "type": "CPP"
  },
  {
    "name": "llhttp_errno_name.cold.0",
    "type": "CPP"
  },
  {
    "name": "llhttp_method_name.cold.1",
    "type": "CPP"
  },
  {
    "name": "llhttp__internal_execute.cold.3",
    "type": "CPP"
  },
  {
    "name": "BrotliCompressBufferQuality10.cold.35",
    "type": "CPP"
  },
  {
    "name": "icu_71::initSingletons(char const*, UErrorCode&) [clone .cold.12]",
    "type": "CPP"
  },
  {
    "name": "icu_71::RuleBasedBreakIterator::DictionaryCache::following(int, int*, int*) [clone .part.6] [clone .cold.12]",
    "type": "CPP"
  },
  {
    "name": "icu_71::RuleBasedBreakIterator::DictionaryCache::preceding(int, int*, int*) [clone .cold.13]",
    "type": "CPP"
  },
  {
    "name": "icu_71::RuleBasedBreakIterator::BreakCache::populateNear(int, UErrorCode&) [clone .part.11] [clone .cold.14]",
    "type": "CPP"
  },
  {
    "name": "_uhash_find(UHashtable const*, UElement, int) [clone .cold.4]",
    "type": "CPP"
  },
  {
    "name": "uhash_equals_71.cold.5",
    "type": "CPP"
  },
  {
    "name": "icu_71::WholeStringBreakIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "icu_71::WholeStringBreakIterator::adoptText(icu_71::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "utrace_exit_71.cold.3",
    "type": "CPP"
  },
  {
    "name": "icu_71::RBBINode::flattenVariables() [clone .cold.1]",
    "type": "CPP"
  },
  {
    "name": "icu_71::RBBINode::flattenSets() [clone .cold.2]",
    "type": "CPP"
  },
  {
    "name": "v8::base::OS::Abort() [clone .cold.15]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::compiler::RedundancyElimination::ReduceEffectPhi(v8::internal::compiler::Node*) [clone .cold.60]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::compiler::WasmInliner::InlineCall(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::internal::Signature<v8::internal::wasm::ValueType> const*, unsigned long) [clone .cold.328]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::compiler::ControlEquivalence::VisitPost(v8::internal::compiler::Node*, v8::internal::compiler::Node*, v8::internal::compiler::ControlEquivalence::DFSDirection) [clone .cold.120]",
    "type": "CPP"
  },
  {
    "name": "v8::internal::compiler::EffectControlLinearizer::LowerFastApiCall(v8::internal::compiler::Node*) [clone .cold.291]",
    "type": "CPP"
  },
  {
    "name": "uv_library_shutdown",
    "type": "CPP"
  },
  {
    "name": ".annobin_static_reloc.c.startup",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13AsyncResourceC2EPN2v87IsolateENS1_5LocalINS1_6ObjectEEEPKcd",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13CallbackScopeC2EPN2v87IsolateENS1_5LocalINS1_6ObjectEEENS_13async_contextE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13SpinEventLoopEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13ParseEncodingEPKcNS_8encodingE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node31AllowWasmCodeGenerationCallbackEN2v85LocalINS0_7ContextEEENS1_INS0_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node14ErrnoExceptionEPN2v87IsolateEiPKcS4_S4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9RunAtExitEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9AsyncWrap23DestroyAsyncIdsCallbackEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10cares_wrap11ChannelWrapC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11ConnectWrapC2EPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEENS_9AsyncWrap12ProviderTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_connection_wrap.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process18enabled_debug_listE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11Environment15kNodeContextTagE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__Z23_register_fs_event_wrapv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10HandleWrap3RefERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node4heap18BuildEmbedderGraphERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9HistogramC2ERKNS0_7OptionsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN6v8impl7RefBaseC2EP10napi_env__jbPFvS2_PvS3_ES3_S3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8JSStreamC2EPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9JSUDPWrapC2EPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6loader10ModuleWrapC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEENS5_INS4_6ModuleEEENS5_INS4_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process12reverted_cveE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN15node_napi_env__C2EN2v85LocalINS0_7ContextEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node19node_is_initializedE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node4Blob10InitializeEN2v85LocalINS1_6ObjectEEENS2_INS1_5ValueEEENS2_INS1_7ContextEEEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6Buffer11HasInstanceEN2v85LocalINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__Z16_register_configv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node15DefineConstantsEPN2v87IsolateENS0_5LocalINS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10contextify17ContextifyContextC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEERKNS0_14ContextOptionsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process15linux_at_secureE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6fs_dir9DirHandleC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEEP8uv_dir_s",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process13env_var_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node20IsExceptionDecoratedEPNS_11EnvironmentEN2v85LocalINS2_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node25ExternalReferenceRegistry19external_referencesEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node2fs8BasenameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__Z21_register_http_parserv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node5http212Http2Session21callback_struct_savedE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node4i18n9ConverterC2EPKcS3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node16NodeMainInstanceC2EPN2v87IsolateEP9uv_loop_sPNS_20MultiIsolatePlatformERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EESI_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK4node10BaseObject15GetTransferModeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process8metadataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13native_module18NativeModuleLoader9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13native_module15NativeModuleEnv15has_code_cache_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process17cli_options_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node2os10InitializeEN2v85LocalINS1_6ObjectEEENS2_INS1_5ValueEEENS2_INS1_7ContextEEEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11performance10timeOriginE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node23WorkerThreadsTaskRunnerC2Ei",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_nodedbg_const_ContextEmbedderIndex__kEnvironment__int",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11ProcessEmitEPNS_11EnvironmentEPKcN2v85LocalINS4_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CFunctionBuilderWithFunction<v8::CTypeInfoBuilder<void>, v8::CTypeInfoBuilder<v8::Local<v8::Value>> >::Build() [clone .isra.49]",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11per_process11umask_mutexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node19CreateProcessObjectEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN6report17TriggerNodeReportEPN2v87IsolateEPN4node11EnvironmentEPKcS7_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_5LocalINS0_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN6report11WriteReportERKN2v820FunctionCallbackInfoINS0_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN6report10WalkHandleEP11uv_handle_sPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6serdes17SerializerContextC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10FormatBlobB5cxx11EPNS_12SnapshotDataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13SocketAddress10ToSockAddrEiPKcjP16sockaddr_storage",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node11StatWatcher10InitializeEPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__Z17_register_symbolsv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node21PromiseRejectCallbackEN2v820PromiseRejectMessageE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node15NodeCategorySet3NewERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node31RegisterTypesExternalReferencesEPNS_25ExternalReferenceRegistryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10Utf8StringEPN2v87IsolateERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node4util24ArrayBufferViewHasBufferERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8v8_utils11BindingDataC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node4wasi4WASIC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEEP16uvwasi_options_s",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node12wasm_web_api19WasmStreamingObject10InitializeEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8WatchdogC2EPN2v87IsolateEmPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6worker6WorkerC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_17PerIsolateOptionsEEOSt6vectorISD_SaISD_EESG_INS_7KVStoreEEPKNS_12SnapshotDataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node19DefineZlibConstantsEN2v85LocalINS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8PipeWrap11InstantiateEPNS_11EnvironmentEPNS_9AsyncWrapENS0_10SocketTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__Z22_register_process_wrapv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node26DecreaseSignalHandlerCountEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node20SyncProcessStdioPipeC2EPNS_17SyncProcessRunnerEbb8uv_buf_t",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10StreamBase11ReadStartJSERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node10StreamPipeC2EPNS_10StreamBaseES2_N2v85LocalINS3_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node23IsConstructCallCallbackERKN2v820FunctionCallbackInfoINS0_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node14unbase64_tableE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13StringDecoder10DecodeDataEPN2v87IsolateEPKcPm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node7TCPWrap11InstantiateEPNS_11EnvironmentEPNS_9AsyncWrapENS0_10SocketTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node31RegisterTimerExternalReferencesEPNS_25ExternalReferenceRegistryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9TimerWrap4StopEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node7tracing5AgentC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node7TTYWrap26RegisterExternalReferencesEPNS_25ExternalReferenceRegistryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8SendWrapC2EPNS_11EnvironmentEN2v85LocalINS3_6ObjectEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9Utf8ValueC2EPN2v87IsolateENS1_5LocalINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node2uv7ErrNameERKN2v820FunctionCallbackInfoINS1_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node25MapStaticCodeToLargePagesEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector5AgentC2EPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector11InspectorIo5StartESt10shared_ptrINS0_16MainThreadHandleEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES2_INS_15ExclusiveAccessINS_8HostPortENS_9MutexBaseINS_16LibuvMutexTraitsEEEEEERKNS_17InspectPublishUidE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node8profiler20V8ProfilerConnectionC2EPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector26RegisterExternalReferencesEPNS_25ExternalReferenceRegistryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector19MainThreadInterfaceC2EPNS0_5AgentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector8protocol12RuntimeAgentC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node9inspector8protocol12TracingAgentC2EPNS_11EnvironmentESt10shared_ptrINS0_16MainThreadHandleEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto15AESCipherConfigC2EOS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto7NodeBIO3NewEPNS_11EnvironmentE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto18SSL_CTX_get_issuerEP10ssl_ctx_stP7x509_st",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto15DsaKeyGenTraits5SetupEPNS0_16KeyPairGenConfigINS0_16DsaKeyPairParamsEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto10HKDFConfigC2EOS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto12PBKDF2ConfigC2EOS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto8SignBase4InitEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto6Timing15TimingSafeEqualERKN2v820FunctionCallbackInfoINS2_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto10CipherBase13GetSSLCiphersERKN2v820FunctionCallbackInfoINS2_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto7LoadBIOEPNS_11EnvironmentEN2v85LocalINS3_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto16GetCurveFromNameEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto4HmacC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto17RandomBytesTraits12EncodeOutputEPNS_11EnvironmentERKNS0_17RandomBytesConfigEPNS0_10ByteSourceEPN2v85LocalINS9_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto15RsaKeyGenTraits5SetupEPNS0_16KeyPairGenConfigINS0_16RsaKeyPairParamsEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto5SPKAC11VerifySpkacERKNS0_25ArrayBufferOrViewContentsIcEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto14VerifyCallbackEiP17x509_store_ctx_st",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto13DiffieHellmanC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto4HashC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto14ManagedEVPPKeyC2EOSt10unique_ptrI11evp_pkey_stNS_15FunctionDeleterIS3_XadL_Z13EVP_PKEY_freeEEEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto19NidKeyPairGenTraits16AdditionalConfigENS0_13CryptoJobModeERKN2v820FunctionCallbackInfoINS3_5ValueEEEPjPNS0_16KeyPairGenConfigINS0_16NidKeyPairParamsEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto12ScryptConfigC2EOS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto7TLSWrapC2EPNS_11EnvironmentEN2v85LocalINS4_6ObjectEEENS1_4KindEPNS_10StreamBaseEPNS0_13SecureContextE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto11ManagedX509C2EOSt10unique_ptrI7x509_stNS_15FunctionDeleterIS3_XadL_Z9X509_freeEEEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node6crypto10InitializeEN2v85LocalINS1_6ObjectEEENS2_INS1_5ValueEEENS2_INS1_7ContextEEEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13native_module18NativeModuleLoader20LoadJavaScriptSourceEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25PropertyCallbackArgumentsC2EPNS0_7IsolateENS0_6ObjectES4_NS0_8JSObjectENS_5MaybeINS0_11ShouldThrowEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10ApiNatives19InstantiateFunctionEPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_INS0_20FunctionTemplateInfoEEENS0_11MaybeHandleINS0_4NameEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v812ScriptOrigin18HostDefinedOptionsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29AstFunctionLiteralIdReindexerC2Emi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal12AstRawString12AsArrayIndexEPj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7AstNode20AsIterationStatementEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal26SourceTextModuleDescriptor20AstRawStringComparerclEPKNS0_12AstRawStringES5_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CallPrinterC2EPNS0_7IsolateEbNS1_21SpreadErrorInArgsHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11VariableMapC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21SourceRangeAstVisitorC2EmPNS0_10ExpressionEPNS0_14SourceRangeMapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8VariableC2EPS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8baseline21BaselineBatchCompilerC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8baseline16BaselineCompiler8PrologueEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22CanCompileWithBaselineEPNS0_7IsolateENS0_18SharedFunctionInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8baseline22BytecodeOffsetIteratorC2ENS0_6HandleINS0_9ByteArrayEEENS3_INS0_13BytecodeArrayEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Accessors12MakeAccessorEPNS0_7IsolateENS0_6HandleINS0_4NameEEEPFvNS_5LocalINS_4NameEEERKNS_20PropertyCallbackInfoINS_5ValueEEEEPFvS9_NS7_ISB_EERKNSA_INS_7BooleanEEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21Builtin_HandleApiCallEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26Builtin_ArrayPrototypeFillEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Builtin_ArrayBufferConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32Builtin_CallAsyncModuleFulfilledEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_BigIntConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal40Builtin_CallSitePrototypeGetColumnNumberEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_MapPrototypeClearEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18Builtin_ConsoleDirEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_DataViewConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Builtin_DateConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24Builtin_ErrorConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_FunctionConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Builtin_GlobalDecodeURIEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15Builtin_IllegalEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal38Builtin_StringPrototypeToUpperCaseIntlEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17Builtin_JsonParseEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal36Builtin_NumberPrototypeToExponentialEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal43Builtin_ObjectPrototypePropertyIsEnumerableEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Builtin_ReflectDefinePropertyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31Builtin_RegExpPrototypeToStringEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Builtin_ShadowRealmConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_AtomicsIsLockFreeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Builtin_StringFromCodePointEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal35Builtin_SharedStructTypeConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Builtin_SymbolConstructorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32Builtin_TemporalPlainDateCompareEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Builtin_IsTraceCategoryEnabledEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33Builtin_TypedArrayPrototypeBufferEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal38Builtin_FinalizationRegistryUnregisterEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8Builtins29GetContinuationBytecodeOffsetENS0_7BuiltinE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29BuiltinsConstantsTableBuilderC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16AssemblerOptions7DefaultEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal16CodeCommentEntry14comment_lengthEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8CodeDesc10InitializeEPS1_PNS0_9AssemblerEiiiii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CodeFactory13RuntimeCEntryEPNS0_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal13CodeReference13constant_poolEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16CompilationCacheC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25UnoptimizedCompilationJob10ExecuteJobEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_constant_pool.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24ExternalReferenceEncoderC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22ExternalReferenceTable9ref_name_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17ExternalReference6CreateEPNS_11ApiFunctionENS1_4TypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21FlushInstructionCacheEPvm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12HandlerTableC2ENS0_4CodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27CallInterfaceDescriptorData19InitializeRegistersENS_4base5FlagsINS1_4FlagEiEEiiNS0_18StackArgumentOrderEiPKNS0_8RegisterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24OptimizedCompilationInfoC2EPNS0_4ZoneEPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS6_INS0_10JSFunctionEEENS0_8CodeKindENS0_14BytecodeOffsetEPNS0_15JavaScriptFrameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24PendingOptimizationTable23PreparedForOptimizationEPNS0_7IsolateENS0_6HandleINS0_10JSFunctionEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21RegisterConfiguration7DefaultEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9RelocInfo20kFillerCommentStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14SafepointTableC2EPNS0_7IsolateEmNS0_4CodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26SourcePositionTableBuilderC2EPNS0_4ZoneENS1_13RecordingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoRKNS0_18SourcePositionInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal18StringConstantBase22AllocateStringConstantEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11TickCounter26TickAndMaybeEnterSafepointEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18TurboAssemblerBaseC2EPNS0_7IsolateERKNS0_16AssemblerOptionsENS0_18CodeObjectRequiredESt10unique_ptrINS0_15AssemblerBufferESt14default_deleteIS9_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26UnoptimizedCompilationInfoC2EPNS0_4ZoneEPNS0_9ParseInfoEPNS0_15FunctionLiteralE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28NoThrowOnJavascriptExecutionC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21LazyCompileDispatcher3JobC2ESt10unique_ptrINS0_21BackgroundCompileTaskESt14default_deleteIS4_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27OptimizingCompileDispatcherD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9DateCacheC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10DateParser11DayComposer5WriteEPd",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8Coverage14CollectPreciseEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13DebugEvaluate6GlobalEPNS0_7IsolateENS0_6HandleINS0_6StringEEENS_5debug18EvaluateGlobalModeENS0_8REPLModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14FrameInspectorC2EPNS0_11CommonFrameEiPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug12SetContextIdENS_5LocalINS_7ContextEEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21DebugPropertyIterator6CreateEPNS0_7IsolateENS0_6HandleINS0_10JSReceiverEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug13ScopeIterator17CreateForFunctionEPNS_7IsolateENS_5LocalINS_8FunctionEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13ScopeIteratorC2EPNS0_7IsolateEPNS0_14FrameInspectorENS1_15ReparseStrategyE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v85debug18StackTraceIterator6CreateEPNS_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11TypeProfile7CollectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5DebugC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8LiveEdit11PatchScriptEPNS0_7IsolateENS0_6HandleINS0_6ScriptEEENS4_INS0_6StringEEEbPNS_5debug14LiveEditResultE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20DeoptimizedFrameInfoC2EPNS0_15TranslatedStateEN9__gnu_cxx17__normal_iteratorIPNS0_15TranslatedFrameESt6vectorIS6_SaIS6_EEEEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Deoptimizer20FindDeoptimizingCodeEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23MaterializedObjectStore3GetEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32TranslationArrayPrintSingleFrameERSoNS0_9ByteArrayEiNS0_26DeoptimizationLiteralArrayE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24TranslationArrayIteratorC2ENS0_9ByteArrayEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18BasicBlockProfiler3GetEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21CompilationStatistics16RecordPhaseStatsEPKcS3_RKNS1_10BasicStatsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal15V8NameConverter21InitExternalRefsCacheEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16EhFrameConstants22kEhFrameTerminatorSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_gdb_jit.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_objects_debug.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal6Object5PrintEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13PerfJitLogger21kFilenameFormatStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_arguments.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13EmbedderStateC2EPNS_7IsolateENS_5LocalINS_7ContextEEENS_16EmbedderStateTagE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Execution4CallEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_iPS6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10StackFrame33return_address_location_resolver_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17FutexWaitListNodeD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15InterruptsScopeC2EPNS0_7IsolateElNS1_4ModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23DefaultEmbeddedBlobCodeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12LocalIsolateC2EPNS0_7IsolateENS0_10ThreadKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15MessageLocationC2ENS0_6HandleINS0_6ScriptEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14MicrotaskQueue17kRingBufferOffsetE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10Protectors30InvalidateArrayBufferDetachingEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_simulator_base.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10StackGuard13SetStackLimitEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14ThreadLocalTop5ClearEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26OptimizationReasonToStringENS0_18OptimizationReasonE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86Locker10InitializeEPNS_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26ExternalizeStringExtension7kSourceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11GCExtension25GetNativeFunctionTemplateEPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IgnitionStatisticsExtension25GetNativeFunctionTemplateEPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19StatisticsExtension7kSourceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33FLAG_abort_on_contradictory_flagsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13GlobalHandles22OnStackTracedNodeSpace24NotifyEmptyEmbedderStackEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11HandleScope15NumberOfHandlesEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16LocalHandleScope19GetMainThreadHandleEPNS0_9LocalHeapEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17PersistentHandlesC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17AllocationCounter21AddAllocationObserverEPNS0_18AllocationObserverE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ArrayBufferList6AppendEPNS0_20ArrayBufferExtensionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9BaseSpace12GetSpaceNameENS0_15AllocationSpaceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16BasicMemoryChunkC2EPNS0_4HeapEPNS0_9BaseSpaceEmmmNS0_13VirtualMemoryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20CodeRangeAddressHint14GetAddressHintEmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14CodeStatistics31RecordCodeAndMetadataStatisticsENS0_10HeapObjectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17CollectionBarrier14WasGCRequestedEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26CombinedHeapObjectIteratorC2EPNS0_4HeapENS0_18HeapObjectIterator20HeapObjectsFilteringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29StressConcurrentAllocatorTask11RunInternalEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24ConcurrentMarkingVisitor4CastINS0_10ConsStringEEET_NS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v87CppHeap6CreateEPNS_8PlatformERKNS_19CppHeapCreateParamsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26ExtractEmbedderDataBackrefEPNS0_7IsolateENS_5LocalINS_5ValueEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23UnifiedHeapMarkingStateC2EPNS0_4HeapEPNS0_16MarkingWorklists5LocalE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29UnifiedHeapMarkingVisitorBaseC2ERN5cppgc8internal8HeapBaseERNS3_17BasicMarkingStateERNS0_23UnifiedHeapMarkingStateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23LocalEmbedderHeapTracer15SetRemoteTracerEPNS_18EmbedderHeapTracerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_factory_base.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Factory11CodeBuilderC2EPNS0_7IsolateERKNS0_8CodeDescENS0_8CodeKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31FinalizationRegistryCleanupTaskC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16FreeListCategory5ResetEPNS0_8FreeListE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17GCIdleTimeHandler22kConservativeTimeRatioE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8GCTracer5Scope4NameENS2_7ScopeIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13HeapAllocatorC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11V8HeapTrait5kNameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16HeapLayoutTracer25GCProloguePrintHeapLayoutEPNS_7IsolateENS_6GCTypeENS_15GCCallbackFlagsEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12WriteBarrier21CurrentMarkingBarrierEPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Heap_PageFlagsAreConsistentENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IncrementalMarkingJob5StartEPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IncrementalMarking8Observer4StepEimm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22InvalidatedSlotsFilter8OldToOldEPNS0_11MemoryChunkE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9LargePageC2EPNS0_4HeapEPNS0_9BaseSpaceEmmmNS0_13VirtualMemoryENS0_13ExecutabilityE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12LocalFactoryC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9LocalHeap7CurrentEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Marking16kWhiteBitPatternE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14MarkingBarrierC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16MarkingWorklistsD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Bitmap5kSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15MemoryAllocator17commit_page_size_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17MemoryChunkLayout24CodePageGuardStartOffsetEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11MemoryChunk19DiscardUnusedMemoryEmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21MeasureMemoryDelegateC2EPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_INS0_9JSPromiseEEENS_17MeasureMemoryModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13MemoryReducer12kLongDelayMsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9SemiSpace14InitializePageEPNS0_11MemoryChunkE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19FieldStatsCollector21GetInobjectFieldStatsENS0_3MapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_objects_visiting.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24PagedSpaceObjectIteratorC2EPNS0_4HeapEPNS0_10PagedSpaceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12ReadOnlyHeap23IsSharedMemoryAvailableEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18CopyAndRebaseRootsEPmS1_m",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16IsolateSafepointC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11ScavengeJob30YoungGenerationTaskTriggerSizeEPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ScavengerCollector7JobTaskC2EPS1_PSt6vectorISt10unique_ptrINS0_9ScavengerESt14default_deleteIS6_EESaIS9_EES4_ISt4pairINS0_16ParallelWorkItemEPNS0_11MemoryChunkEESaISH_EEPN4heap4base8WorklistISD_INS0_10HeapObjectEiELt256EEEPNS6_13PromotionListE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10TypedSlotsD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4PageC2EPNS0_4HeapEPNS0_9BaseSpaceEmmmNS0_13VirtualMemoryENS0_13ExecutabilityE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21StressMarkingObserverC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22StressScavengeObserverC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7SweeperC2EPNS0_4HeapEPNS0_26MajorNonAtomicMarkingStateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11WeakObjects5LocalC2EPS1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal16CallOptimization18GetAccessorContextENS0_3MapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11LoadHandler17LoadFromPrototypeEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_10JSReceiverEEENS4_INS0_3SmiEEENS0_17MaybeObjectHandleESB_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7ICStats9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal2IC23TransitionMarkFromStateENS0_16InlineCacheStateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9StubCacheC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15SourceCodeCache10InitializeEPNS0_7IsolateEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16IsolateAllocator24InitializeOncePerProcessEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29InitializeExternalStartupDataEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal2V89platform_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter20BytecodeArrayBuilderC2EPNS0_4ZoneEiiPNS0_18FeedbackVectorSpecENS0_26SourcePositionTableBuilder13RecordingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter21BytecodeArrayIteratorC2ENS0_6HandleINS0_13BytecodeArrayEEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter27BytecodeArrayRandomIteratorC2ENS0_6HandleINS0_13BytecodeArrayEEEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter19BytecodeArrayWriter24kMaxSizeOfPackedBytecodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter15BytecodeDecoder21DecodeRegisterOperandEmNS1_11OperandTypeENS1_12OperandScaleE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter23CreateArrayLiteralFlags6EncodeEbi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter17BytecodeGenerator12ControlScope14PerformCommandENS3_7CommandEPNS0_9StatementEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter14BytecodeLabels3NewEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal11interpreter12BytecodeNode5PrintERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter25BytecodeRegisterOptimizer21kInvalidEquivalenceIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreterlsERSoRKNS1_18BytecodeSourceInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter20ConstantArrayBuilder18ConstantArraySliceC2EPNS0_4ZoneEmmNS1_11OperandSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter27BreakableControlFlowBuilderD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter19HandlerTableBuilderC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter16IntrinsicsHelper11IsSupportedENS0_7Runtime10FunctionIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11interpreter11InterpreterC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21JsonParseInternalizer11InternalizeEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13JsonStringifyEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES5_S5_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10StatsTableC2EPNS0_8CountersE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11LocalLoggerC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal3Log19kLogToTemporaryFileE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15CodeEventLoggerC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14StringToDoubleEPKcid",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10MathRandom17InitializeContextEPNS0_7IsolateENS0_6HandleINS0_7ContextEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12BackingStore5ClearEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9GetDigitsENS0_10BigIntBaseE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal12CallSiteInfo12IsPromiseAllEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23OffHeapInstructionStartENS0_10HeapObjectENS0_7BuiltinE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21CompilationCacheTable12LookupScriptENS0_6HandleIS1_EENS2_INS0_6StringEEENS0_12LanguageModeEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ScriptContextTable24AddLocalNamesFromContextEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_7ContextEEEbi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9DebugInfo7IsEmptyEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23ElementsKindToShiftSizeENS0_12ElementsKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32ArrayConstructInitializeElementsENS0_6HandleINS0_7JSArrayEEEPNS0_9ArgumentsILNS0_13ArgumentsTypeE1EEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17EmbedderDataArray14EnsureCapacityEPNS0_7IsolateENS0_6HandleIS1_EEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18FeedbackVectorSpec7AddSlotENS0_16FeedbackSlotKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9FieldType4NoneEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4Intl18ToLatin1LowerTableEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13JSArrayBuffer5SetupENS0_10SharedFlagENS0_13ResizableFlagESt10shared_ptrINS0_12BackingStoreEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17JSV8BreakIterator3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_PKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10JSCollator15ResolvedOptionsEPNS0_7IsolateENS0_6HandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16JSDateTimeFormat22CanonicalizeTimeZoneIDERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14JSDisplayNames3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal10JSFunction20GetAttachedCodeKindsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12JSListFormat3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8JSLocale16Is38AlphaNumListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14JSNumberFormat32MinimumIntegerDigitsFromSkeletonERKN6icu_7113UnicodeStringE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10JSReceiver11HasPropertyEPNS0_14LookupIteratorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal13JSPluralRules12TypeAsStringEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21JSRegExpResultIndices12BuildIndicesEPNS0_7IsolateENS0_6HandleINS0_15RegExpMatchInfoEEENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20JSRelativeTimeFormat3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal17JSSegmentIterator19GranularityAsStringEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11JSSegmenter3NewEPNS0_7IsolateENS0_6HandleINS0_3MapEEENS4_INS0_6ObjectEEES8_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10JSSegments6CreateEPNS0_7IsolateENS0_6HandleINS0_11JSSegmenterEEENS4_INS0_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8temporal22CreateTemporalDateTimeEPNS0_7IsolateEiiiiiiiiiNS0_6HandleINS0_10JSReceiverEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14KeyAccumulator7GetKeysENS0_6HandleINS0_10JSReceiverEEENS0_17KeyCollectionModeENS0_14PropertyFilterENS0_17GetKeysConversionEbb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27ArrayBoilerplateDescription17BriefPrintDetailsERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21DescriptorLookupCache5ClearEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11PropertyKeyC2EPNS0_7IsolateENS0_6HandleINS0_6ObjectEEEPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22ManagedObjectFinalizerERKNS_16WeakCallbackInfoIvEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10MapUpdaterC2EPNS0_7IsolateENS0_6HandleINS0_3MapEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal3Map24GetPrototypeChainRootMapEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Module9SetStatusENS1_6StatusE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15CheckObjectTypeEmmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14GetShouldThrowEPNS0_7IsolateENS_5MaybeINS0_11ShouldThrowEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16GetOptionsObjectEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14OrderedHashSet3AddEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21OSROptimizedCodeCache5EmptyEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18PropertyDescriptor8ToObjectEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoRKNS0_14RepresentationE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9ScopeInfo18CreateForWithScopeEPNS0_7IsolateENS0_11MaybeHandleIS1_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18SharedFunctionInfo4HashEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal16SourceTextModule21GetSharedFunctionInfoEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16StringComparator5State4InitENS0_6StringERKNS0_31SharedStringAccessGuardIfNeededE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11StringTable4DatanwEmi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19SwissNameDictionary11DeleteEntryEPNS0_7IsolateENS0_6HandleIS1_EENS0_13InternalIndexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21RegisteredSymbolTable17SlowReverseLookupENS0_6ObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15SyntheticModule9SetExportEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6StringEEENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_tagged_impl.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25TemplateObjectDescription17GetTemplateObjectEPNS0_7IsolateENS0_6HandleINS0_13NativeContextEEENS4_IS1_EENS4_INS0_18SharedFunctionInfoEEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20FunctionTemplateInfo15HasInstanceTypeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19TransitionsAccessor21HasSimpleTransitionToENS0_3MapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoNS0_19BinaryOperationHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ValueSerializerC2EPNS0_7IsolateEPNS_15ValueSerializer8DelegateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11RootVisitor8RootNameENS0_4RootE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16FuncNameInferrerC2EPNS0_15AstValueFactoryE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal27ImportAssertionsKeyComparerclEPKNS0_12AstRawStringES4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13LiteralBuffer11NewCapacityEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23UnoptimizedCompileFlagsC2EPNS0_7IsolateEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6Parser18DefaultConstructorEPKNS0_12AstRawStringEbii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7parsing12ParseProgramEPNS0_9ParseInfoENS0_6HandleINS0_6ScriptEEENS0_11MaybeHandleINS0_9ScopeInfoEEEPNS0_7IsolateENS1_20ReportStatisticsModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30PendingCompilationErrorHandler14MessageDetails9SetStringENS0_6HandleINS0_6StringEEEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19PreparseDataBuilderC2EPNS0_4ZoneEPS1_PSt6vectorIPvSaIS6_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9PreParser13GetIdentifierEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal9Processor21AssignUndefinedBeforeEPNS0_9StatementE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28BufferedUtf16CharacterStreamC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Scanner13BookmarkScope11kNoBookmarkE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5Token5name_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19AllocationTraceNodeC2EPNS0_19AllocationTraceTreeEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14ProfilingScopeC2EPNS0_7IsolateEPNS0_16ProfilerListenerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12HeapProfilerC2EPNS0_4HeapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal13HeapGraphEdgeC2ENS1_4TypeEPKcPNS0_9HeapEntryES6_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19SourcePositionTable11SetPositionEiii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16ProfilerListenerC2EPNS0_7IsolateEPNS0_17CodeEventObserverERNS0_16CodeEntryStorageERNS0_16WeakCodeRegistryENS_22CpuProfilingNamingModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20SamplingHeapProfiler8Observer21GetNextSampleIntervalEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14StringsStorage12StringsMatchEPvS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10SymbolizerC2EPNS0_7CodeMapE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10TickSample4InitEPNS0_7IsolateERKNS_13RegisterStateENS1_17RecordCEntryFrameEbbNS_4base9TimeDeltaE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22TracingCpuProfilerImplC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16WeakCodeRegistry5TrackEPNS0_9CodeEntryENS0_6HandleINS0_12AbstractCodeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoRKNS0_17RegExpInstructionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26ExperimentalRegExpCompiler12CanBeHandledEPNS0_10RegExpTreeENS_4base5FlagsINS0_10RegExpFlagEiEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29ExperimentalRegExpInterpreter11FindMatchesEPNS0_7IsolateENS0_6RegExp10CallOriginENS0_9ByteArrayEiNS0_6StringEiPiiPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ExperimentalRegExp12CanBeHandledEPNS0_10RegExpTreeENS_4base5FlagsINS0_10RegExpFlagEiEEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17RegExpDisjunction6AcceptEPNS0_13RegExpVisitorEPv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23RegExpBytecodeGeneratorC2EPNS0_7IsolateEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal34RegExpBytecodePeepholeOptimization16OptimizeBytecodeEPNS0_7IsolateEPNS0_4ZoneENS0_6HandleINS0_6StringEEEPKhiRKNS0_16ZoneUnorderedMapIiiNS_4base4hashIiEESt8equal_toIiEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31RegExpBytecodeDisassembleSingleEPKhS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RegExpAtom6ToNodeEPNS0_14RegExpCompilerEPNS0_10RegExpNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RegExpTree12AppendToTextEPNS0_10RegExpTextEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14DotPrinterImpl9PrintNodeEPKcPNS0_10RegExpNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19IrregexpInterpreter5MatchEPNS0_7IsolateENS0_8JSRegExpENS0_6StringEPiiiNS0_6RegExp10CallOriginE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26RegExpMacroAssemblerTracerC2EPNS0_7IsolateEPNS0_20RegExpMacroAssemblerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20RegExpMacroAssemblerC2EPNS0_7IsolateEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12RegExpParser25ParseRegExpFromHeapStringEPNS0_7IsolateEPNS0_4ZoneENS0_6HandleINS0_6StringEEENS_4base5FlagsINS0_10RegExpFlagEiEEPNS0_17RegExpCompileDataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16RegExpStackScopeC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11RegExpUtils20GenericCaptureGetterEPNS0_7IsolateENS0_6HandleINS0_15RegExpMatchInfoEEEiPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal6RegExp19CanGenerateBytecodeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10RootsTable11root_names_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Runtime_TransitionElementsKindEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21Runtime_AtomicsLoad64EiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Runtime_BigIntCompareToBigIntEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal34Runtime_ThrowUnsupportedSuperErrorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15Runtime_TheHoleEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19Runtime_CompileLazyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Runtime_DateCurrentTimeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28Runtime_DebugBreakOnBytecodeEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22Runtime_ForInEnumerateEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31Runtime_FunctionGetScriptSourceEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal35Runtime_AtomicsNumWaitersForTestingEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32Runtime_AsyncFunctionAwaitCaughtEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19Runtime_AccessCheckEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18Runtime_FormatListEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Runtime_CreateObjectLiteralEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Runtime_DynamicImportCallEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22Runtime_StringToNumberEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Runtime17GetObjectPropertyEPNS0_7IsolateENS0_6HandleINS0_6ObjectEEES6_S6_Pb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Runtime_AddEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal35Runtime_PromiseRejectEventFromStackEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17Runtime_IsJSProxyEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19CompiledReplacement7CompileEPNS0_7IsolateENS0_6HandleINS0_8JSRegExpEEENS4_INS0_6StringEEEii",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29Runtime_ThrowConstAssignErrorEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal40Runtime_ShadowRealmWrappedFunctionCreateEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23Runtime_GetSubstitutionEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Runtime_CreatePrivateSymbolEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33Runtime_ClearMegamorphicStubCacheEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_runtime_trace.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25Runtime_ArrayBufferDetachEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal52Runtime_ShrinkFinalizationRegistryUnregisterTokenMapEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Runtime17NeedsExactContextENS1_10FunctionIdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_external_pointer_table.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_sandbox.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17AlignedCachedDataC2EPKhi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19ContextDeserializer18DeserializeContextEPNS0_7IsolateEPKNS0_12SnapshotDataEbNS0_6HandleINS0_13JSGlobalProxyEEENS_33DeserializeInternalFieldsCallbackE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17ContextSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEEPNS0_17StartupSerializerENS_31SerializeInternalFieldsCallbackE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23StringTableInsertionKeyC2EPNS0_7IsolateENS0_6HandleINS0_6StringEEENS0_27DeserializingUserCodeOptionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24OffHeapInstructionStream11PcIsOffHeapEPNS0_7IsolateEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ObjectDeserializerC2EPNS0_7IsolateEPKNS0_18SerializedCodeDataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20ReadOnlyDeserializer22DeserializeIntoIsolateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18ReadOnlySerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15RootsSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEENS0_9RootIndexE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22SerializerDeserializer25IterateStartupObjectCacheEPNS0_7IsolateEPNS0_11RootVisitorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10SerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22SharedHeapDeserializer22DeserializeIntoIsolateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20SharedHeapSerializer21CanBeInSharedOldSpaceENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19GetUncompressedSizeEPKh",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14SerializedData12AllocateDataEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16SnapshotByteSink6PutIntEmPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15MaybeDecompressEPNS0_7IsolateERKNS_4base6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19StartupDeserializer22DeserializeIntoIsolateEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal17StartupSerializerC2EPNS0_7IsolateENS_4base5FlagsINS0_8Snapshot14SerializerFlagEiEEPNS0_18ReadOnlySerializerEPNS0_20SharedHeapSerializerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25StringBuilderConcatLengthEiNS0_10FixedArrayEiPb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_string_case.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19HeapStringAllocator8allocateEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Utf8DecoderC2ERKNS_4base6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN7unibrow4Utf814CalculateValueEPKhmPm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal3Uri6DecodeEPNS0_7IsolateENS0_6HandleINS0_6StringEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal10CancelableD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal14TemporalParser27ParseTemporalDateTimeStringEPNS0_7IsolateENS0_6HandleINS0_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7tracing16TraceEventHelper20GetTracingControllerEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v87tracing23TracingCategoryObserver9instance_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12RootIndexMapC2EPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24GetPlatformPageAllocatorEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal9BitVector5CountEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15IdentityMapBaseD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22init_memcopy_functionsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12DbgStreamBufC2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internallsERSoNS0_12FeedbackSlotE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal7Version6major_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33WebSnapshotSerializerDeserializer5ThrowEPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15ZoneCompression16kReservationSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4ZoneC2EPNS0_19AccountingAllocatorEPKcb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4Heap28GetIsolateFromWritableObjectENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal5AsmJs19kSingleFunctionNameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm11AsmJsParserC2EPNS0_4ZoneEmPNS0_20Utf16CharacterStreamE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal12AsmJsScannerC2EPNS0_20Utf16CharacterStreamE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm7AsmType14AsCallableTypeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15WasmValueObject3NewEPNS0_7IsolateENS0_6HandleINS0_6StringEEENS4_INS0_6ObjectEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30Runtime_SetWasmCompileControlsEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27Runtime_WasmIsValidRefValueEiPmPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16LiftoffAssembler10CacheState9InitMergeERKS3_jjj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm25ExecuteLiftoffCompilationEPNS1_14CompilationEnvERKNS1_12FunctionBodyEiNS1_12ForDebuggingERKNS1_14LiftoffOptionsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm20GetTypeCanonicalizerEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19CodeSpaceWriteScope22current_native_module_E",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17value_type_reader17consume_heap_typeEPNS1_7DecoderEPKNS1_10WasmModuleERKNS1_12WasmFeaturesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19WasmCompilationUnit24GetBaselineExecutionTierEPKNS1_10WasmModuleE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm12BuildTFGraphEPNS0_19AccountingAllocatorERKNS1_12WasmFeaturesEPKNS1_10WasmModuleEPNS0_8compiler16WasmGraphBuilderEPS4_RKNS1_12FunctionBodyEPSt6vectorINSA_12WasmLoopInfoESaISI_EEPNSA_15NodeOriginTableEiNS1_13InlinedStatusE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17InitExprInterface8I32ConstEPNS1_15WasmFullDecoderILNS1_7Decoder12ValidateFlagE2ES2_LNS1_12DecodingModeE1EEEPNS2_5ValueEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm18JumpTableAssembler23EmitLazyCompileJumpSlotEjm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal4wasm16LocalDeclEncoder7PrependEPNS0_4ZoneEPPKhS7_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm36InitializeMemoryProtectionKeySupportEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16CompilationStateD2Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm11SectionNameENS1_11SectionCodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm27InstantiateToInstanceObjectEPNS0_7IsolateEPNS1_12ErrorThrowerENS0_6HandleINS0_16WasmModuleObjectEEENS0_11MaybeHandleINS0_10JSReceiverEEENS9_INS0_13JSArrayBufferEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm12SignatureMap12FindOrInsertERKNS0_9SignatureINS1_9ValueTypeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm21AsyncStreamingDecoder15OnBytesReceivedENS_4base6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm16StreamingDecoder26CreateSyncStreamingDecoderEPNS0_7IsolateERKNS1_12WasmFeaturesENS0_6HandleINS0_7ContextEEEPKcSt10shared_ptrINS1_25CompilationResultResolverEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm27WasmReturnTypeFromSignatureEPKNS0_9SignatureINS1_9ValueTypeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22DisjointAllocationPool5MergeENS_4base13AddressRegionE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal4wasm14DebugSideTable5PrintERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17NativeModuleCache20MaybeGetNativeModuleENS1_12ModuleOriginENS_4base6VectorIKhEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm17f32_trunc_wrapperEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm12WasmFeatures9FromFlagsEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22WasmImportWrapperCache17ModificationScopeixERKNS2_8CacheKeyE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal4wasm12WasmInitExpr4typeEPKNS1_10WasmModuleERKNS1_12WasmFeaturesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v813WasmStreamingC2ESt10unique_ptrINS0_17WasmStreamingImplESt14default_deleteIS2_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19WasmFunctionBuilderC2EPNS1_17WasmModuleBuilderE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm19WasmModuleSourceMapC2EPNS_7IsolateENS_5LocalINS_6StringEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal4wasm20LazilyGeneratedNames18LookupFunctionNameERKNS1_15ModuleWireBytesEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16WasmModuleObject3NewEPNS0_7IsolateESt10shared_ptrINS0_4wasm12NativeModuleEENS0_6HandleINS0_6ScriptEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasmlsERSoRKNS0_9SignatureINS1_9ValueTypeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm9WasmError11FormatErrorB5cxx11EPKcP13__va_list_tag",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22NativeModuleSerializerC2EPKNS1_12NativeModuleENS_4base6VectorIKPNS1_8WasmCodeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal4wasm22ValidSubtypeDefinitionEjjPKNS1_10WasmModuleES4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20SharedTurboAssembler4MoveENS0_8RegisterEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11CpuFeatures19SupportsWasmSimd128Ev",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal22StackArgumentsAccessor18GetArgumentOperandEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13CodeGenerator24AssembleDeconstructFrameEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20InstructionScheduler18SchedulerSupportedEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19InstructionSelector14VisitStackSlotEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19UnwindingInfoWriter21BeginInstructionBlockEiPKNS1_16InstructionBlockE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal11Deoptimizer19kEagerDeoptExitSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16EhFrameConstants20kCodeAlignmentFactorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15JavaScriptFrame11fp_registerEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23RegExpMacroAssemblerX6415kRegExpCodeSizeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_factory.cc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21TorqueGeneratedSymbolINS0_6SymbolENS0_4NameEE11SymbolPrintERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsAllocationMemento_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IsCallHandlerInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsJSArgumentsObject_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsCallSiteInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16IsCell_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25IsBytecodeArray_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19IsContext_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23IsDataHandler_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22IsBreakPoint_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IsEnumCache_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsEmbedderDataArray_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsFeedbackCell_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsFeedbackVector_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsFixedArrayBase_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19IsForeign_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IsFreeSpace_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22IsHeapNumber_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsJSArrayBufferView_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IsJSArrayIterator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32IsJSCollectionIterator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsJSCollection_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal54IsJSFunctionOrBoundFunctionOrWrappedFunction_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsJSGeneratorObject_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22IsJSReceiver_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IsJSPromise_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal19IsJSProxy_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal34IsJSRegExpStringIterator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20IsJSRegExp_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25IsJSShadowRealm_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsJSSharedStruct_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal30IsJSTemporalCalendar_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20IsWeakCell_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal39IsArrayBoilerplateDescription_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal15IsMap_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsMegaDomHandler_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IsMicrotask_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IsModule_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal16IsName_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal31IsPrimitiveHeapObject_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsPromiseCapability_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25IsPropertyArray_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsPropertyCell_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal36IsPropertyDescriptorObject_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25IsPrototypeInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IsRegExpMatchInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal21IsScopeInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IsScript_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsPreparseData_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28IsSourceTextModule_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IsString_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal18IsStruct_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal27IsSyntheticModule_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32IsCachedTemplateObject_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsTemplateInfo_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal33IsStrongDescriptorArray_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsTurbofanType_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsJSV8BreakIterator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22IsJSCollator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal28IsJSDateTimeFormat_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsJSDisplayNames_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal24IsJSListFormat_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal20IsJSLocale_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal26IsJSNumberFormat_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal25IsJSPluralRules_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32IsJSRelativeTimeFormat_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal29IsJSSegmentIterator_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal23IsJSSegmenter_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal22IsJSSegments_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal32IsWasmInternalFunction_NonInlineENS0_10HeapObjectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImplC2EPNS0_8PlatformE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint17BitwiseAnd_PosPosENS0_8RWDigitsENS0_6DigitsES2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl21DivideBurnikelZieglerENS0_8RWDigitsES2_NS0_6DigitsES3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint9LeftShiftENS0_8RWDigitsENS0_6DigitsEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl12DivideSingleENS0_8RWDigitsEPmNS0_6DigitsEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl17FromStringClassicENS0_8RWDigitsEPNS0_21FromStringAccumulatorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl17MultiplyKaratsubaENS0_8RWDigitsENS0_6DigitsES3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl14MultiplySingleENS0_8RWDigitsENS0_6DigitsEm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl8ToStringEPcPiNS0_6DigitsEib",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint20AddAndReturnOverflowENS0_8RWDigitsENS0_6DigitsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl14InvertBasecaseENS0_8RWDigitsENS0_6DigitsES2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl11MultiplyFFTENS0_8RWDigitsENS0_6DigitsES3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v86bigint13ProcessorImpl9Toom3MainENS0_8RWDigitsENS0_6DigitsES3_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN5cppgc8internal26ConservativeTracingVisitorC2ERNS0_8HeapBaseERNS0_11PageBackendERNS_7VisitorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I_v8dbg_frametype_EntryFrame",
    "type": "CPP"
  },
  {
    "name": "main",
    "type": "CPP"
  },
  {
    "name": "__static_initialization_and_destruction_0(int, int) [clone .constprop.100]",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN4node13snapshot_dataE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88platform18NewDefaultPlatformEiNS0_15IdleTaskSupportENS0_21InProcessStackDumpingESt10unique_ptrINS_17TracingControllerESt14default_deleteIS4_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v84base20BoundedPageAllocatorC2EPNS_13PageAllocatorEmmmNS0_22PageInitializationModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v84base15RegionAllocatorC2Emmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v84base8IsSubsetENS_15PagePermissionsES1_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13CodeGeneratorC2EPNS0_4ZoneEPNS1_5FrameEPNS1_7LinkageEPNS1_19InstructionSequenceEPNS0_24OptimizedCompilationInfoEPNS0_7IsolateENS_4base8OptionalINS1_9OsrHelperEEEiPNS0_20JumpOptimizationInfoERKNS0_16AssemblerOptionsENS0_7BuiltinEmmPKc",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11GapResolver7ResolveEPNS1_12ParallelMoveE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19NumberConstantToSmiEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12GetRegConfigE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoNS1_10BranchHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19SourcePositionTableC2EPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14FeedbackSourceC2ENS0_6HandleINS0_14FeedbackVectorEEENS0_12FeedbackSlotE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10hash_valueERKNS1_23OutputFrameStateCombineE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5FrameC2Ei",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5GraphC2EPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16PropertyCellDataC2EPNS1_12JSHeapBrokerEPPNS1_10ObjectDataENS0_6HandleINS0_12PropertyCellEEENS1_14ObjectDataKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7JSGraph18CEntryStubConstantEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12JSHeapBroker27IncrementTracingIndentationEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoRKNS1_14CallDescriptor4KindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilereqENS1_19StoreRepresentationES2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14NodeProperties11IsValueEdgeENS1_4EdgeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler4Node15OutOfLineInputs3NewEPNS0_4ZoneEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8OperatorC2EtNS_4base5FlagsINS2_8PropertyEhEEPKcmmmmmm",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22PipelineCompilationJobC2EPNS0_7IsolateENS0_6HandleINS0_18SharedFunctionInfoEEENS5_INS0_10JSFunctionEEENS0_14BytecodeOffsetEPNS0_15JavaScriptFrameENS0_8CodeKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21RedundancyEliminationC2EPNS1_15AdvancedReducer6EditorEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7RefsMapC2EjNS1_14AddressMatcherEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10BasicBlockC2EPNS0_4ZoneENS2_2IdE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9SchedulerC2EPNS0_4ZoneEPNS1_5GraphEPNS1_8ScheduleENS_4base5FlagsINS2_4FlagEiEEmPNS0_11TickCounterEPKNS0_19ProfileDataFromFileE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14SelectLoweringC2EPNS1_16JSGraphAssemblerEPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler30kSimplifiedLoweringReducerNameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler25SimplifiedOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerENS1_15BranchSemanticsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10hash_valueENS1_14BaseTaggednessE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16StateValuesCacheC2EPNS1_7JSGraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21StoreStoreElimination3RunEPNS1_7JSGraphEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9TypeCache3GetEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20TypeNarrowingReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17TypedOptimizationC2EPNS1_15AdvancedReducer6EditorEPNS1_23CompilationDependenciesEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler5TyperC2EPNS1_12JSHeapBrokerENS_4base5FlagsINS2_4FlagEiEEPNS1_5GraphEPNS0_11TickCounterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9RangeType6Limits7IsEmptyEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21ValueNumberingReducerC2EPNS0_4ZoneES4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8Verifier7Visitor11CheckSwitchEPNS1_4NodeERKNS1_8AllNodesE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9ZoneStats10StatsScopeC2EPS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14JSWasmCallDataC2EPKNS0_9SignatureINS0_4wasm9ValueTypeEEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18WasmEscapeAnalysis6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11WasmInliner6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12PeelWasmLoopEPNS1_4NodeEPNS0_16ZoneUnorderedSetIS3_NS_4base4hashIS3_EESt8equal_toIS3_EEEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13AccessBuilder17ForExternalIntPtrEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compilerlsERSoNS1_10AccessModeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler24AddTypeAssertionsReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8AllNodesC2EPNS0_4ZoneEPKNS1_5GraphEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11FrameEliderC2EPNS1_19InstructionSequenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20InstructionScheduler19SchedulingQueueBase7AddNodeEPNS2_17ScheduleGraphNodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13JumpThreading17ComputeForwardingEPNS0_4ZoneEPNS0_10ZoneVectorINS1_9RpoNumberEEEPNS1_19InstructionSequenceEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10BlockState17register_in_stateENS1_12RegisterKindE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13MoveOptimizerC2EPNS0_4ZoneEPNS1_19InstructionSequenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler25RegisterAllocatorVerifierC2EPNS0_4ZoneEPKNS0_21RegisterConfigurationEPKNS1_19InstructionSequenceEPKNS1_5FrameE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19LiveRangeBoundArray10InitializeEPNS0_4ZoneEPNS1_17TopLevelLiveRangeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler11SpillPlacerC2EPNS1_15LiveRangeFinderEPNS1_29TopTierRegisterAllocationDataEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22BasicBlockInstrumentor10InstrumentEPNS0_24OptimizedCompilationInfoEPNS1_5GraphEPNS1_8ScheduleEPNS0_7IsolateE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler25BranchConditionDuplicator13DuplicateNodeEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17BranchEliminationC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS0_4ZoneEPNS1_19SourcePositionTableENS2_5PhaseE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20BytecodeGraphBuilder11EnvironmentC2EPS2_iiNS0_11interpreter8RegisterEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23BuildParameterLocationsEPKNS0_9SignatureINS0_11MachineTypeEEEmmPKNS0_11XMMRegisterEPKNS0_8RegisterEPNS2_INS1_15LinkageLocationEE7BuilderE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21CheckpointEliminationC2EPNS1_15AdvancedReducer6EditorE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15CommonNodeCache20FindExternalConstantENS0_17ExternalReferenceE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21CommonOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_5GraphEPNS1_12JSHeapBrokerEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderEPNS0_4ZoneENS1_15BranchSemanticsE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23CompilationDependenciesC2EPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22ConstantFoldingReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18ControlEquivalence3RunEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20ControlFlowOptimizerC2EPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18CsaLoadElimination6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19DeadCodeEliminationC2EPNS1_15AdvancedReducer6EditorEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23EffectControlLinearizer3RunEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21EscapeAnalysisReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerENS1_20EscapeAnalysisResultEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18EffectGraphReducerC2EPNS1_5GraphESt8functionIFvPNS1_4NodeEPNS2_9ReductionEEEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13fast_api_call25GetTypedArrayElementsKindENS_9CTypeInfo4TypeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14GraphAssemblerC2EPNS1_12MachineGraphEPNS0_4ZoneENS_4base8OptionalISt8functionIFvPNS1_4NodeEEEEEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler7Reducer8FinalizeEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12GraphTrimmerC2EPNS0_4ZoneEPNS1_5GraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler31get_cached_trace_turbo_filenameEPNS0_24OptimizedCompilationInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22JSCallReducerAssembler19SpeculativeToNumberENS0_5TNodeINS0_6ObjectEEENS1_19NumberOperationHintE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23JSContextSpecialization6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler16JSCreateLowering6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler17JSGenericLoweringC2EPNS1_7JSGraphEPNS1_15AdvancedReducer6EditorEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19JSInliningHeuristic16CollectFunctionsEPNS1_4NodeEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9JSInliner16InlineJSWasmCallEPNS1_4NodeES4_S4_S4_NS1_9StartNodeES4_S4_RKNS0_10ZoneVectorIS4_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19JSIntrinsicLoweringC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler29JSNativeContextSpecializationC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerENS_4base5FlagsINS2_4FlagEiEEPNS1_23CompilationDependenciesEPNS0_4ZoneESH_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21js_node_wrapper_utils17UndefinedConstantEPNS1_7JSGraphE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18JSTypeHintLoweringC2EPNS1_12JSHeapBrokerEPNS1_7JSGraphENS1_17FeedbackVectorRefENS_4base5FlagsINS2_4FlagEiEE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15JSTypedLoweringC2EPNS1_15AdvancedReducer6EditorEPNS1_7JSGraphEPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15LoadElimination6ReduceEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10LoopFinder13BuildLoopTreeEPNS1_5GraphEPNS0_11TickCounterEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15PeeledIteration3mapEPNS1_4NodeE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler10UnrollLoopEPNS1_4NodeEPNS0_16ZoneUnorderedSetIS3_NS_4base4hashIS3_EESt8equal_toIS3_EEEjPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler21LoopVariableOptimizerC2EPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler20MachineGraphVerifier3RunEPNS1_5GraphEPKNS1_8ScheduleEPNS1_7LinkageEbPKcPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12MachineGraph13Int32ConstantEi",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22MachineOperatorReducerC2EPNS1_15AdvancedReducer6EditorEPNS1_12MachineGraphEb",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler12MapInferenceC2EPNS1_12JSHeapBrokerEPNS1_4NodeENS1_6EffectE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14MemoryLoweringC2EPNS1_7JSGraphEPNS0_4ZoneEPNS1_16JSGraphAssemblerENS2_17AllocationFoldingESt8functionIFvPNS1_4NodeESC_PKcS6_EESE_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler15MemoryOptimizerC2EPNS1_7JSGraphEPNS0_4ZoneENS1_14MemoryLowering17AllocationFoldingEPKcPNS0_11TickCounterE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler11NodeMatcher12IsComparisonEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler19ObservableNodeStateC2EPKNS1_4NodeEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler10NodeOrigin9PrintJsonERSo",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler14OperationTyperC2EPNS1_12JSHeapBrokerEPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler9OsrHelperC2EPNS0_24OptimizedCompilationInfoE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler18PipelineStatistics11CommonStats5BeginEPS2_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler21PropertyAccessBuilder5graphEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZNK2v88internal8compiler10Truncation11descriptionEv",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler22LeastGeneralTruncationERKNS1_10TruncationES4_",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler13Int64LoweringC2EPNS1_5GraphEPNS1_22MachineOperatorBuilderEPNS1_21CommonOperatorBuilderEPNS1_25SimplifiedOperatorBuilderEPNS0_4ZoneEPNS0_9SignatureINS0_21MachineRepresentationEEESt10unique_ptrINS1_24Int64LoweringSpecialCaseESt14default_deleteISI_EE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler23BytecodeLoopAssignmentsC2EiiPNS0_4ZoneE",
    "type": "CPP"
  },
  {
    "name": "_GLOBAL__sub_I__ZN2v88internal8compiler8ToStringB5cxx11ERKNS1_21BytecodeLivenessStateE",
    "type": "CPP"
  },
  {
    "name": ".annobin_static_reloc.c.hot",
    "type": "CPP"
  },
  {
    "name": "_start",
    "type": "CPP"
  },
  {
    "name": ".annobin_static_reloc.c_end",
    "type": "CPP"
  },
  {
    "name": "_dl_relocate_static_pie",
    "type": "CPP"
  },
  {
    "name": ".annobin__dl_relocate_static_pie.end",
    "type": "CPP"
  },
  {
    "name": "deregister_tm_clones",
    "type": "CPP"
  },
  {
    "name": "register_tm_clones",
    "type": "CPP"
  },
  {
    "name": "__do_global_dtors_aux",
    "type": "CPP"
  },
  {
    "name": "frame_dummy",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_resource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_trigger_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::Close()",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeSyncCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::~CommonEnvironmentSetup()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.75]",
    "type": "CPP"
  },
  {
    "name": "node::SpinEventLoop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::~CommonEnvironmentSetup()",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::event_loop() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::array_buffer_allocator() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::isolate() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::isolate_data() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::env() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::context() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::CommonEnvironmentSetup(node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::function<node::Environment* (node::CommonEnvironmentSetup const*)>)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::ToUpper(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::SPrintFImpl[abi:cxx11](char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >(std::unique_ptr<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(char const*, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeBytes(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeWrite(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::AllowWasmCodeGenerationCallback(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::PrepareStackTraceCallback(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::LoadEnvironment(node::Environment*, char const*)::{lambda(node::StartExecutionCallbackInfo const&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::LoadEnvironment(node::Environment*, char const*)::{lambda(node::StartExecutionCallbackInfo const&)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::ShouldAbortOnUncaughtException(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferAllocator::Create(bool)",
    "type": "CPP"
  },
  {
    "name": "node::CreateArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::FreeArrayBufferAllocator(node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateCreateParamsForNode(v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateErrorHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateMiscHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(std::shared_ptr<node::ArrayBufferAllocator>, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateIsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeIsolateData(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvironmentFlags::Flags, node::ThreadId, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::GetInspectorParentHandle(node::Environment*, node::ThreadId, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEnvironment(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnvironmentIsolateData(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetArrayBufferAllocator(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, node::tracing::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::FreePlatform(node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::Create(int, v8::TracingController*, v8::PageAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializePrimordials(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetPerContextExports(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextForSnapshot(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEventLoop(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, node::node_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, napi_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, char const*, void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocateEnvironmentThreadId()",
    "type": "CPP"
  },
  {
    "name": "node::DefaultProcessExitHandler(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SetProcessExitHandler(node::Environment*, std::function<void (node::Environment*, int)>&&)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextRuntime(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::NewContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&), node::LoadEnvironment(node::Environment*, char const*)::{lambda(node::StartExecutionCallbackInfo const&)#1}>::_M_invoke(std::_Any_data const&, node::StartExecutionCallbackInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::GetImpl()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<void* const, unsigned long>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, unsigned long>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ErrnoException(v8::Isolate*, int, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::UVException(v8::Isolate*, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::RunAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.83]",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.63] [clone .constprop.82]",
    "type": "CPP"
  },
  {
    "name": "node::FinishAsyncCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::RunAtExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(node::Environment*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::DeleteACHHandle::operator()(node::ACHHandle*) const",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHookInternal(v8::Isolate*, void (*)(void*, void (*)(void*), void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHookInternal(node::ACHHandle*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetExecutionAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetTriggerAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(v8::Isolate*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(node::Environment*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEvent(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::UpdateTraceEventDuration(unsigned char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::ScopedTracer::~ScopedTracer()",
    "type": "CPP"
  },
  {
    "name": "node::signo_string(int)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.202]",
    "type": "CPP"
  },
  {
    "name": "node::DestroyParamCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::DestroyAsyncIdsCallback(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(void*)#1}::_FUN({lambda(node::Environment*)#1})",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetProviderType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.168] [clone .constprop.201]",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(bool) [clone .part.190]",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ClearAsyncIdStack(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::SetCallbackTrampoline(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ExecutionAsyncResource(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PushAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetPromiseHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterDestroyHook(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetupHooks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.204]",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Emit(node::Environment*, double, node::AsyncHooks::Fields, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitPromiseResolve(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventBefore()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitBefore(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventAfter(node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAfter(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAsyncInit(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner()",
    "type": "CPP"
  },
  {
    "name": "_register_async_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PopAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::WeakCallback(v8::WeakCallbackInfo<node::DestroyParam> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::QueueDestroyAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::Local<v8::Object>, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_async_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::is_snapshotable() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<double, std::allocator<double> >::_M_realloc_insert<double const&>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_poll_close_cb(uv_poll_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::AresTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_poll_cb(uv_poll_s*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::CanonicalizeIP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_timer_s, node::cares_wrap::ChannelWrap::CloseTimer()::{lambda(uv_timer_s*)#1}>(uv_timer_s*, node::cares_wrap::ChannelWrap::CloseTimer()::{lambda(uv_timer_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s)",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int) [clone .constprop.424]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*) [clone .constprop.425]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.429]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.430]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.428]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseTxtReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseCaaReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "std::default_delete<node::cares_wrap::ResponseData>::operator()(node::cares_wrap::ResponseData*) const [clone .isra.209] [clone .part.210]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseMxReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseSrvReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::AfterGetAddrInfo(uv_getaddrinfo_s*, int, addrinfo*)::{lambda(bool, bool)#1}::operator()(bool, bool) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseNaptrReply(node::Environment*, unsigned char const*, int, v8::Local<v8::Array>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ParseGeneralReply(node::Environment*, unsigned char const*, int, int*, v8::Local<v8::Array>, void*, int*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::Cancel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::StrError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetAddrInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetNameInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::GetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::SetServers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::AfterGetAddrInfo(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::AfterGetNameInfo(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::Create(node::cares_wrap::ChannelWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::StartTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::CloseTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ModifyActivityQueryCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::EnsureServers()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "_register_cares_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.417]",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::ares_sockstate_cb(void*, int, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::(anonymous namespace)::SetLocalAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::cares_wrap::(anonymous namespace)::Query<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits> >(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::WrapperNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetNativeObject()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetDetachedness()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getaddrinfo_s, void (*)(uv_getaddrinfo_s*, int, addrinfo*)>::Wrapper(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getnameinfo_s, void (*)(uv_getnameinfo_s*, int, char const*, char const*)>::Wrapper(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::LazilyInitializedJSTemplateConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MutexBase<node::LibuvMutexTraits>::~MutexBase()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethod(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethod(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FromJSObject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::pointer_data()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::operator()(v8::WeakCallbackInfo<node::BaseObject> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::_FUN(v8::WeakCallbackInfo<node::BaseObject> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Name>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::MemoryRetainer const*, std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, std::allocator<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*> >, std::__detail::_Select1st, std::equal_to<node::MemoryRetainer const*>, std::hash<node::MemoryRetainer const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_push_back_aux<node::MemoryRetainerNode* const&>(node::MemoryRetainerNode* const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask*, std::allocator<node::cares_wrap::NodeAresTask*>, std::__detail::_Identity, node::cares_wrap::NodeAresTask::Equal, node::cares_wrap::NodeAresTask::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::erase(std::__detail::_Node_const_iterator<node::cares_wrap::NodeAresTask*, true, true>)",
    "type": "CPP"
  },
  {
    "name": "unsigned char* node::Malloc<unsigned char>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(char const*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::Push(std::unique_ptr<node::CallbackQueue<void, node::Environment*>::Callback, std::default_delete<node::CallbackQueue<void, node::Environment*>::Callback> >)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::Callback(void*, int, int, hostent*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::ChannelWrap, false>::BaseObjectPtrImpl(node::cares_wrap::ChannelWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const [clone .constprop.67]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.66]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.64]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.70]",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) [clone .constprop.63]",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::New()",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::CheckedUvLoopClose(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::FWrite(_IO_FILE*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries[abi:cxx11]()::{lambda(dl_phdr_info*, unsigned long, void*)#1}::_FUN(dl_phdr_info*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::SymbolInfo::Display[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)::{lambda(uv_handle_s*, void*)#1}::operator()(uv_handle_s*, void*) const [clone .isra.49]",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)::{lambda(uv_handle_s*, void*)#1}::_FUN(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::DumpBacktrace(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__DumpBacktrace",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::IsMapped(void*)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::ToLower(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const*&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)::{lambda(uv_idle_s*)#1}::_FUN(uv_idle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::operator()(node::Environment*, uv_handle_s*, void*) const::{lambda(uv_handle_s*)#1}>(uv_handle_s*, node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::operator()(node::Environment*, uv_handle_s*, void*) const::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Environment::ExitEnv()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()::{lambda(uv_check_s*)#2}::_FUN(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()::{lambda(uv_prepare_s*)#1}::_FUN(uv_prepare_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()::{lambda(node::Environment*, uv_handle_s*, void*)#1}::_FUN(node::Environment*, uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "void std::__adjust_heap<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, node::CleanupHookCallback, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, __gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, node::CleanupHookCallback, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>) [clone .isra.300]",
    "type": "CPP"
  },
  {
    "name": "void std::__insertion_sort<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>) [clone .isra.682]",
    "type": "CPP"
  },
  {
    "name": "void node::MemoryTracker::TrackField<v8::Function>(char const*, v8::Local<v8::Function> const&, char const*) [clone .constprop.748]",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void node::MemoryTracker::TrackField<v8::String>(char const*, v8::Local<v8::String> const&, char const*) [clone .constprop.762]",
    "type": "CPP"
  },
  {
    "name": "void std::__introsort_loop<__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}> >(__gnu_cxx::__normal_iterator<node::CleanupHookCallback*, std::vector<node::CleanupHookCallback, std::allocator<node::CleanupHookCallback> > >, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>, long, __gnu_cxx::__ops::_Iter_comp_iter<node::Environment::RunCleanup()::{lambda(node::CleanupHookCallback const&, node::CleanupHookCallback const&)#1}>)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.771]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.765]",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::DeleteMe(void*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.770]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.756]",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunTimers(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::DeserializeProperties(std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::UpdateTraceCategoryState()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ExitEnv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintSyncTrace() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAtExitCallbacks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearInterrupts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()::{lambda(v8::Isolate*, void*)#1}::_FUN(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearNativeImmediates(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CheckImmediate(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CleanupHandles()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ScheduleTimer(long)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleTimerRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetNow()",
    "type": "CPP"
  },
  {
    "name": "node::CollectExceptionInfo(node::Environment*, v8::Local<v8::Object>, int, char const*, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CollectUVExceptionInfo(v8::Local<v8::Value>, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::ImmediateInfo(v8::Isolate*, node::ImmediateInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::ImmediateInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::TickInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::TickInfo(v8::Isolate*, node::TickInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::AsyncHooks(v8::Isolate*, node::AsyncHooks::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<unsigned long, std::allocator<unsigned long> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::AsyncHooks::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::grow_async_ids_stack()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::FailWithCorruptedAsyncStack(double)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Exit(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::stop_sub_worker_contexts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::worker_parent_env() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintAllBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintInfoForSnapshotIfDebug()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::VerifyNoStrongBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<node::PropInfo, std::allocator<node::PropInfo> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::EnvSerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::EnqueueDeserializeRequest(void (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*), v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunDeserializeRequests()",
    "type": "CPP"
  },
  {
    "name": "node::GuessMemoryAvailableToTheProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunWeakRefCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::GetExecPath(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Isolate*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::DeserializeProperties(node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeMainContext(v8::Local<v8::Context>, node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BuildEmbedderGraph(v8::Isolate*, v8::EmbedderGraph*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RemoveUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AddUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), void (*)(node::Environment*, int)>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(node::Environment*, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::length(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCwd[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::node_module*, node::node_module*, std::_Identity<node::node_module*>, std::less<node::node_module*>, std::allocator<node::node_module*> >::_M_erase(std::_Rb_tree_node<node::node_module*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator=(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::Track(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PropInfo, std::allocator<node::PropInfo> >::_M_realloc_insert<node::PropInfo>(__gnu_cxx::__normal_iterator<node::PropInfo*, std::vector<node::PropInfo, std::allocator<node::PropInfo> > >, node::PropInfo&&)",
    "type": "CPP"
  },
  {
    "name": "node::PropInfo& std::vector<node::PropInfo, std::allocator<node::PropInfo> >::emplace_back<node::PropInfo>(node::PropInfo&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::~FSEventWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::OnEvent(uv_fs_event_s*, char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::GetInitialized(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FSEventWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_fs_event_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs_event_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsInitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsUninitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HandleWrap(node::Environment*, v8::Local<v8::Object>, uv_handle_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_handle_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HandleWrap, false>::BaseObjectPtrImpl(node::HandleWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::~FileOutputStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::FileOutputStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::EndOfStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::~HeapSnapshotStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::heap::(anonymous namespace)::HeapSnapshotStream::WriteAsciiChunk(char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::WriteSnapshot(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::TriggerHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*)",
    "type": "CPP"
  },
  {
    "name": "_register_heap_utils()",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(node::Environment*, std::unique_ptr<v8::HeapSnapshot const, node::FunctionDeleter<v8::HeapSnapshot const, &node::heap::DeleteHeapSnapshot> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_heap_utils(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, true, false>, bool> std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_emplace<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >(std::integral_constant<bool, true>, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >&&) [clone .constprop.265]",
    "type": "CPP"
  },
  {
    "name": "node::heap::(anonymous namespace)::HeapSnapshotStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::WriteHeapStatsChunk(v8::HeapStatsUpdate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::AsyncWrap, false>::BaseObjectPtrImpl(node::AsyncWrap*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddEdge(v8::EmbedderGraph::Node*, v8::EmbedderGraph::Node*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::CreateObject() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::V8Node(v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddNode(std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::pair<char const*, v8::EmbedderGraph::Node*>, std::pair<char const*, v8::EmbedderGraph::Node*>, std::_Identity<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > >::_M_erase(std::_Rb_tree_node<std::pair<char const*, v8::EmbedderGraph::Node*> >*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::TimerCB(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RecordDelta(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetCount(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetCount(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceedsBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceedsBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMinBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMinBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMaxBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMaxBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetCountBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetCountBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentilesBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentilesBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentileBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentileBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::Histogram(node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Add(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::IntervalHistogram(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, int, std::function<void (node::Histogram&)>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStart(node::IntervalHistogram::StartFlags)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStop()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Create(node::Environment*, int, std::function<void (node::Histogram&)>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::~IntervalHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::~IntervalHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HistogramBase, false>::BaseObjectPtrImpl(node::HistogramBase*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BaseObject, false>::BaseObjectPtrImpl(node::BaseObject*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::IntervalHistogram, false>::BaseObjectPtrImpl(node::IntervalHistogram*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::GetNewTarget()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::Args(napi_value__**, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::SetReturnValue(napi_value__*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::CallbackBundle::Delete(napi_env__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::FinalizeCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::FunctionCallbackWrapper::Invoke(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SecondPassCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::New(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Data()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefCount()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::New(napi_env__*, v8::Local<v8::Value>, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Get()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SetWeak()",
    "type": "CPP"
  },
  {
    "name": "napi_get_last_error_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_get_all_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_set_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_property",
    "type": "CPP"
  },
  {
    "name": "napi_delete_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_own_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_element",
    "type": "CPP"
  },
  {
    "name": "napi_has_element",
    "type": "CPP"
  },
  {
    "name": "napi_get_element",
    "type": "CPP"
  },
  {
    "name": "napi_delete_element",
    "type": "CPP"
  },
  {
    "name": "napi_define_properties",
    "type": "CPP"
  },
  {
    "name": "napi_object_freeze",
    "type": "CPP"
  },
  {
    "name": "napi_object_seal",
    "type": "CPP"
  },
  {
    "name": "napi_is_array",
    "type": "CPP"
  },
  {
    "name": "napi_get_array_length",
    "type": "CPP"
  },
  {
    "name": "napi_strict_equals",
    "type": "CPP"
  },
  {
    "name": "napi_get_prototype",
    "type": "CPP"
  },
  {
    "name": "napi_create_object",
    "type": "CPP"
  },
  {
    "name": "napi_create_array",
    "type": "CPP"
  },
  {
    "name": "napi_create_array_with_length",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_create_double",
    "type": "CPP"
  },
  {
    "name": "napi_create_int32",
    "type": "CPP"
  },
  {
    "name": "napi_create_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_create_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_boolean",
    "type": "CPP"
  },
  {
    "name": "napi_create_symbol",
    "type": "CPP"
  },
  {
    "name": "node_api_symbol_for",
    "type": "CPP"
  },
  {
    "name": "napi_create_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_range_error",
    "type": "CPP"
  },
  {
    "name": "node_api_create_syntax_error",
    "type": "CPP"
  },
  {
    "name": "napi_typeof",
    "type": "CPP"
  },
  {
    "name": "napi_get_undefined",
    "type": "CPP"
  },
  {
    "name": "napi_get_null",
    "type": "CPP"
  },
  {
    "name": "napi_get_cb_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_new_target",
    "type": "CPP"
  },
  {
    "name": "napi_call_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_global",
    "type": "CPP"
  },
  {
    "name": "napi_throw",
    "type": "CPP"
  },
  {
    "name": "napi_throw_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_range_error",
    "type": "CPP"
  },
  {
    "name": "node_api_throw_syntax_error",
    "type": "CPP"
  },
  {
    "name": "napi_is_error",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_double",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bool",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_bool",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_number",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_object",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_string",
    "type": "CPP"
  },
  {
    "name": "napi_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_unwrap",
    "type": "CPP"
  },
  {
    "name": "napi_remove_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_create_external",
    "type": "CPP"
  },
  {
    "name": "napi_type_tag_object",
    "type": "CPP"
  },
  {
    "name": "napi_check_object_type_tag",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_external",
    "type": "CPP"
  },
  {
    "name": "napi_create_reference",
    "type": "CPP"
  },
  {
    "name": "napi_delete_reference",
    "type": "CPP"
  },
  {
    "name": "napi_reference_ref",
    "type": "CPP"
  },
  {
    "name": "napi_reference_unref",
    "type": "CPP"
  },
  {
    "name": "napi_get_reference_value",
    "type": "CPP"
  },
  {
    "name": "napi_open_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_open_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_escape_handle",
    "type": "CPP"
  },
  {
    "name": "napi_new_instance",
    "type": "CPP"
  },
  {
    "name": "napi_instanceof",
    "type": "CPP"
  },
  {
    "name": "napi_is_exception_pending",
    "type": "CPP"
  },
  {
    "name": "napi_get_and_clear_last_exception",
    "type": "CPP"
  },
  {
    "name": "napi_is_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_arraybuffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_is_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_create_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_get_typedarray_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_is_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_get_dataview_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_promise",
    "type": "CPP"
  },
  {
    "name": "napi_resolve_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_reject_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_is_promise",
    "type": "CPP"
  },
  {
    "name": "napi_create_date",
    "type": "CPP"
  },
  {
    "name": "napi_is_date",
    "type": "CPP"
  },
  {
    "name": "napi_get_date_value",
    "type": "CPP"
  },
  {
    "name": "napi_run_script",
    "type": "CPP"
  },
  {
    "name": "napi_add_finalizer",
    "type": "CPP"
  },
  {
    "name": "napi_adjust_external_memory",
    "type": "CPP"
  },
  {
    "name": "napi_set_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_get_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_detach_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_is_detached_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_define_class",
    "type": "CPP"
  },
  {
    "name": "napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Finalizer::~Finalizer()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> >::_M_realloc_insert<napi_property_descriptor const&>(__gnu_cxx::__normal_iterator<napi_property_descriptor*, std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> > >, napi_property_descriptor const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::EmitEOF(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_js_stream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::WriteWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::ShutdownWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Reindent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::EscapeJsonChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::EmitReceived(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnAfterBind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnSendDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_js_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::OnAfterBind()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::createImportAssertionContainer(node::Environment*, v8::Isolate*, v8::Local<v8::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStatus(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.310]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.298]",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetSyntheticExport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetImportModuleDynamicallyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetNamespace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStaticDependencySpecifiers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::context() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Instantiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromID(node::Environment*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "_register_module_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromModule(node::Environment*, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::HostInitializeImportMetaObjectCallback(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ImportModuleDynamically(v8::Local<v8::Context>, v8::Local<v8::Data>, v8::Local<v8::Value>, v8::Local<v8::String>, v8::Local<v8::FixedArray>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ResolveModuleCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::FixedArray>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::equal_range(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::erase(std::__detail::_Node_const_iterator<std::pair<int const, node::loader::ModuleWrap*>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::loader::ModuleWrap*>, std::allocator<std::pair<unsigned int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::loader::ModuleWrap*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_reallocate_map(unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<4u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResetStdio()",
    "type": "CPP"
  },
  {
    "name": "node::SignalExit(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TrapWebAssemblyOrContinue(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.264]",
    "type": "CPP"
  },
  {
    "name": "node::AtomicsWaitCallback(v8::Isolate::AtomicsWaitEvent, v8::Local<v8::SharedArrayBuffer>, unsigned long, long, double, v8::Isolate::AtomicsWaitWakeHandle*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::ExecuteBootstrapper(node::Environment*, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapInternalLoaders()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunBootstrapping()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterSignalHandler(int, void (*)(int, siginfo_t*, void*), bool)",
    "type": "CPP"
  },
  {
    "name": "node::TearDownOncePerProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Stop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > std::__find_if<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__ops::_Iter_equals_val<char const [30]> >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__ops::_Iter_equals_val<char const [30]>, std::random_access_iterator_tag) [clone .constprop.266]",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeInspector(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessGlobalArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::ProcessFlags::Flags)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**, node::InitializationSettingsFlags, node::ProcessFlags::Flags)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::Start(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::V8Platform::~V8Platform()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::insert(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [39]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [39])",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [28]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [28])",
    "type": "CPP"
  },
  {
    "name": "std::vector<char*, std::allocator<char*> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::AsyncContext::WeakCallback(v8::WeakCallbackInfo<v8impl::(anonymous namespace)::AsyncContext> const&)",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::CallJs(napi_env__*, napi_value__*, void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::NewEnv(v8::Local<v8::Context>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::~Work()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::AsyncCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to (anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::Cleanup(void*)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::ThreadSafeFunction::~ThreadSafeFunction()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::Init()::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "(anonymous namespace)::uvimpl::Work::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "v8impl::(anonymous namespace)::BufferFinalizer::FinalizeBufferCallback(char*, void*)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::trigger_fatal_exception(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*))",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_cb(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::napi_module_to_node_module(napi_module const*)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register",
    "type": "CPP"
  },
  {
    "name": "napi_add_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_add_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_exception",
    "type": "CPP"
  },
  {
    "name": "napi_open_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_async_init",
    "type": "CPP"
  },
  {
    "name": "napi_async_destroy",
    "type": "CPP"
  },
  {
    "name": "napi_make_callback",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer_copy",
    "type": "CPP"
  },
  {
    "name": "napi_is_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_buffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_node_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_delete_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_get_uv_event_loop",
    "type": "CPP"
  },
  {
    "name": "napi_queue_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_cancel_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_create_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_threadsafe_function_context",
    "type": "CPP"
  },
  {
    "name": "napi_acquire_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_release_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_unref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_ref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "node_api_get_module_file_name",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_error",
    "type": "CPP"
  },
  {
    "name": "napi_call_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "napi_async_cleanup_hook_handle__::Hook(void*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::_FUN(uv_work_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::_FUN(uv_work_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::operator()(uv_work_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::operator()(uv_work_s*, int) const",
    "type": "CPP"
  },
  {
    "name": "void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<void*, std::allocator<void*> >::_M_push_back_aux<void* const&>(void* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node_module_register",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Close()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSymbolAddress(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSavedModuleFromGlobalHandleMap()",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterBuiltinModules()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::SaveInGlobalHandleMap(node::node_module*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Open()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}::operator()(node::binding::DLib*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<bool (node::binding::DLib*), node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::binding::DLib*)#1}>::_M_invoke(std::_Any_data const&, node::binding::DLib*&&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_binding(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::global_handle_map_t::~global_handle_map_t()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::node_module*>, bool> std::_Rb_tree<node::node_module*, node::node_module*, std::_Identity<node::node_module*>, std::less<node::node_module*>, std::allocator<node::node_module*> >::_M_insert_unique<node::node_module* const&>(node::node_module* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::binding::global_handle_map_t::Entry>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.315]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.329]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::BlobBindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_blob()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::StoredDataObject(node::BaseObjectPtrImpl<node::Blob, false> const&, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Create(node::Environment*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Slice(node::Environment*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToSlice(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, false, true>, bool> std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<node::FastStringKey const&, node::BaseObjectPtrImpl<node::BlobBindingData, false>&>(std::integral_constant<bool, true>, node::FastStringKey const&, node::BaseObjectPtrImpl<node::BlobBindingData, false>&) [clone .constprop.319]",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_blob(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::store_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::BlobBindingData::StoredDataObject const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::StoreDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::get_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::revoke_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::RevokeDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::is_snapshotable() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::Blob, false>::BaseObjectPtrImpl(node::Blob*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::operator=(std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::_M_realloc_insert<node::BlobEntry>(__gnu_cxx::__normal_iterator<node::BlobEntry*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > >, node::BlobEntry&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::BackingStore, std::default_delete<v8::BackingStore> >(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BlobBindingData, false>::BaseObjectPtrImpl(node::BlobBindingData*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::BlobBindingData::StoredDataObject>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::BlobBindingData::StoredDataObject> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::GetZeroFillToggle(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::ParseArrayIndex(node::Environment*, v8::Local<v8::Value>, unsigned long, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.134] [clone .constprop.156]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CallbackInfo::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::Buffer::(anonymous namespace)::CallbackInfo::OnBackingStoreFree()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CallbackInfo::CreateTrackedArrayBuffer(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)::{lambda(void*, unsigned long, void*)#1}::_FUN(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::SetBufferPrototype(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::ByteLengthUtf8(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_buffer()",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeInto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::DetachArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CopyArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::GetZeroFillToggle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::EncodeUtf8String(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CreateFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(node::Environment*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(v8::Isolate*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Swap16(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Compare(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringSlice<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Fill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::CompareOffset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::Copy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_buffer(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)5>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)7>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)2>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::Buffer::(anonymous namespace)::StringWrite<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::SearchString<unsigned short>(unsigned short const*, unsigned long, unsigned short const*, unsigned long, unsigned long, bool) [clone .part.118]",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::SearchString<unsigned char>(unsigned char const*, unsigned long, unsigned char const*, unsigned long, unsigned long, bool) [clone .part.119]",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::(anonymous namespace)::IndexOfBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethodNoSideEffect(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "long& std::vector<long, std::allocator<long> >::emplace_back<long>(long&&)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned short>(node::stringsearch::Vector<unsigned short const>, node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned char>(node::stringsearch::Vector<unsigned char const>, node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_config()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineErrnoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineSignalConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DefineCryptoConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::DefineConstants(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MeasureMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::WatchdogHasPendingSigint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::StopSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::StartSigintWatchdog(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.307]",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_erase(std::integral_constant<bool, true>, node::CleanupHookCallback const&) [clone .isra.214] [clone .constprop.306]",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IsContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDeleterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDeleterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyEnumeratorCallback(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDescriptorCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDescriptorCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyGetterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertySetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertySetterCallback(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDefinerCallback(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDefinerCallback(unsigned int, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::WeakCallback(v8::WeakCallbackInfo<node::contextify::CompiledFnEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::WeakCallback(v8::WeakCallbackInfo<node::contextify::ContextifyContext> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateDataWrapper(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextFromContextifiedSandbox(node::Environment*, v8::Local<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::InstanceOf(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::microtask_queue() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_contextify()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateV8Context(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::MakeContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_contextify(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::EvalMachine(node::Environment*, long, bool, bool, bool, std::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInThisContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::contextify::MicrotaskQueueWrap, false>::BaseObjectPtrImpl(node::contextify::MicrotaskQueueWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Object>*, std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::String>*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >(std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::ContextifyScript*>, std::allocator<std::pair<unsigned int const, node::contextify::ContextifyScript*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::ContextifyScript*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, std::allocator<std::pair<unsigned int const, node::contextify::CompiledFnEntry*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::gid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::uid_by_name(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::InitGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetGid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetEUid(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::HasOnly(int)",
    "type": "CPP"
  },
  {
    "name": "_register_credentials()",
    "type": "CPP"
  },
  {
    "name": "node::credentials::GetGroups(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_credentials(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<unsigned int>(v8::Local<v8::Context>, std::vector<unsigned int, std::allocator<unsigned int> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned int, std::allocator<unsigned int> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterClose(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirentListToArray(node::Environment*, uv_dirent_s*, int, node::encoding, v8::Local<v8::Value>*) [clone .isra.64] [clone .constprop.159]",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(node::Environment*, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterOpenDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "_register_fs_dir()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::OpenDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterDirRead(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs_dir(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::GCClose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::BindingData, false>::BaseObjectPtrImpl(node::fs::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FSReqBase, false>::BaseObjectPtrImpl(node::fs::FSReqBase*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<uv_dirent_s, std::allocator<uv_dirent_s> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::AssignFromObject(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.201]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.199]",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get[abi:cxx11](char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvQuery(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Integer> const&)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvEnumerator(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvDeleter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::CreateMapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvVarProxy(v8::Local<v8::Context>, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::EnvDefiner(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_env_var(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterEnvVarExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get[abi:cxx11](char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::KVStore>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::NoSideEffectsToString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.98]",
    "type": "CPP"
  },
  {
    "name": "node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.97]",
    "type": "CPP"
  },
  {
    "name": "node::IsExceptionDecorated(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Abort()",
    "type": "CPP"
  },
  {
    "name": "node::Assert(node::AssertionInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetPrepareStackTraceCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetEnhanceStackForFatalException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetSourceMapsEnabled(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::errno_string(int)",
    "type": "CPP"
  },
  {
    "name": "_register_errors()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_errors(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::errors::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::GetErrorSource(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Message>, bool*) [clone .constprop.95]",
    "type": "CPP"
  },
  {
    "name": "node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>)",
    "type": "CPP"
  },
  {
    "name": "node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode)",
    "type": "CPP"
  },
  {
    "name": "node::PrintException(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintCaughtException(v8::Isolate*, v8::Local<v8::Context>, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::ReportFatalException(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::EnhanceFatalException)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "node::errors::DecorateErrorStack(node::Environment*, node::errors::TryCatchScope const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::PerIsolateMessageListener(v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::ToString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<3u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<4u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<3u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::ExternalReferenceRegistry::ExternalReferenceRegistry()",
    "type": "CPP"
  },
  {
    "name": "node::ExternalReferenceRegistry::external_references()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Object> node::PersistentToLocal::Default<v8::Object>(v8::Isolate*, v8::PersistentBase<v8::Object> const&) [clone .isra.157]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.416]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*) [clone .constprop.418]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AddTraceEventImpl(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, unsigned int) [clone .constprop.417]",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.420]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.402]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReleaseFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.419]",
    "type": "CPP"
  },
  {
    "name": "node::fs::InternalModuleStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.413]",
    "type": "CPP"
  },
  {
    "name": "node::fs::Basename(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Resolve()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::file_handle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::AfterClose()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FromNamespacedPath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::binding_data()",
    "type": "CPP"
  },
  {
    "name": "_register_fs()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(node::fs::BindingData*, int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::NewFSReqCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool) [clone .constprop.409]",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool) [clone .constprop.410]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, false, true>, bool> std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<node::FastStringKey const&, node::BaseObjectPtrImpl<node::fs::BindingData, false>&>(std::integral_constant<bool, true>, node::FastStringKey const&, node::BaseObjectPtrImpl<node::fs::BindingData, false>&) [clone .constprop.381]",
    "type": "CPP"
  },
  {
    "name": "node::fs::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Clear()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Reject(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Proceed()",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterInteger(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPath(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPtr(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterOpenFileHandle(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::OpenFileHandle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterMkdirp(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStat(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterNoArgs(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LUTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Chown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FChmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FTruncate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::CopyFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::UTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LChown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Symlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Rename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Access(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Chmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Fsync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Fdatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Mkdtemp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::RealPath(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Unlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::RMDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::LStat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Stat(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::WriteBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadBuffers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::{lambda(uv_fs_s*)#1}::operator()(uv_fs_s*) const::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::InternalModuleReadJSON(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpSync(uv_loop_s*, uv_fs_s*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::CallMKDirpSync(node::Environment*, v8::FunctionCallbackInfo<v8::Value> const&, node::fs::FSReqWrapSync*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.405]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart() [clone .part.158]",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDirWithTypes(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::ReadDir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IsSafeJsInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqWrapSync::~FSReqWrapSync()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<char, 64ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<unsigned long, v8::BigUint64Array>(node::AliasedBufferBase<unsigned long, v8::BigUint64Array, std::enable_if<std::is_scalar<unsigned long>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<double, v8::Float64Array>(node::AliasedBufferBase<double, v8::Float64Array, std::enable_if<std::is_scalar<double>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData* node::Environment::GetBindingData<node::fs::BindingData>(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Integer> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Integer>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>::BaseObjectPtrImpl(node::fs::FileHandleReadWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>*, std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > > >, node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::(anonymous namespace)::Parser*, node::(anonymous namespace)::Parser*, std::_Identity<node::(anonymous namespace)::Parser*>, node::(anonymous namespace)::ParserComparator, std::allocator<node::(anonymous namespace)::Parser*> >::_M_erase(std::_Rb_tree_node<node::(anonymous namespace)::Parser*>*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::(anonymous namespace)::Parser*>, bool> std::_Rb_tree<node::(anonymous namespace)::Parser*, node::(anonymous namespace)::Parser*, std::_Identity<node::(anonymous namespace)::Parser*>, node::(anonymous namespace)::ParserComparator, std::allocator<node::(anonymous namespace)::Parser*> >::_M_insert_unique<node::(anonymous namespace)::Parser* const&>(node::(anonymous namespace)::Parser* const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_chunk_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_chunk_header>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_body>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_url>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_status>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::CreateHeaders()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_header_value>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::(anonymous namespace)::Parser*, node::(anonymous namespace)::Parser*, std::_Identity<node::(anonymous namespace)::Parser*>, node::(anonymous namespace)::ParserComparator, std::allocator<node::(anonymous namespace)::Parser*> >::erase(node::(anonymous namespace)::Parser* const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_message_begin>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Unconsume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::HeadersCompleted(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Free(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::Parser::Pause<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::GetCurrentBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::Parser::Pause<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Duration(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::All(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::Active(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::Idle(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::Expired(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(char const*, unsigned long), &node::(anonymous namespace)::Parser::on_header_field>::Raw(llhttp__internal_s*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Initialize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_headers_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Proxy<int (node::(anonymous namespace)::Parser::*)(), &node::(anonymous namespace)::Parser::on_message_complete>::Raw(llhttp__internal_s*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::~Parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Finish(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::Execute(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::~ConnectionsList()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ConnectionsList::~ConnectionsList()",
    "type": "CPP"
  },
  {
    "name": "_register_http_parser()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::Parser::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeHttpParser(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameSent(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidHeader(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "__tcf_0",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.789]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.788]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.787]",
    "type": "CPP"
  },
  {
    "name": "node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics() [clone .part.511]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.786]",
    "type": "CPP"
  },
  {
    "name": "node::http2::HttpErrorString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::SetCallbackFunctions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.776]",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.777]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.778]",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount() [clone .constprop.779]",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::Destroy()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Init(node::http2::Http2State*, nghttp2_settings_entry*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Update(node::http2::Http2Session*, unsigned int (*)(nghttp2_session*, nghttp2_settings_id))",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::RefreshDefaults(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Done(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::TypeName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::StopTrackingRcbuf(nghttp2_rcbuf*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2StreamPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Stream::EmitStatistics()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2SessionPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::EmitStatistics()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CanAddStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::GetFrameID(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::TranslateNghttp2ErrorCode(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HasWritesOnSocketForStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::operator*() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::stream() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopPing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopSettings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleSettingsFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Done(bool, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::Close(unsigned int, bool)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePingFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "_register_http2()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::DetachFromSession()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::FindStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RemoveStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PushOutgoingBuffer(node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CopyDataIntoOutgoing(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::Environment*, unsigned long, nghttp2_settings_entry const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::PackSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::OnTrailers()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*) [clone .part.141]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite() [clone .part.516]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Send()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream() [clone .part.517]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(int, unsigned char*, unsigned long, unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(node::http2::Origins const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Send(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddSettings(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Settings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Ping(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy() [clone .part.725]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::New(node::http2::Http2Session*, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Close(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*) [clone .part.150]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading() [clone .part.186]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecrefHeaders(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SendPendingData()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Close(unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::http2::Http2Session::MaybeScheduleWrite()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitRstStream(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnHeaderCallback(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int) [clone .constprop.757]",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::StartHeaders(nghttp2_headers_category)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Info(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Trailers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ConsumeHTTP2Data()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::IsCacheable() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Lock() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Unlock() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::flags() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::value[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamReq::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, false>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, true>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2State, false>::BaseObjectPtrImpl(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Stream, false>::BaseObjectPtrImpl(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaders<node::http2::Http2HeadersTraits>::NgHeaders(node::Environment*, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<int, std::allocator<int> >::_M_realloc_insert<int&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> >::_M_realloc_insert<node::http2::NgHttp2StreamWrite>(__gnu_cxx::__normal_iterator<node::http2::NgHttp2StreamWrite*, std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> > >, node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> >(node::BaseObjectPtrImpl<node::http2::Http2Ping, false>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> >(node::BaseObjectPtrImpl<node::http2::Http2Settings, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false, false>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaderBase<node::http2::Http2Session>::ToString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::AliasedStruct<node::http2::SessionJSFields>::AliasedStruct<>(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::allocator<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::_M_realloc_insert<node::NgHeader<node::http2::Http2HeaderTraits> >(__gnu_cxx::__normal_iterator<node::NgHeader<node::http2::Http2HeaderTraits>*, std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > > >, node::NgHeader<node::http2::Http2HeaderTraits>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Ping, false>::BaseObjectPtrImpl(node::http2::Http2Ping*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Settings, false>::BaseObjectPtrImpl(node::http2::Http2Settings*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::CleanupHookCallback, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_remote_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_local_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char const*, std::pair<char const* const, v8::Eternal<v8::String> >, std::allocator<std::pair<char const* const, v8::Eternal<v8::String> > >, std::__detail::_Select1st, std::equal_to<char const*>, std::hash<char const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char const* const, v8::Eternal<v8::String> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::String> node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::New<node::http2::Http2Session>(node::http2::Http2Session*, node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetValue(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetName(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Object> node::Buffer::New<char>(node::Environment*, node::MaybeStackBuffer<char, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Object> node::i18n::(anonymous namespace)::ToBufferEndian<char16_t>(node::Environment*, node::MaybeStackBuffer<char16_t, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Decode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Has(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::ICUErrorName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeToUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeUtf8FromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::Transcode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::GetStringWidth(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeFromUcs2(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::Transcode(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::(anonymous namespace)::TranscodeUcs2FromUtf8(node::Environment*, char const*, char const*, char const*, unsigned long, UErrorCode*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::set_subst_chars(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::reset()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::min_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::max_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::InitializeICUDirectory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::SetDefaultTimeZone(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long, node::i18n::idna_mode)",
    "type": "CPP"
  },
  {
    "name": "_register_icu()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_icu(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Create(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(node::SnapshotData const*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run(int*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::CreateMainEnvironment(int*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::GetSharedArrayBufferFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::~DeserializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::GetWasmModuleFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Object> node::PersistentToLocal::Default<v8::Object>(v8::Isolate*, v8::PersistentBase<v8::Object> const&) [clone .isra.165]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.564]",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.563]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.562]",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::DeserializerDelegate::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::GetDOMException(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::ThrowDataCloneException(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SetDeserializerCreateObjectFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::~SerializerDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::IsCloseMessage() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TriggerAsync()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::worker::GetMessagePortConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::CheckType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::InitMessaging(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Data(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferOrClone(node::BaseObject::TransferMode) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::SiblingGroup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Entangle(std::initializer_list<node::worker::MessagePortData*>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Entangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "_register_messaging()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Entangle(node::worker::MessagePortData*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Deserialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddSharedArrayBuffer(std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddTransferable(std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddWASMModule(v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::ReadIterable(node::Environment*, v8::Local<v8::Context>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::SerializerDelegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Serialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, node::worker::MessagePort::MessageProcessingMode, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnMessage(node::worker::MessagePort::MessageProcessingMode)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Drain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::AddToIncomingQueue(std::shared_ptr<node::worker::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Dispatch(node::worker::MessagePortData*, std::shared_ptr<node::worker::Message>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Dispatch(std::shared_ptr<node::worker::Message>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Disentangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Disentangle()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::MessagePortData, std::default_delete<node::worker::MessagePortData> >, std::shared_ptr<node::worker::SiblingGroup>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::MessageChannel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_messaging(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::BroadcastChannel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::CheckSiblingGroup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::~SiblingGroup()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::weak_ptr<node::worker::SiblingGroup>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > > >::~unordered_map()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::BaseObject(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::MessagePort, false>::BaseObjectPtrImpl(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::SharedArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::SharedArrayBuffer>*, std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > > >, v8::Local<v8::SharedArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > >::_M_realloc_insert<std::shared_ptr<v8::BackingStore> >(__gnu_cxx::__normal_iterator<std::shared_ptr<v8::BackingStore>*, std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > > >, std::shared_ptr<v8::BackingStore>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > >::_M_realloc_insert<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >*, std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > > >, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> >::_M_realloc_insert<v8::CompiledWasmModule>(__gnu_cxx::__normal_iterator<v8::CompiledWasmModule*, std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> > >, v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Global<v8::SharedArrayBuffer> >(__gnu_cxx::__normal_iterator<v8::Global<v8::SharedArrayBuffer>*, std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > > >, v8::Global<v8::SharedArrayBuffer>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::BaseObject, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*, std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > >, node::BaseObjectPtrImpl<node::BaseObject, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::operator=(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::ArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::ArrayBuffer>*, std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > > >, v8::Local<v8::ArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::worker::MessagePortData*, node::worker::MessagePortData*, std::_Identity<node::worker::MessagePortData*>, std::less<node::worker::MessagePortData*>, std::allocator<node::worker::MessagePortData*> >::_M_erase(std::_Rb_tree_node<node::worker::MessagePortData*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::worker::MessagePortData*, node::worker::MessagePortData*, std::_Identity<node::worker::MessagePortData*>, std::less<node::worker::MessagePortData*>, std::allocator<node::worker::MessagePortData*> >::erase(node::worker::MessagePortData* const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::vector(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::GetOpenSSLVersion[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::InitializeIntlVersions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::~Metadata()",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.209]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.207]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetInstance()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::code_cache[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadBuiltinModuleSource(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetModuleIds[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories() [clone .part.185]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCannotBeRequired[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CannotBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCanBeRequired[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CanBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCodeCache(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CompileAsModule(v8::Local<v8::Context>, char const*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const*&, node::UnionBytes const&>(char const*&, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, false, true>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::HasCachedBuiltins(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ConfigStringGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.210]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.208]",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RefreshCodeCache(std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> > const&)",
    "type": "CPP"
  },
  {
    "name": "_register_native_module()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ModuleIdsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RecordResult(char const*, node::native_module::NativeModuleLoader::Result, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CopyCodeCache(std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> >*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_native_module(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileAllModules(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> >::_M_realloc_insert<node::native_module::CodeCacheInfo>(__gnu_cxx::__normal_iterator<node::native_module::CodeCacheInfo*, std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> > >, node::native_module::CodeCacheInfo&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::equal_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::erase(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node>(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node&)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::program_name[abi:cxx11]() const [clone .isra.52] [clone .part.53]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::first[abi:cxx11]() [clone .part.85]",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, true> > >::_M_allocate_buckets(unsigned long) [clone .isra.663]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetEmbedderOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [clone .constprop.778]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.780]",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (char const*), node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const [clone .constprop.759]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_options()",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (char const*)>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetCLIOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::SplitHostPort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_range_insert<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::forward_iterator_tag) [clone .constprop.762]",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_assign_aux<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::forward_iterator_tag) [clone .constprop.767]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const::{lambda()#1}::operator()() const [clone .isra.390]",
    "type": "CPP"
  },
  {
    "name": "node::ParseNodeOptionsEnvVar(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetBashCompletion[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_options(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_range<std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, false, true>, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, true> > > >(std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, false, true>, std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, false, true>, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, true> > > const&, std::integral_constant<bool, true>) [clone .constprop.771]",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::DebugOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo&&) [clone .constprop.757]",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerIsolateOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerProcessOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo&&) [clone .constprop.770]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool) [clone .constprop.769]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, node::options_parser::OptionsParser<node::EnvironmentOptions>::NoOp, node::OptionEnvvarSettings) [clone .isra.674] [clone .constprop.768]",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo&&) [clone .constprop.750]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, node::options_parser::OptionsParser<node::PerIsolateOptions>::V8Option, node::OptionEnvvarSettings) [clone .isra.683] [clone .constprop.747]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, node::options_parser::OptionsParser<node::PerIsolateOptions>::V8Option, node::OptionEnvvarSettings) [clone .isra.683] [clone .constprop.746]",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>(std::integral_constant<bool, true>, char const*&, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo&&) [clone .constprop.742]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, bool node::PerProcessOptions::*, node::OptionEnvvarSettings, bool) [clone .constprop.738]",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::PerIsolateOptionsParser(node::options_parser::EnvironmentOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::PerProcessOptionsParser(node::options_parser::PerIsolateOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::get_debug_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::get_per_isolate_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::get_per_env_options()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::compare(char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ToV8Value(v8::Local<v8::Context>, std::basic_string_view<char, std::char_traits<char> >, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long long __gnu_cxx::__stoa<unsigned long long, unsigned long long, char, int>(unsigned long long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(v8::Local<v8::Context>, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::PerProcessOptions>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::pop_first[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ParseAndValidatePort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddOption(char const*, char const*, bool node::DebugOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, unsigned long node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, bool node::PerIsolateOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, long node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::EnvironmentOptions>::Insert<node::DebugOptions>(node::options_parser::OptionsParser<node::DebugOptions> const&, node::DebugOptions* (node::EnvironmentOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerIsolateOptions>::Insert<node::EnvironmentOptions>(node::options_parser::OptionsParser<node::EnvironmentOptions> const&, node::EnvironmentOptions* (node::PerIsolateOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerProcessOptions>::Insert<node::PerIsolateOptions>(node::options_parser::OptionsParser<node::PerIsolateOptions> const&, node::PerIsolateOptions* (node::PerProcessOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetFreeMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetTotalMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetUptime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetUserInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetLoadAvg(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetHostname(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetHomeDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetPriority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetOSInformation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::SetPriority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_os()",
    "type": "CPP"
  },
  {
    "name": "node::os::GetInterfaceAddresses(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::GetCPUInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::os::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_os(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value>& std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String> >(v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value>& std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Number> >(v8::Local<v8::Number>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::performance::CreateELDHistogram(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Histogram&)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::performance::CreateELDHistogram(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Histogram&)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionStart(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetTimeOrigin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetTimeOriginTimeStamp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GarbageCollectionCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::RemoveGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::InstallGarbageCollectionTracking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::SetupPerformanceObservers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Notify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Histogram&), node::performance::CreateELDHistogram(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Histogram&)#1}>::_M_invoke(std::_Any_data const&, node::Histogram&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::CreateELDHistogram(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::PerformanceState(v8::Isolate*, node::performance::PerformanceState::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::operator<<(std::ostream&, node::performance::PerformanceState::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Mark(node::performance::PerformanceMilestone, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkMilestone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::performance::GCPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "_register_performance()",
    "type": "CPP"
  },
  {
    "name": "node::performance::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_performance(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEventWithTimestamp(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int, long)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NumberOfWorkerThreads()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetPageAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()::{lambda(node::DelayedTask*)#1}::_FUN(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::MonotonicallyIncreasingTime()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CurrentClockTimeMillis()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()::{lambda()#1}::_FUN()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::PlatformWorkerThread(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::PostJob(v8::TaskPriority, std::unique_ptr<v8::JobTask, std::default_delete<v8::JobTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::GetForegroundTaskRunner()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()::{lambda(node::DelayedTask*)#1}::operator()(node::DelayedTask*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double) [clone .part.304]",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::BlockingDrain()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::NumberOfWorkerThreads() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DecreaseHandleCount()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DeleteFromScheduledTasks(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallDelayedOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::AddIsolateFinishedCallback(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::AddShutdownCallback(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForNodeIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetForegroundTaskRunner(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false, false>, bool> std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_emplace<v8::Isolate*&, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >(std::integral_constant<bool, true>, v8::Isolate*&, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> >&&) [clone .constprop.310]",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, node::IsolatePlatformDelegate*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::WorkerThreadsTaskRunner(int)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NodePlatform(int, v8::TracingController*, v8::PageAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::DrainTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::FlushForegroundTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PerIsolatePlatformData(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::UnregisterIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::RemoveTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::ZoneBackingAllocator::GetMallocFn() const",
    "type": "CPP"
  },
  {
    "name": "v8::ZoneBackingAllocator::GetFreeFn() const",
    "type": "CPP"
  },
  {
    "name": "v8::HighAllocationThroughputObserver::EnterSection()",
    "type": "CPP"
  },
  {
    "name": "v8::HighAllocationThroughputObserver::LeaveSection()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetZoneBackingAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::DumpWithoutCrashing()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetHighAllocationThroughputObserver()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::Push(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::RunTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallLowPriorityTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallBlockingTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<uv_timer_s*, std::allocator<uv_timer_s*> >::_M_realloc_insert<uv_timer_s* const&>(__gnu_cxx::__normal_iterator<uv_timer_s**, std::vector<uv_timer_s*, std::allocator<uv_timer_s*> > >, uv_timer_s* const&)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> >::_M_realloc_insert<node::PerIsolatePlatformData::ShutdownCallback>(__gnu_cxx::__normal_iterator<node::PerIsolatePlatformData::ShutdownCallback*, std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> > >, node::PerIsolatePlatformData::ShutdownCallback&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > >::_M_realloc_insert<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >*, std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > > >, std::unique_ptr<unsigned long, std::default_delete<unsigned long> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::Isolate* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<uv_timer_s*, uv_timer_s*, std::allocator<uv_timer_s*>, std::__detail::_Identity, std::equal_to<uv_timer_s*>, std::hash<uv_timer_s*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<uv_timer_s*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::Run()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, std::allocator<std::unique_ptr<v8::Task, std::default_delete<v8::Task> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::TaskQueue()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> >, std::allocator<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::GenDebugSymbols()",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmit(node::Environment*, char const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitWarningGeneric(node::Environment*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitDeprecationWarning(node::Environment*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitExperimentalWarning(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~set()",
    "type": "CPP"
  },
  {
    "name": "node::CauseSegfault(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::Abort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SlowBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.192]",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SlowNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugEnd(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ReallyExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Uptime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Rss(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Cwd(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CPUUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Chdir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResourceUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Umask(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::AddMethods()",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FromV8Value(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::NumberImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::BigIntImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "_register_process_methods()",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveRequests(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandlesInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveRequestsInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Kill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugProcess(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::process::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_process_methods(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RawDebug(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, false, true>, bool> std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<node::FastStringKey const&, node::BaseObjectPtrImpl<node::process::BindingData, false>&>(std::integral_constant<bool, true>, node::FastStringKey const&, node::BaseObjectPtrImpl<node::process::BindingData, false>&) [clone .constprop.183]",
    "type": "CPP"
  },
  {
    "name": "node::process::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FastBigInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FastNumber(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::process::BindingData, false>::BaseObjectPtrImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::GetParentProcessId(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessTitleGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessTitleSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::CreateProcessObject(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::PatchProcessObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugPortSetter(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_process_object(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterProcessExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::ostream&, v8::Local<v8::Value>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::ostream&, v8::Local<v8::Value>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::advance() [clone .part.38]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_one_space() [clone .isra.39] [clone .part.40]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_new_line() [clone .isra.41] [clone .part.42]",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .isra.82]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.128]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.131]",
    "type": "CPP"
  },
  {
    "name": "report::PrintNetworkInterfaceInfo(node::JSONWriter*)",
    "type": "CPP"
  },
  {
    "name": "report::PrintJavaScriptErrorStack(node::JSONWriter*, v8::Isolate*, v8::Local<v8::Value>, char const*)",
    "type": "CPP"
  },
  {
    "name": "report::PrintVersionInformation(node::JSONWriter*)",
    "type": "CPP"
  },
  {
    "name": "report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::ostream&, v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "report::TriggerNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::Value>, std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::ostream&, v8::Local<v8::Value>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}::operator()(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<report::WriteNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::ostream&, v8::Local<v8::Value>, bool)::{lambda(node::worker::Worker*)#1}::operator()(node::worker::Worker*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_start()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_end()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_objectend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_arrayend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_objectstart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [9], unsigned long>(char const (&) [9], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_arraystart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [8], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const (&) [8], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const (&) [5], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], unsigned long>(char const (&) [5], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [11], unsigned long>(char const (&) [11], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnFatalError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnFatalError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetCompact(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.66]",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::ShouldReportOnUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetCompact(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetReportOnUncaughtException(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetFilename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_report()",
    "type": "CPP"
  },
  {
    "name": "report::WriteReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetFilename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::SetSignal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_report(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "report::ReportEndpoint(uv_handle_s*, sockaddr*, char const*, node::JSONWriter*) [clone .isra.44]",
    "type": "CPP"
  },
  {
    "name": "report::WalkHandle(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SetTreatArrayBufferViewsAsHostObjects(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::ReleaseBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::GetWireFormatVersion(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SerializerContext(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::DeserializerContext(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "_register_serdes()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_serdes(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::mksnapshot::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mksnapshot::CompileSnapshotMain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [clone .constprop.223]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.226]",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::CollectExternalReferences()",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::InitializeIsolateParams(node::SnapshotData const*, v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::SnapshotableObject(node::Environment*, v8::Local<v8::Object>, node::EmbedderObjectType)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::GetTypeNameChars() const",
    "type": "CPP"
  },
  {
    "name": "node::IsSnapshotableType(node::FastStringKey)",
    "type": "CPP"
  },
  {
    "name": "_register_mksnapshot()",
    "type": "CPP"
  },
  {
    "name": "node::GetCodeCacheDefName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::FormatBlob[abi:cxx11](node::SnapshotData*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_mksnapshot(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::Generate(node::SnapshotData*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::Generate(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::SerializeBindingData(node::Environment*, v8::SnapshotCreator*, node::EnvSerializeInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::DeserializeNodeInternalFields(v8::Local<v8::Object>, int, v8::StartupData, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SerializeNodeContextInternalFields(v8::Local<v8::Object>, int, void*)",
    "type": "CPP"
  },
  {
    "name": "std::unique_ptr<node::ExternalReferenceRegistry, std::default_delete<node::ExternalReferenceRegistry> >::~unique_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetFlowLabel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::LegacyDetail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Detail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::ToSockAddr(int, char const*, unsigned int, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(int, char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::Hash::operator()(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_match(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::compare(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_in_network(node::SocketAddress const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressBlockList(std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::RemoveSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressRange(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressMask(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SocketAddressRule(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SocketAddressRangeRule(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SocketAddressMaskRule(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SocketAddressBlockListWrap(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Check(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddRange(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddSubnet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SocketAddressBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "_register_block_list()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetRules(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Create(node::Environment*, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.288]",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<node::SocketAddress, std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > >, std::allocator<std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > > >, std::__detail::_Select1st, std::equal_to<node::SocketAddress>, node::SocketAddress::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](node::SocketAddress const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBlockListWrap, false>::BaseObjectPtrImpl(node::SocketAddressBlockListWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBase, false>::BaseObjectPtrImpl(node::SocketAddressBase*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::StatWatcher(node::fs::BindingData*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Callback(uv_fs_poll_s*, int, uv_stat_t const*, uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::symbols::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_symbols()",
    "type": "CPP"
  },
  {
    "name": "node::GetAssignedPromiseWrapAsyncId(node::Environment*, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::RunMicrotasks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::SetTickCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::SetPromiseRejectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::EnqueueMicrotask(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_task_queue()",
    "type": "CPP"
  },
  {
    "name": "node::PromiseRejectCallback(v8::PromiseRejectMessage)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_task_queue(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Disable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetTraceCategoryStateUpdateHandler(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnabledCategories(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_trace_events()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_trace_events(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Enable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_unique<char*>(char*&&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsNumberObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsStringObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBooleanObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBigIntObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsBoxedPrimitive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSymbolObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsAnyArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSharedArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsModuleNamespaceObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsProxy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsDataView(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsWeakSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsWeakMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSetIterator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsMapIterator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsGeneratorObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsGeneratorFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsAsyncFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsRegExp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsNativeError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsArgumentsObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsDate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeTypes(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_types()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterTypesExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_types(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "bool node::url::(anonymous namespace)::IsForbiddenHostCodePoint<char>(char)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ParseIPv6Host(char const*, unsigned long) [clone .constprop.126]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::SetURLConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.128]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.130]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8String(v8::Isolate*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "_register_url()",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::NormalizePort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::IsSpecial(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::SetArgs(node::Environment*, v8::Local<v8::Value>*, node::url::url_data const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToObject(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ShortenUrlPath(node::url::url_data*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ToASCII(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ToUnicode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::PercentDecode(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::EncodeAuthSet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::AppendOrEscape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned char, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ParseHost(char const*, unsigned long, bool, bool) [clone .constprop.125]",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::URLHost::ToStringMove()",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::DomainToUnicode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::DomainToASCII(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::ParseHost(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool, bool) [clone .constprop.124]",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::Parse(char const*, unsigned long, node::url::url_parse_state, node::url::url_data*, bool, node::url::url_data const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::url::(anonymous namespace)::Parse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::FromFilePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToFilePath[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::SerializeURL[abi:cxx11](node::url::url_data const&, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_url(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::url::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char*, unsigned long>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char*&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [1]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<char const (&) [1]>(char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::ArrayBufferViewHasBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::IsConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Sleep(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetExternalValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetConstructorName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetPromiseDetails(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetProxyDetails(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::PreviewEntries(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GuessHandleType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetOwnNonIndexProperties(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::GetHiddenValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::SetHiddenValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::ToUSVString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_util()",
    "type": "CPP"
  },
  {
    "name": "node::util::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_util(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::alpn_buffer_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::arrow_message_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_context_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_global_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::decorated_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_type_tag() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_wrapper() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::untransferable_object_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::Get(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::IncRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::DecRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::SetFlagsFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::CachedDataVersionTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapCodeStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapSpaceStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_v8()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_v8(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, false, true>, bool> std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<node::FastStringKey const&, node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>&>(std::integral_constant<bool, true>, node::FastStringKey const&, node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>&) [clone .constprop.160]",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>::BaseObjectPtrImpl(node::v8_utils::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.245]",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::_SetMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::WASI(node::Environment*, v8::Local<v8::Object>, uvwasi_options_s*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::backingStore(char**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "_register_wasi()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SchedYield(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdClose(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdDatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcRaise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockResGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRenumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdTell(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::RandomGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatDirName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathCreateDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRemoveDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathUnlinkFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PollOneoff(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdWrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathSymlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathReadlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockTimeGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetFlags(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAllocate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetRights(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdReaddir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPwrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockShutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAdvise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSeek(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockRecv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockSend(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Finish(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Abort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::SetImplementation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::SetURL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Initialize(node::Environment*) [clone .part.27]",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Initialize(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Create(node::Environment*, std::shared_ptr<v8::WasmStreaming>)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::StartStreamingCompilation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_wasm_web_api()",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Push(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_wasm_web_api(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::~WasmStreamingObject()",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::~WasmStreamingObject()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Run(void*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Timer(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HandleSignal(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::RunSigintWatchdog(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::~Watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::watchdog::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::InformWatchdogsAboutSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::~SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HasPendingSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Unregister(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "_register_watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Register(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::SigintWatchdog(v8::Isolate*, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()::{lambda(v8::Isolate*, void*)#1}::_FUN(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> >::_M_realloc_insert<node::SigintWatchdogBase* const&>(__gnu_cxx::__normal_iterator<node::SigintWatchdogBase**, std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> > >, node::SigintWatchdogBase* const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::GetEnvMessagePort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.296]",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.297]",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopStartTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (char const*), node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}::operator()(node::Environment*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::is_stopped() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::UpdateResourceConstraints(v8::ResourceConstraints*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::CreateEnvMessagePort(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::JoinThread()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::(anonymous namespace)::InitWorker(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_worker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_worker(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::operator()(void*) const::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Worker(node::Environment*, v8::Local<v8::Object>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::PerIsolateOptions>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&&, std::shared_ptr<node::KVStore>, node::SnapshotData const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Exit(int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StopThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Run()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::NearHeapLimit(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), node::worker::Worker::Run()::{lambda(node::Environment*, int)#2}>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::WorkerHeapSnapshotTaker, false>::BaseObjectPtrImpl(node::worker::WorkerHeapSnapshotTaker*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::worker::Worker*, node::worker::Worker*, std::allocator<node::worker::Worker*>, std::__detail::_Identity, std::equal_to<node::worker::Worker*>, std::hash<node::worker::Worker*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::worker::Worker*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AdjustAmountOfExternalAllocatedMemory()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AllocForBrotli(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::~ZlibContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::~BrotliEncoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::~BrotliEncoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::~BrotliDecoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::ErrorForMessage(char const*) const [clone .isra.10]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::GetErrorInfo() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::SetDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::InitZlib()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Close()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::~ZlibContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::FreeForZlib(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::~BrotliDecoderContext()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliEncoderContext::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AllocForBrotli(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AllocForZlib(void*, unsigned int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::EmitError(node::(anonymous namespace)::CompressionError const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::~BrotliCompressionStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::~ZlibStream()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::Params(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliCompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibStream::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Write<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DefineZlibConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_zlib()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::TrackField(char const*, node::MemoryRetainer const*, char const*) [clone .constprop.192]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::BrotliDecoderContext::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "void node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::Write<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::ZlibContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliEncoderContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ZlibContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::CompressionStream<node::(anonymous namespace)::BrotliDecoderContext>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_zlib(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Fchmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::PipeWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::PipeWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_pipe_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_pipe_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_connect_s, void (*)(uv_connect_s*, int)>::Wrapper(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::~ProcessWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::~ProcessWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::OnExit(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Kill(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ProcessWrap::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_process_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::~SignalWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::~SignalWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(uv_signal_s*, int)#1}::_FUN(uv_signal_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::MemoryInfoName() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::pair<int const, long> > std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<int const, long> >, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [clone .constprop.90]",
    "type": "CPP"
  },
  {
    "name": "node::HasSignalJSHandler(int)",
    "type": "CPP"
  },
  {
    "name": "_register_signal_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::DecreaseSignalHandlerCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SignalWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_signal_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, long> >*)",
    "type": "CPP"
  },
  {
    "name": "std::map<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >::~map()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::WriteCallback(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ShutdownCallback(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::CloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ExitCallback(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::AllocCallback(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill() [clone .part.36]",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ReadCallback(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCallback(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::SyncProcessStdioPipe(node::SyncProcessRunner*, bool, bool, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::~SyncProcessStdioPipe()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Initialize(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Close()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::GetOutputAsBuffer(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SyncProcessRunner(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::~SyncProcessRunner()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseStdioPipes()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseHandlesAndDeleteLoop()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseKillTimer()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IncrementBufferSizeAndCheckOverflow(long)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnExit(long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnKillTimerTimeout()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::GetError()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetPipeError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildOutputArray()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildResultObject()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOption(int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IsSet(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsString(v8::Local<v8::Value>, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsStringArray(v8::Local<v8::Value>, char**)",
    "type": "CPP"
  },
  {
    "name": "_register_spawn_sync()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::TryInitializeAndRunLoop(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Run(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> >, std::allocator<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetObject()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks) [clone .constprop.139]",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesWritten(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStartJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStopJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::UseUserBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::SetWriteResult(node::StreamWriteResult const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethod(node::Environment*, v8::Local<v8::Signature>, v8::PropertyAttribute, v8::Local<v8::FunctionTemplate>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterReqFinished(node::StreamReq*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::ShutdownWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::WriteWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Writev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldGet<2>(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldSet<2, &(v8::Value::IsFunction() const)>(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStartJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStopJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::UseUserBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Shutdown>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Writev>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::WriteBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::IsClosed(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::PendingWrites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStreamPipe(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::StreamPipe(node::StreamBase*, node::StreamBase*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_pipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(bool)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::StreamPipe::Unpipe(bool)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ProcessData(unsigned long, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::StreamPipe, false>::BaseObjectPtrImpl(node::StreamPipe*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::IsConstructCallCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvWrite(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvShutdown(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()::{lambda(uv_handle_s*, unsigned long, uv_buf_t*)#1}::_FUN(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::SetBlocking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::LibuvStreamWrap(node::Environment*, v8::Local<v8::Object>, uv_stream_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::From(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvAlloc(unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvRead(long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()::{lambda(uv_stream_s*, long, uv_buf_t const*)#2}::_FUN(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_stream_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_shutdown_s, void (*)(uv_shutdown_s*, int)>::Wrapper(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_write_s, void (*)(uv_write_s*, int)>::Wrapper(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::data() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::data() const",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalOneByteStringResource, char>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ExternString<v8::String::ExternalStringResource, unsigned short>::~ExternString()",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::WriteUCS2(v8::Isolate*, char*, unsigned long, v8::Local<v8::String>, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::StorageSize(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Size(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode[abi:cxx11](char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Write(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding, int*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, unsigned short const*, unsigned long, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*) [clone .part.36]",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<char>(char*, unsigned long, char const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<unsigned short>(char*, unsigned long, unsigned short const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::InitializeStringDecoder(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_string_decoder()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::MakeString(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::DecodeData(v8::Isolate*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::DecodeData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::FlushData(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FlushData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_string_decoder(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterStringDecoderExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, sockaddr_in*), node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in*)#1}>::_M_invoke(std::_Any_data const&, char const*&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, sockaddr_in6*), node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)::{lambda(char const*, sockaddr_in6*)#1}>::_M_invoke(std::_Any_data const&, char const*&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetNoDelay(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetKeepAlive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::TCPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::TCPWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Reset(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::AddressToJS(node::Environment*, sockaddr const*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_tcp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_tcp_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in*), int (*)(char const*, int, sockaddr_in*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in6*), int (*)(char const*, int, sockaddr_in6*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in6*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::SetupTimers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::GetLibuvNow(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ToggleTimerRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ToggleImmediateRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::ScheduleTimer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_timers()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_timers(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterTimerExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::OnTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerClosedCb(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node&) [clone .isra.197]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::DefaultHandle()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::StopTracing()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddMetadataEvent(std::unique_ptr<v8::platform::tracing::TraceObject, std::default_delete<v8::platform::tracing::TraceObject> >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::AddMetadataEvent(unsigned char const*, char const*, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::InitializeWritersOnThread()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::GetEnabledCategories[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::CreateTraceConfig() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disable(int, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Enable(int, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disconnect(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddClient(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> >, node::tracing::Agent::UseDefaultCategoryMode)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AsyncTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::CurrentTimestampMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_erase(std::_Rb_tree_node<node::tracing::AsyncTraceWriter*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::erase(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::tracing::AsyncTraceWriter*>, bool> std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_insert_unique<node::tracing::AsyncTraceWriter* const&>(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_hint_equal_pos(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_equal<std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::Flush()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NonBlockingFlushSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::MakeHandle(unsigned long, unsigned int, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::ExtractHandle(unsigned long, unsigned int*, unsigned long*, unsigned int*, unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::TryLoadAvailableBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::InternalTraceBuffer(unsigned long, unsigned int, node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NodeTraceBuffer(unsigned long, node::tracing::Agent*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> >, std::allocator<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.75]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::NodeTraceWriter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteSuffix()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AfterWrite()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)::{lambda(uv_fs_s*)#1}::_FUN(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int) [clone .part.70]",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::replace_substring(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::OpenNewFileForStreaming()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::FlushPrivate()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)::{lambda(uv_async_s*)#1}::_FUN(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::tracing::NodeTraceWriter::WriteRequest, std::allocator<node::tracing::NodeTraceWriter::WriteRequest> >::_M_push_back_aux<node::tracing::NodeTraceWriter::WriteRequest>(node::tracing::NodeTraceWriter::WriteRequest&&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetAgent(node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetAgent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::Create()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::CreateArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::TracedValue(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteComma()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetNull(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetBoolean(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendNull()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendBoolean(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendAsTraceFormat(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetInteger(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendInteger(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::(anonymous namespace)::EscapeString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::(anonymous namespace)::DoubleToCString(double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetDouble(char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::GetWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SetRawMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::IsTTY(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::TTYWrap(node::Environment*, v8::Local<v8::Object>, int, int*)",
    "type": "CPP"
  },
  {
    "name": "_register_tty_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_tty_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*) [clone .part.52]",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStart(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetBroadcast(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastLoopback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastInterface(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::BufferSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)::{lambda(uv_udp_send_s*, int)#1}::_FUN(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SendWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::listener() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::set_listener(node::UDPListener*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::FromObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::UDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::sockaddr_for_family(int, char const*, unsigned short, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoBind(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoConnect(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetSourceMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoSend(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::UDPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "_register_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(uv_udp_s*, long, uv_buf_t const*, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_udp_send_s, void (*)(uv_udp_send_s*, int)>::Wrapper(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::MakeUtf8String<char>(v8::Isolate*, v8::Local<v8::Value>, node::MaybeStackBuffer<char, 1024ul>*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.80]",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::Utf8Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::TwoByteValue::TwoByteValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BufferValue::BufferValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::LowMemoryNotification()",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentTimeInMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(char const*, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(v8::Isolate*, char const*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::LocalTime(tm*)",
    "type": "CPP"
  },
  {
    "name": "node::SplitString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)",
    "type": "CPP"
  },
  {
    "name": "node::ReadFileSync(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::MakeFilename[abi:cxx11](unsigned long, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetProcessTitle[abi:cxx11](char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetHumanReadableProcessName[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.78]",
    "type": "CPP"
  },
  {
    "name": "node::uv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::uv::GetErrMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::uv::ErrName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_uv()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_uv(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::uv::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.47]",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FindMapping(dl_phdr_info*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::LargePagesError(int)",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::IsTransparentHugePagesEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::(anonymous namespace)::FindNodeTextRegion()",
    "type": "CPP"
  },
  {
    "name": "node::MapStaticCodeToLargePages()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendResponse(int, std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendNotification(std::unique_ptr<v8_inspector::StringBuffer, std::default_delete<v8_inspector::StringBuffer> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::flushProtocolNotifications()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::fallThrough(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadWakeup(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ToProtocolString(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "_ZZN4node11Environment11CloseHandleI10uv_async_sZZNS_9inspector5Agent5StartERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12DebugOptionsESt10shared_ptrINS_15ExclusiveAccessINS_8HostPortENS_9MutexBaseINS_16LibuvMutexTraitsEEEEEEbENKUlPvE_clESO_EUlPS2_E_EEvPT_T0_ENUlP11uv_handle_sE_4_FUNESW_",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::fallThrough(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::flushProtocolNotifications()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::inspector::(anonymous namespace)::ChannelImpl, std::default_delete<node::inspector::(anonymous namespace)::ChannelImpl> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::(anonymous namespace)::ChannelImpl, std::default_delete<node::inspector::(anonymous namespace)::ChannelImpl> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolNotification(std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::sendProtocolNotification(std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::__detail::_Node_iterator<node::CleanupHookCallback, true, true>, bool> std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_emplace<node::CleanupHookCallback>(std::integral_constant<bool, true>, node::CleanupHookCallback&&) [clone .constprop.366]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::Dispatch(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread() [clone .part.308]",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::inspector::Agent::RequestIoThreadStart()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadAsyncCallback(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::inspector::(anonymous namespace)::ChannelImpl::~ChannelImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::~SameThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::SameThreadInspectorSession::~SameThreadInspectorSession()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Agent(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ConnectToMainThread(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)::{lambda(void*)#2}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ReportUncaughtException(v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::PauseOnNextJavascriptStatement(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ToggleAsyncHook(v8::Isolate*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::EnableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::DisableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RegisterAsyncHook(v8::Isolate*, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskScheduled(v8_inspector::StringView const&, void*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskCanceled(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskStarted(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskFinished(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AllAsyncTasksCanceled()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RequestIoThreadStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::(anonymous namespace)::StartIoThreadMain(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ContextCreated(v8::Local<v8::Context>, node::ContextInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::IsActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::SetParentHandle(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetParentHandle(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForConnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWsUrl[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWorkerManager()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::muteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::unmuteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::serializeToWebDriverValue(v8::Local<v8::Value>, int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::valueSubtype(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::descriptionForValueSubtype(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::isInspectableHeapObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleAPIMessage(int, v8::Isolate::MessageErrorLevel, v8_inspector::StringView const&, v8_inspector::StringView const&, unsigned int, unsigned int, v8_inspector::V8StackTrace*)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::memoryInfo(v8::Isolate*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTime(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeEnd(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeStamp(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleClear(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::canExecuteScripts(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::generateUniqueId()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::dispatchError(v8::Local<v8::Context>, v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::quitMessageLoopOnPause()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runIfWaitingForDebugger(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::ensureDefaultContextInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::currentTimeMS()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::resourceNameToUrl(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::installAdditionalCommandLineAPI(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::cancelTimer(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runMessageLoopOnPause(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::maxAsyncCallStackDepthChanged(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::inspector::WorkerManager, std::default_delete<node::inspector::WorkerManager> >(std::unique_ptr<node::inspector::WorkerManager, std::default_delete<node::inspector::WorkerManager> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::TimerWrapHandle>, std::allocator<std::pair<void* const, node::TimerWrapHandle> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::TimerWrapHandle>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::(anonymous namespace)::RequestQueueData*, void (*)(node::inspector::(anonymous namespace)::RequestQueueData*), std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::EndSession(int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*>(char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<>(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_PROTO_ACCESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProtoThrower(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_VALUE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&>(char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&>(_IO_FILE*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*>(_IO_FILE*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&>(char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Maybe<bool> node::ProcessEmitWarning<int&>(node::Environment*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long>(char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long>(_IO_FILE*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<bool&, unsigned long, unsigned long>(char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&, unsigned long, unsigned long>(_IO_FILE*, char const*, bool&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, unsigned long, unsigned long, unsigned long>(_IO_FILE*, char const*, unsigned long&&, unsigned long&&, unsigned long&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_CACHED_DATA_REJECTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_TIMEOUT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_SCRIPT_EXECUTION_INTERRUPTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_VM_MODULE_LINK_FAILURE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(v8::Isolate*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_VM_MODULE_LINK_FAILURE<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(v8::Isolate*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_NON_CONTEXT_AWARE_DISABLED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_DLOPEN_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_MODULE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_CONTEXT_NOT_AVAILABLE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_BUFFER_CONTEXT_NOT_AVAILABLE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MEMORY_ALLOCATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_TOO_LARGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_BUFFER_TOO_LARGE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_BUFFER_OUT_OF_BOUNDS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_BUFFER_OUT_OF_BOUNDS<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_THIS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_STRING_TOO_LONG<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_OBJECT_DEFINE_PROPERTY<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_OBJECT_DEFINE_PROPERTY<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::OnFatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalError(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<>(_IO_FILE*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*&>(char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*&>(_IO_FILE*, char const*, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [8]>(char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const (&) [8]>(char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [8]>(_IO_FILE*, char const*, char const (&) [8])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*>(char const*, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, int&, char const*>(char const*, char const*&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int const&, int const&>(char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int const&, int const&>(_IO_FILE*, char const*, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*, int const&, int const&>(char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*, int const&, int const&>(_IO_FILE*, char const*, char*&&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, int const&, int const&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, int const&, int const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&>(char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<node::Utf8Value&, node::Utf8Value&, node::Utf8Value&>(_IO_FILE*, char const*, node::Utf8Value&, node::Utf8Value&, node::Utf8Value&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(_IO_FILE*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(_IO_FILE*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int const&>(char const*, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<>(node::AsyncWrap*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*&>(node::AsyncWrap*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, int&, char const*>(char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, int&, char const*>(_IO_FILE*, char const*, int&, int&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<char const*>(node::AsyncWrap*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&>(char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&>(_IO_FILE*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&>(node::AsyncWrap*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&>(char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&>(_IO_FILE*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&>(node::AsyncWrap*, char const*, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, char const*>(char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&, char const*>(char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, char const*>(_IO_FILE*, char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, char const*>(node::AsyncWrap*, char const*, long&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&>(_IO_FILE*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&>(node::AsyncWrap*, char const*, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned char const&>(char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&>(_IO_FILE*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&>(node::AsyncWrap*, char const*, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned char const&, int&>(char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned char const&, int&>(_IO_FILE*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned char const&, int&>(node::AsyncWrap*, char const*, unsigned char const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, unsigned int&>(char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned int&>(_IO_FILE*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned int&>(node::AsyncWrap*, char const*, int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&>(char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&>(_IO_FILE*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&>(node::AsyncWrap*, char const*, long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<long&, unsigned long&>(char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<long&, unsigned long&>(_IO_FILE*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<long&, unsigned long&>(node::AsyncWrap*, char const*, long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<nghttp2_headers_category&>(char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<nghttp2_headers_category&>(_IO_FILE*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<nghttp2_headers_category&>(node::AsyncWrap*, char const*, nghttp2_headers_category&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long>(node::AsyncWrap*, char const*, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int&>(char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&>(_IO_FILE*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&>(node::AsyncWrap*, char const*, unsigned long&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int>(char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int>(_IO_FILE*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int>(node::AsyncWrap*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int>(char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int>(_IO_FILE*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int>(node::AsyncWrap*, char const*, unsigned long&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int const&, int&>(char const*, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int const&, int&>(char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int const&, int&>(char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int const&, int&>(_IO_FILE*, char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned int&, unsigned int const&, int&>(node::AsyncWrap*, char const*, unsigned int&, unsigned int const&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char&>(char const*, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, unsigned long&, unsigned char&>(char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, unsigned long&, unsigned char&>(node::AsyncWrap*, char const*, int&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_TRANSFER_OBJECT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_INVALID<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_INVALID_ARG_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CLOSED_MESSAGE_PORT<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*>(char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*>(char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*>(_IO_FILE*, char const*, char const*&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [12]>(char const*, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*, char const (&) [12]>(char const*, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*&, char const*, char const (&) [12]>(char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*&, char const*, char const (&) [12]>(char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*&, char const*, char const (&) [12]>(_IO_FILE*, char const*, char const*&, char const*&&, char const (&) [12])",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_MISSING_ARGS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CONSTRUCT_CALL_REQUIRED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const*, char const*>(char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const*, char const*>(char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const*, char const*>(_IO_FILE*, char const*, char const*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*, char const*>(char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<v8::Object*, char const*>(char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<v8::Object*, char const*>(_IO_FILE*, char const*, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*, char const*>(char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*, char const*>(char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*, char const*>(_IO_FILE*, char const*, int&&, v8::Object*&&, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*, int>(char const*, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*, int>(char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*, int>(char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*, int>(_IO_FILE*, char const*, int&&, v8::Object*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<v8::Object*>(char const*, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, v8::Object*>(char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, v8::Object*>(char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int, v8::Object*>(_IO_FILE*, char const*, int&&, v8::Object*&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_INVALID_ADDRESS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WASI_NOT_STARTED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_WASI_NOT_STARTED(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned int&>(char const*, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&>(char const*, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&>(char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&>(char const*, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&>(char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned char&>(char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned char&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned char&, unsigned int&>(char const*, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<long&, unsigned char&, unsigned int&>(char const*, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, long&, unsigned char&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, long&, unsigned char&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&, unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned short&, unsigned int&>(char const*, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned short&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&>(_IO_FILE*, char const*, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned int&, unsigned long&, unsigned long&, unsigned int&, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PLATFORM_FOR_WORKER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_WORKER_INIT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*&, char const*&>(char const*, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long&, int&, char const*&, char const*&>(char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long&, int&, char const*&, char const*&>(_IO_FILE*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long&, int&, char const*&, char const*&>(node::AsyncWrap*, char const*, unsigned long&, int&, char const*&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_STRING_TOO_LONG(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ERR_MEMORY_ALLOCATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ThrowErrStringTooLong(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*>(char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<void*>(char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<void*>(_IO_FILE*, char const*, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*, void*>(char const*, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<void*, void*, void*>(char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<void*, void*, void*>(char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<void*, void*, void*>(_IO_FILE*, char const*, void*&&, void*&&, void*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*&>(char const*, char*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*&, char*&>(char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*&, char*&>(char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*&, char*&>(_IO_FILE*, char const*, char*&, char*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long&, unsigned long>(char const*, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int, unsigned long&, unsigned long>(char const*, int&&, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int, unsigned long&, unsigned long>(char const*, int&&, unsigned long&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char*>(char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char*>(_IO_FILE*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<bool&>(char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<bool&>(_IO_FILE*, char const*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<char const (&) [3]>(char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<char const (&) [3]>(_IO_FILE*, char const*, char const (&) [3])",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_COUNTER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_OUT_OF_RANGE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_TAG_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_TAG_LENGTH(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_IV<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::CryptoErrorStore::Insert<>(node::crypto::NodeCryptoError)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYLEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OUT_OF_RANGE<int>(v8::Isolate*, char const*, int&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_DIGEST<char*>(v8::Isolate*, char const*, char*&&)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_STATE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_OPERATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_OPERATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_OSSL_EVP_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_OSSL_EVP_INVALID_DIGEST(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNSUPPORTED_OPERATION<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_UNSUPPORTED_OPERATION<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_CIPHER<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_CIPHER(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_IV(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_MESSAGELEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_AUTH_TAG<char const*&>(v8::Isolate*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_AUTH_TAG<unsigned int&>(v8::Isolate*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_AUTH_TAG<unsigned int&>(v8::Isolate*, char const*, unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_TLS_INVALID_PROTOCOL_METHOD<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_CURVE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_CURVE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_OPERATION_FAILED<>(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYPAIR<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_KEYTYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_INVALID_KEYTYPE(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_JWK<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_JWK<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_JWK_UNSUPPORTED_CURVE<char const*>(v8::Isolate*, char const*, char const*&&)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_DIGEST<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_UNKNOWN_DH_GROUP<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_UNKNOWN_DH_GROUP(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INITIALIZATION_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::THROW_ERR_CRYPTO_INVALID_KEYLEN<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_MISSING_PASSPHRASE<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_JWK<char const*&>(v8::Isolate*, char const*, char const*&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_CRYPTO_INVALID_SCRYPT_PARAMS<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value> node::ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED<>(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<int&, char const*&>(char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<int&, char const*&>(_IO_FILE*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<int&, char const*&>(node::AsyncWrap*, char const*, int&, char const*&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintFImpl<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::SPrintF<unsigned long, int&>(char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::FPrintF<unsigned long, int&>(_IO_FILE*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "void node::UnconditionalAsyncWrapDebug<unsigned long, int&>(node::AsyncWrap*, char const*, unsigned long&&, int&)",
    "type": "CPP"
  },
  {
    "name": "node::THROW_ERR_CRYPTO_OPERATION_FAILED(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MixedUnitLongNameHandler::getModifier(icu_71::number::impl::Signum, icu_71::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MixedUnitLongNameHandler::getModifier(icu_71::number::impl::Signum, icu_71::StandardPlural::Form) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::SimpleModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::ConstantAffixModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_71::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::semanticallyEquivalent(icu_71::number::impl::Modifier const&) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to icu_71::number::impl::MutablePatternModifier::getParameters(icu_71::number::impl::Modifier::Parameters&) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::MutablePatternModifier::toUnicodeString() const",
    "type": "CPP"
  },
  {
    "name": "icu_71::number::impl::ScientificModifier::containsField(icu_71::FormattedStringBuilder::Field) const",
    "type": "CPP"
  },
  {
    "name": "icu_71::WholeStringBreakIterator::getText() const",
    "type": "CPP"
  },
  {
    "name": "icu_71::WholeStringBreakIterator::adoptText(icu_71::CharacterIterator*)",
    "type": "CPP"
  },
  {
    "name": "uv_library_shutdown",
    "type": "CPP"
  },
  {
    "name": "main",
    "type": "CPP"
  },
  {
    "name": "_start",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::~AsyncResource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::AsyncResource(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::MakeCallback(v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_resource()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::get_trigger_async_id() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncResource::CallbackScope::CallbackScope(node::AsyncResource*)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(node::Environment*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::InternalCallbackScope(node::AsyncWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::CallbackScope(v8::Isolate*, v8::Local<v8::Object>, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::Close()",
    "type": "CPP"
  },
  {
    "name": "node::InternalCallbackScope::~InternalCallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackScope::~CallbackScope()",
    "type": "CPP"
  },
  {
    "name": "node::InternalMakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::MakeSyncCallback(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::SpinEventLoop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::~CommonEnvironmentSetup()",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::event_loop() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::array_buffer_allocator() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::isolate() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::isolate_data() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::env() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::context() const",
    "type": "CPP"
  },
  {
    "name": "node::CommonEnvironmentSetup::CommonEnvironmentSetup(node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::function<node::Environment* (node::CommonEnvironmentSetup const*)>)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::ArrayBufferAllocator*, std::default_delete<node::ArrayBufferAllocator>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::ToUpper(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::SPrintFImpl[abi:cxx11](char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >(std::unique_ptr<node::ArrayBufferAllocator, std::default_delete<node::ArrayBufferAllocator> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(char const*, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::ParseEncoding(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, char const*, unsigned long, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Encode(v8::Isolate*, unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeBytes(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::DecodeWrite(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::AllowWasmCodeGenerationCallback(v8::Local<v8::Context>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::PrepareStackTraceCallback(v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandle::~InspectorParentHandle()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::~DebuggingArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::ShouldAbortOnUncaughtException(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::ArrayBufferAllocator::Create(bool)",
    "type": "CPP"
  },
  {
    "name": "node::CreateArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::FreeArrayBufferAllocator(node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateCreateParamsForNode(v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateErrorHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateMiscHandlers(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*, node::IsolateSettings const&)",
    "type": "CPP"
  },
  {
    "name": "node::SetIsolateUpForNode(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(v8::Isolate::CreateParams*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(node::ArrayBufferAllocator*, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::NewIsolate(std::shared_ptr<node::ArrayBufferAllocator>, uv_loop_s*, node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateIsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeIsolateData(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::FreeEnvironment(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvironment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvironmentFlags::Flags, node::ThreadId, std::unique_ptr<node::InspectorParentHandle, std::default_delete<node::InspectorParentHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::GetInspectorParentHandle(node::Environment*, node::ThreadId, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::LoadEnvironment(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEnvironment(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnvironmentIsolateData(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetArrayBufferAllocator(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::GetMultiIsolatePlatform(node::IsolateData*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, node::tracing::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::CreatePlatform(int, v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::FreePlatform(node::MultiIsolatePlatform*)",
    "type": "CPP"
  },
  {
    "name": "node::MultiIsolatePlatform::Create(int, v8::TracingController*, v8::PageAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializePrimordials(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetPerContextExports(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextForSnapshot(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentEventLoop(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, node::node_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, napi_module const&)",
    "type": "CPP"
  },
  {
    "name": "node::AddLinkedBinding(node::Environment*, char const*, void (*)(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AllocateEnvironmentThreadId()",
    "type": "CPP"
  },
  {
    "name": "node::DefaultProcessExitHandler(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SetProcessExitHandler(node::Environment*, std::function<void (node::Environment*, int)>&&)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContextRuntime(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeContext(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::NewContext(v8::Isolate*, v8::Local<v8::ObjectTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Free(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointerInternal(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Allocate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::AllocateUninitialized(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DebuggingArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::GetImpl()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::RegisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::UnregisterPointer(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::NodeArrayBufferAllocator::~NodeArrayBufferAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::InspectorParentHandleImpl::~InspectorParentHandleImpl()",
    "type": "CPP"
  },
  {
    "name": "node::OneByteString(v8::Isolate*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<void* const, unsigned long>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, unsigned long>, std::allocator<std::pair<void* const, unsigned long> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, unsigned long>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ErrnoException(v8::Isolate*, int, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::UVException(v8::Isolate*, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::FatalException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::RunAtExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AtExit(node::Environment*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitBeforeExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitProcessExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitExit(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::DeleteACHHandle::operator()(node::ACHHandle*) const",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHook(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::AddEnvironmentCleanupHookInternal(v8::Isolate*, void (*)(void*, void (*)(void*), void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::RemoveEnvironmentCleanupHookInternal(node::ACHHandle*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetExecutionAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooksGetTriggerAsyncId(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncInit(v8::Isolate*, v8::Local<v8::Object>, v8::Local<v8::String>, double)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(v8::Isolate*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "node::EmitAsyncDestroy(node::Environment*, node::async_context)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEvent(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::UpdateTraceEventDuration(unsigned char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::AsyncCleanupHookInfo, std::allocator<node::AsyncCleanupHookInfo>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::ScopedTracer::~ScopedTracer()",
    "type": "CPP"
  },
  {
    "name": "node::signo_string(int)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::DestroyAsyncIdsCallback(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetProviderType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ClearAsyncIdStack(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::SetCallbackTrampoline(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::ExecutionAsyncResource(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PushAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::Emit(node::Environment*, double, node::AsyncHooks::Fields, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitPromiseResolve(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventBefore()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitBefore(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventAfter(node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAfter(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitTraceEventDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitAsyncInit(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::GetOwner()",
    "type": "CPP"
  },
  {
    "name": "_register_async_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::PopAsyncContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(node::Environment*, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::WeakCallback(v8::WeakCallbackInfo<node::DestroyParam> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::QueueDestroyAsyncId(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::Local<v8::Object>, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::AsyncWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, double, double)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::~AsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::EmitDestroy(bool)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_async_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::is_snapshotable() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<void (*)(node::Environment*)>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetCategoryGroupEnabled(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::~BaseObject()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<double, std::allocator<double> >::_M_realloc_insert<double const&>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::~TracedValue()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::AresTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::~ChannelWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::GetAddrInfoReqWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::GetNameInfoReqWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::Create(node::cares_wrap::ChannelWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::Setup()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ChannelWrap(node::Environment*, v8::Local<v8::Object>, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::StartTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::CloseTimer()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::ModifyActivityQueryCount(int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::EnsureServers()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ATraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AaaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CaaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::CnameTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::MxTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NsTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::TxtTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SrvTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::PtrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NaptrTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::SoaTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Send(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, char const*)",
    "type": "CPP"
  },
  {
    "name": "_register_cares_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::AnyTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ReverseTraits::Parse(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*, std::unique_ptr<node::cares_wrap::ResponseData, std::default_delete<node::cares_wrap::ResponseData> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::WrapperNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetNativeObject()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::GetDetachedness()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainer::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getaddrinfo_s, void (*)(uv_getaddrinfo_s*, int, addrinfo*)>::Wrapper(uv_getaddrinfo_s*, int, addrinfo*)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_getnameinfo_s, void (*)(uv_getnameinfo_s*, int, char const*, char const*)>::Wrapper(uv_getnameinfo_s*, int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::~NodeAresTask()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::MemoryRetainerNode::~MemoryRetainerNode()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getnameinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_getaddrinfo_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::LazilyInitializedJSTemplateConstructor(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::MutexBase<node::LibuvMutexTraits>::~MutexBase()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::~GetNameInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::~GetAddrInfoReqWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::ChannelWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetNameInfoReqWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::GetAddrInfoReqWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethod(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethod(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FromJSObject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeLazilyInitializedJSTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::pointer_data()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::operator()(v8::WeakCallbackInfo<node::BaseObject> const&) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()::{lambda(v8::WeakCallbackInfo<node::BaseObject> const&)#1}::_FUN(v8::WeakCallbackInfo<node::BaseObject> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::decrease_refcount()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::~QueryWrap()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncWrap::MakeCallback(v8::Local<v8::Name>, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_poll_s, void (*)(uv_poll_s*)>(uv_poll_s*, void (*)(uv_poll_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::CallOnComplete(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::MemoryRetainer const*, std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, std::allocator<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*> >, std::__detail::_Select1st, std::equal_to<node::MemoryRetainer const*>, std::hash<node::MemoryRetainer const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<node::MemoryRetainer const* const, node::MemoryRetainerNode*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_push_back_aux<node::MemoryRetainerNode* const&>(node::MemoryRetainerNode* const&)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::NodeAresTask::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::cares_wrap::NodeAresTask*, node::cares_wrap::NodeAresTask*, std::allocator<node::cares_wrap::NodeAresTask*>, std::__detail::_Identity, node::cares_wrap::NodeAresTask::Equal, node::cares_wrap::NodeAresTask::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::erase(std::__detail::_Node_const_iterator<node::cares_wrap::NodeAresTask*, true, true>)",
    "type": "CPP"
  },
  {
    "name": "unsigned char* node::Malloc<unsigned char>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::AddNode(char const*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>, false>::BaseObjectPtrImpl(node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::Push(std::unique_ptr<node::CallbackQueue<void, node::Environment*>::Callback, std::default_delete<node::CallbackQueue<void, node::Environment*>::Callback> >)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ReverseTraits>::Callback(void*, int, int, hostent*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::Callback(void*, int, int, unsigned char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::cares_wrap::ChannelWrap, false>::BaseObjectPtrImpl(node::cares_wrap::ChannelWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AnyTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::ATraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::AaaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CaaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::CnameTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::MxTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NsTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::TxtTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SrvTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::PtrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::NaptrTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::ParseError(int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::cares_wrap::QueryWrap<node::cares_wrap::SoaTraits>::QueueResponseCallback(int)::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::ConnectWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_connect_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ConnectWrap::~ConnectWrap()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::ConnectionWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::OnConnection(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::PipeWrap, uv_pipe_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ConnectionWrap<node::TCPWrap, uv_tcp_s>::AfterConnect(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::EnabledDebugList::Parse(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::New()",
    "type": "CPP"
  },
  {
    "name": "node::PrintLibuvHandleInformation(uv_loop_s*, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::CheckedUvLoopClose(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetLoadedLibraries[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::FWrite(_IO_FILE*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::SymbolInfo::Display[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::DumpBacktrace(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__DumpBacktrace",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::IsMapped(void*)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::~PosixSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::ToLower(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const*&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const*&)",
    "type": "CPP"
  },
  {
    "name": "node::PosixSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsDoneInitializing() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::WrappedObject() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::DeleteMe(void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunTimers(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::DeserializeProperties(std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::IsolateData(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, node::ArrayBufferAllocator*, std::vector<unsigned long, std::allocator<unsigned long> > const*)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::UpdateTraceCategoryState()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ExitEnv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RegisterHandleCleanups()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeLibuv()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::StartProfilerIdleNotifier()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintSyncTrace() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAtExitCallbacks()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AtExit(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearInterrupts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunAndClearNativeImmediates(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CheckImmediate(uv_check_s*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CleanupHandles()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RequestInterruptFromV8()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ScheduleTimer(long)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleTimerRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::ToggleImmediateRef(bool)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetNow()",
    "type": "CPP"
  },
  {
    "name": "node::CollectExceptionInfo(node::Environment*, v8::Local<v8::Object>, int, char const*, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CollectUVExceptionInfo(v8::Local<v8::Value>, int, char const*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::ImmediateInfo(v8::Isolate*, node::ImmediateInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::ImmediateInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::TickInfo::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::TickInfo(v8::Isolate*, node::TickInfo::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::AsyncHooks(v8::Isolate*, node::AsyncHooks::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<unsigned long, std::allocator<unsigned long> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::AsyncHooks::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::grow_async_ids_stack()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::FailWithCorruptedAsyncStack(double)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Exit(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::stop_sub_worker_contexts()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::worker_parent_env() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintAllBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::PrintInfoForSnapshotIfDebug()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::VerifyNoStrongBaseObjects()",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<node::PropInfo, std::allocator<node::PropInfo> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::operator<<(std::ostream&, node::EnvSerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::EnqueueDeserializeRequest(void (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*), v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunDeserializeRequests()",
    "type": "CPP"
  },
  {
    "name": "node::GuessMemoryAvailableToTheProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunWeakRefCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CreateProperties()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::~Environment()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunCleanup()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::GetExecPath(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Isolate*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::DeserializeProperties(node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeMainContext(v8::Local<v8::Context>, node::EnvSerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Environment(node::IsolateData*, v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, node::EnvSerializeInfo const*, node::EnvironmentFlags::Flags, node::ThreadId)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BuildEmbedderGraph(v8::Isolate*, v8::EmbedderGraph*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::Serialize(v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RemoveUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::AddUnmanagedFd(int)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::NearHeapLimitCallback(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::IsRootNode() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (node::Environment*, int), void (*)(node::Environment*, int)>::_M_invoke(std::_Any_data const&, node::Environment*&&, int&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<void (*)(node::Environment*, int)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::~TrackingTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerIsolateOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::EnvironmentOptions, std::allocator<node::EnvironmentOptions>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> >, std::allocator<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::~ImmediateInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::~TickInfo()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::~AsyncHooks()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::~IsolateData()",
    "type": "CPP"
  },
  {
    "name": "node::ImmediateInfo::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IsolateData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TickInfo::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::AsyncHooks::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::TrackingTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::length(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCwd[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Global<v8::Context>, std::allocator<v8::Global<v8::Context> > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::node_module*, node::node_module*, std::_Identity<node::node_module*>, std::less<node::node_module*>, std::allocator<node::node_module*> >::_M_erase(std::_Rb_tree_node<node::node_module*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::FastStringKey, std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> >, std::allocator<std::pair<node::FastStringKey const, node::BaseObjectPtrImpl<node::BaseObject, false> > >, std::__detail::_Select1st, std::equal_to<node::FastStringKey>, node::FastStringKey::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator=(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::MemoryTracker::Track(node::MemoryRetainer const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long& std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PropInfo, std::allocator<node::PropInfo> >::_M_realloc_insert<node::PropInfo>(__gnu_cxx::__normal_iterator<node::PropInfo*, std::vector<node::PropInfo, std::allocator<node::PropInfo> > >, node::PropInfo&&)",
    "type": "CPP"
  },
  {
    "name": "node::PropInfo& std::vector<node::PropInfo, std::allocator<node::PropInfo> >::emplace_back<node::PropInfo>(node::PropInfo&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, int, std::allocator<int>, std::__detail::_Identity, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_fs_event_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs_event_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnGCCollect()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsInitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::MarkAsUninitialized()",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::HandleWrap(node::Environment*, v8::Local<v8::Object>, uv_handle_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::OnClose(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_handle_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HandleWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HandleWrap, false>::BaseObjectPtrImpl(node::HandleWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::WriteSnapshot(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::TriggerHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::DeleteHeapSnapshot(v8::HeapSnapshot const*)",
    "type": "CPP"
  },
  {
    "name": "_register_heap_utils()",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(node::Environment*, std::unique_ptr<v8::HeapSnapshot const, node::FunctionDeleter<v8::HeapSnapshot const, &node::heap::DeleteHeapSnapshot> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::CreateHeapSnapshotStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_heap_utils(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::BuildEmbedderGraph(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::WriteHeapStatsChunk(v8::HeapStatsUpdate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::IsRootNode()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderGraph::Node::NamePrefix()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::Name()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::SizeInBytes()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::IsEmbedderNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraphJSNode::~JSGraphJSNode()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::AsyncWrap, false>::BaseObjectPtrImpl(node::AsyncWrap*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, std::set<std::pair<char const*, v8::EmbedderGraph::Node*>, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddEdge(v8::EmbedderGraph::Node*, v8::EmbedderGraph::Node*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node*&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::EmbedderGraph::Node*, std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> >, std::allocator<std::pair<v8::EmbedderGraph::Node* const, v8::Local<v8::Object> > >, std::__detail::_Select1st, std::equal_to<v8::EmbedderGraph::Node*>, std::hash<v8::EmbedderGraph::Node*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::EmbedderGraph::Node* const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::CreateObject() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, std::allocator<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Identity, std::equal_to<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::hash<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::V8Node(v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::AddNode(std::unique_ptr<v8::EmbedderGraph::Node, std::default_delete<v8::EmbedderGraph::Node> >)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::pair<char const*, v8::EmbedderGraph::Node*>, std::pair<char const*, v8::EmbedderGraph::Node*>, std::_Identity<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::less<std::pair<char const*, v8::EmbedderGraph::Node*> >, std::allocator<std::pair<char const*, v8::EmbedderGraph::Node*> > >::_M_erase(std::_Rb_tree_node<std::pair<char const*, v8::EmbedderGraph::Node*> >*)",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::heap::JSGraph::~JSGraph()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::TimerCB(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::DoReset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RecordDelta(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceeds(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetStddev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMean(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMax(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetCount(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetCount(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetExceedsBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetExceedsBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMinBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMinBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetMaxBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetMaxBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetCountBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetCountBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentiles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentilesBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentilesBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetPercentileBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetPercentileBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::Histogram(node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramImpl::HistogramImpl(std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Add(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::IntervalHistogram(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, int, std::function<void (node::Histogram&)>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStart(node::IntervalHistogram::StartFlags)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::OnStop()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Create(node::Environment*, std::shared_ptr<node::Histogram>)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::Create(node::Environment*, int, std::function<void (node::Histogram&)>, node::Histogram::Options const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::Record(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::~Histogram()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::Histogram*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::~IntervalHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::~HistogramTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::HistogramTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Histogram::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IntervalHistogram::~IntervalHistogram()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::HistogramBase::~HistogramBase()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::HistogramBase, false>::BaseObjectPtrImpl(node::HistogramBase*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BaseObject, false>::BaseObjectPtrImpl(node::BaseObject*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::IntervalHistogram, false>::BaseObjectPtrImpl(node::IntervalHistogram*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::FinalizeCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SecondPassCallback(v8::WeakCallbackInfo<v8impl::Reference*> const&)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::~RefBase()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::~Reference()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefBase(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::New(napi_env__*, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Data()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefBase::RefCount()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::New(napi_env__*, v8::Local<v8::Value>, unsigned int, bool, void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Ref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Unref()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::Get()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Reference::SetWeak()",
    "type": "CPP"
  },
  {
    "name": "napi_get_last_error_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_get_all_property_names",
    "type": "CPP"
  },
  {
    "name": "napi_set_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_property",
    "type": "CPP"
  },
  {
    "name": "napi_delete_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_own_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_has_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_get_named_property",
    "type": "CPP"
  },
  {
    "name": "napi_set_element",
    "type": "CPP"
  },
  {
    "name": "napi_has_element",
    "type": "CPP"
  },
  {
    "name": "napi_get_element",
    "type": "CPP"
  },
  {
    "name": "napi_delete_element",
    "type": "CPP"
  },
  {
    "name": "napi_define_properties",
    "type": "CPP"
  },
  {
    "name": "napi_object_freeze",
    "type": "CPP"
  },
  {
    "name": "napi_object_seal",
    "type": "CPP"
  },
  {
    "name": "napi_is_array",
    "type": "CPP"
  },
  {
    "name": "napi_get_array_length",
    "type": "CPP"
  },
  {
    "name": "napi_strict_equals",
    "type": "CPP"
  },
  {
    "name": "napi_get_prototype",
    "type": "CPP"
  },
  {
    "name": "napi_create_object",
    "type": "CPP"
  },
  {
    "name": "napi_create_array",
    "type": "CPP"
  },
  {
    "name": "napi_create_array_with_length",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_create_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_create_double",
    "type": "CPP"
  },
  {
    "name": "napi_create_int32",
    "type": "CPP"
  },
  {
    "name": "napi_create_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_create_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_create_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_boolean",
    "type": "CPP"
  },
  {
    "name": "napi_create_symbol",
    "type": "CPP"
  },
  {
    "name": "node_api_symbol_for",
    "type": "CPP"
  },
  {
    "name": "napi_create_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_create_range_error",
    "type": "CPP"
  },
  {
    "name": "node_api_create_syntax_error",
    "type": "CPP"
  },
  {
    "name": "napi_typeof",
    "type": "CPP"
  },
  {
    "name": "napi_get_undefined",
    "type": "CPP"
  },
  {
    "name": "napi_get_null",
    "type": "CPP"
  },
  {
    "name": "napi_get_cb_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_new_target",
    "type": "CPP"
  },
  {
    "name": "napi_call_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_global",
    "type": "CPP"
  },
  {
    "name": "napi_throw",
    "type": "CPP"
  },
  {
    "name": "napi_throw_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_type_error",
    "type": "CPP"
  },
  {
    "name": "napi_throw_range_error",
    "type": "CPP"
  },
  {
    "name": "node_api_throw_syntax_error",
    "type": "CPP"
  },
  {
    "name": "napi_is_error",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_double",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_uint32",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_int64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_uint64",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bigint_words",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_bool",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_latin1",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf8",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_string_utf16",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_bool",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_number",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_object",
    "type": "CPP"
  },
  {
    "name": "napi_coerce_to_string",
    "type": "CPP"
  },
  {
    "name": "napi_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_unwrap",
    "type": "CPP"
  },
  {
    "name": "napi_remove_wrap",
    "type": "CPP"
  },
  {
    "name": "napi_create_external",
    "type": "CPP"
  },
  {
    "name": "napi_type_tag_object",
    "type": "CPP"
  },
  {
    "name": "napi_check_object_type_tag",
    "type": "CPP"
  },
  {
    "name": "napi_get_value_external",
    "type": "CPP"
  },
  {
    "name": "napi_create_reference",
    "type": "CPP"
  },
  {
    "name": "napi_delete_reference",
    "type": "CPP"
  },
  {
    "name": "napi_reference_ref",
    "type": "CPP"
  },
  {
    "name": "napi_reference_unref",
    "type": "CPP"
  },
  {
    "name": "napi_get_reference_value",
    "type": "CPP"
  },
  {
    "name": "napi_open_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_open_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_escapable_handle_scope",
    "type": "CPP"
  },
  {
    "name": "napi_escape_handle",
    "type": "CPP"
  },
  {
    "name": "napi_new_instance",
    "type": "CPP"
  },
  {
    "name": "napi_instanceof",
    "type": "CPP"
  },
  {
    "name": "napi_is_exception_pending",
    "type": "CPP"
  },
  {
    "name": "napi_get_and_clear_last_exception",
    "type": "CPP"
  },
  {
    "name": "napi_is_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_arraybuffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_is_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_create_typedarray",
    "type": "CPP"
  },
  {
    "name": "napi_get_typedarray_info",
    "type": "CPP"
  },
  {
    "name": "napi_create_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_is_dataview",
    "type": "CPP"
  },
  {
    "name": "napi_get_dataview_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_promise",
    "type": "CPP"
  },
  {
    "name": "napi_resolve_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_reject_deferred",
    "type": "CPP"
  },
  {
    "name": "napi_is_promise",
    "type": "CPP"
  },
  {
    "name": "napi_create_date",
    "type": "CPP"
  },
  {
    "name": "napi_is_date",
    "type": "CPP"
  },
  {
    "name": "napi_get_date_value",
    "type": "CPP"
  },
  {
    "name": "napi_run_script",
    "type": "CPP"
  },
  {
    "name": "napi_add_finalizer",
    "type": "CPP"
  },
  {
    "name": "napi_adjust_external_memory",
    "type": "CPP"
  },
  {
    "name": "napi_set_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_get_instance_data",
    "type": "CPP"
  },
  {
    "name": "napi_detach_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_is_detached_arraybuffer",
    "type": "CPP"
  },
  {
    "name": "napi_define_class",
    "type": "CPP"
  },
  {
    "name": "napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_env__::~napi_env__()",
    "type": "CPP"
  },
  {
    "name": "v8impl::Finalizer::~Finalizer()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> >::_M_realloc_insert<napi_property_descriptor const&>(__gnu_cxx::__normal_iterator<napi_property_descriptor*, std::vector<napi_property_descriptor, std::allocator<napi_property_descriptor> > >, napi_property_descriptor const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::EmitEOF(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::JSStream(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_js_stream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::WriteWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "node::JSStream::~JSStream()",
    "type": "CPP"
  },
  {
    "name": "void node::JSStream::Finish<node::ShutdownWrap>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Reindent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::EscapeJsonChars(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::EmitReceived(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnAfterBind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::OnSendDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::JSUDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_js_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::OnAfterBind()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::~SocketAddress()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::~JSUDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::JSUDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::JSUDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStatus(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetSyntheticExport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetInitializeImportMetaObjectCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SetImportModuleDynamicallyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetNamespace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetStaticDependencySpecifiers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::context() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Instantiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromID(node::Environment*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "_register_module_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::GetFromModule(node::Environment*, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::HostInitializeImportMetaObjectCallback(v8::Local<v8::Context>, v8::Local<v8::Module>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SyntheticModuleEvaluationStepsCallback(v8::Local<v8::Context>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::~ModuleWrap()",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ModuleWrap(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Module>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Link(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::ResolveModuleCallback(v8::Local<v8::Context>, v8::Local<v8::String>, v8::Local<v8::FixedArray>, v8::Local<v8::Module>)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::Evaluate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::equal_range(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::count(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::loader::ModuleWrap*>, std::allocator<std::pair<int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, false> >::erase(std::__detail::_Node_const_iterator<std::pair<int const, node::loader::ModuleWrap*>, false, false>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::loader::ModuleWrap*>, std::allocator<std::pair<unsigned int const, node::loader::ModuleWrap*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::loader::ModuleWrap*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, v8::Global<v8::Promise> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::deque<node::MemoryRetainerNode*, std::allocator<node::MemoryRetainerNode*> >::_M_reallocate_map(unsigned long, bool)",
    "type": "CPP"
  },
  {
    "name": "node::loader::ModuleWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<4u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::MarkBootstrapComplete(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::ResetStdio()",
    "type": "CPP"
  },
  {
    "name": "node::SignalExit(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TrapWebAssemblyOrContinue(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::ExecuteBootstrapper(node::Environment*, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeDiagnostics()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapInternalLoaders()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::BootstrapNode()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::RunBootstrapping()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterSignalHandler(int, void (*)(int, siginfo_t*, void*), bool)",
    "type": "CPP"
  },
  {
    "name": "node::TearDownOncePerProcess()",
    "type": "CPP"
  },
  {
    "name": "node::Stop(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::StartExecution(node::Environment*, std::function<v8::MaybeLocal<v8::Value> (node::StartExecutionCallbackInfo const&)>)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::InitializeInspector(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessGlobalArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::ProcessFlags::Flags)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeNodeWithArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**, node::InitializationSettingsFlags, node::ProcessFlags::Flags)",
    "type": "CPP"
  },
  {
    "name": "node::InitializeOncePerProcess(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::Start(int, char**)",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceDisabled()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::~NodeTraceStateObserver()",
    "type": "CPP"
  },
  {
    "name": "node::V8Platform::~V8Platform()",
    "type": "CPP"
  },
  {
    "name": "node::NodeTraceStateObserver::OnTraceEnabled()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::insert(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [39]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [39])",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [28]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [28])",
    "type": "CPP"
  },
  {
    "name": "std::vector<char*, std::allocator<char*> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::~node_napi_env__()",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::can_call_into_js() const",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::mark_arraybuffer_as_untransferable(v8::Local<v8::ArrayBuffer>) const",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::node_napi_env__(v8::Local<v8::Context>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::trigger_fatal_exception(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register_by_symbol(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, napi_value__* (*)(napi_env__*, napi_value__*))",
    "type": "CPP"
  },
  {
    "name": "node::napi_module_to_node_module(napi_module const*)",
    "type": "CPP"
  },
  {
    "name": "napi_module_register",
    "type": "CPP"
  },
  {
    "name": "napi_add_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_env_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_add_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_remove_async_cleanup_hook",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_exception",
    "type": "CPP"
  },
  {
    "name": "napi_open_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_close_callback_scope",
    "type": "CPP"
  },
  {
    "name": "napi_async_init",
    "type": "CPP"
  },
  {
    "name": "napi_async_destroy",
    "type": "CPP"
  },
  {
    "name": "napi_make_callback",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_external_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_create_buffer_copy",
    "type": "CPP"
  },
  {
    "name": "napi_is_buffer",
    "type": "CPP"
  },
  {
    "name": "napi_get_buffer_info",
    "type": "CPP"
  },
  {
    "name": "napi_get_node_version",
    "type": "CPP"
  },
  {
    "name": "napi_create_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_delete_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_get_uv_event_loop",
    "type": "CPP"
  },
  {
    "name": "napi_queue_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_cancel_async_work",
    "type": "CPP"
  },
  {
    "name": "napi_create_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_get_threadsafe_function_context",
    "type": "CPP"
  },
  {
    "name": "napi_acquire_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_release_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_unref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "napi_ref_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "node_api_get_module_file_name",
    "type": "CPP"
  },
  {
    "name": "node_napi_env__::CallFinalizer(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "napi_fatal_error",
    "type": "CPP"
  },
  {
    "name": "napi_call_threadsafe_function",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::Finalize(bool)",
    "type": "CPP"
  },
  {
    "name": "napi_async_cleanup_hook_handle__::Hook(void*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "v8impl::RefTracker::~RefTracker()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<napi_async_cleanup_hook_handle__::~napi_async_cleanup_hook_handle__()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::_FUN(uv_work_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::_FUN(uv_work_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)::{lambda(node::Environment*)#2}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*)#1}::operator()(uv_work_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()::{lambda(uv_work_s*, int)#2}::operator()(uv_work_s*, int) const",
    "type": "CPP"
  },
  {
    "name": "void node_napi_env__::CallFinalizer<true>(void (*)(napi_env__*, void*, void*), void*, void*)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<void*, std::allocator<void*> >::_M_push_back_aux<void* const&>(void* const&)",
    "type": "CPP"
  },
  {
    "name": "node_module_register",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::DLib(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Close()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSymbolAddress(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::GetSavedModuleFromGlobalHandleMap()",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterBuiltinModules()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::SaveInGlobalHandleMap(node::node_module*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLib::Open()",
    "type": "CPP"
  },
  {
    "name": "node::binding::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetInternalBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::binding::GetLinkedBinding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_binding(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::binding::global_handle_map_t::~global_handle_map_t()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::node_module*>, bool> std::_Rb_tree<node::node_module*, node::node_module*, std::_Identity<node::node_module*>, std::less<node::node_module*>, std::allocator<node::node_module*> >::_M_insert_unique<node::node_module* const&>(node::node_module* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::binding::global_handle_map_t::Entry>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<void*, std::pair<void* const, node::binding::global_handle_map_t::Entry>, std::allocator<std::pair<void* const, node::binding::global_handle_map_t::Entry> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](void* const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Blob(node::Environment*, v8::Local<v8::Object>, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::BlobBindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_blob()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::StoredDataObject(node::BaseObjectPtrImpl<node::Blob, false> const&, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Create(node::Environment*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::FixedSizeBlobCopyJob(node::Environment*, v8::Local<v8::Object>, node::Blob*, node::FixedSizeBlobCopyJob::Mode)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Slice(node::Environment*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToSlice(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::ToArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_blob(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::GetDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::store_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::BlobBindingData::StoredDataObject const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::StoreDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::get_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::revoke_data_object(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::Blob::RevokeDataObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::is_snapshotable() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::BackingStore*, std::default_delete<v8::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::~FixedSizeBlobCopyJob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::~BlobTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::FixedSizeBlobCopyJob::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Blob::BlobTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::StoredDataObject::~StoredDataObject()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::Blob::~Blob()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BlobBindingData::~BlobBindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::Blob, false>::BaseObjectPtrImpl(node::Blob*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::operator=(std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BlobEntry, std::allocator<node::BlobEntry> >::_M_realloc_insert<node::BlobEntry>(__gnu_cxx::__normal_iterator<node::BlobEntry*, std::vector<node::BlobEntry, std::allocator<node::BlobEntry> > >, node::BlobEntry&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::BackingStore, std::default_delete<v8::BackingStore> >(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::BlobBindingData, false>::BaseObjectPtrImpl(node::BlobBindingData*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::BlobBindingData::StoredDataObject>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::BlobBindingData::StoredDataObject> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::HasInstance(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Data(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Length(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_buffer()",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::ArrayBuffer>, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(node::Environment*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::Copy(v8::Isolate*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(node::Environment*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::New(v8::Isolate*, char*, unsigned long, void (*)(char*, void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::Buffer::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_buffer(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetMethodNoSideEffect(v8::Local<v8::Object>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "long& std::vector<long, std::allocator<long> >::emplace_back<long>(long&&)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned short>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned short>(node::stringsearch::Vector<unsigned short const>, node::stringsearch::Vector<unsigned short const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::PopulateBoyerMooreTable()",
    "type": "CPP"
  },
  {
    "name": "node::stringsearch::StringSearch<unsigned char>::BoyerMooreHorspoolSearch(node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::stringsearch::SearchString<unsigned char>(node::stringsearch::Vector<unsigned char const>, node::stringsearch::Vector<unsigned char const>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_config()",
    "type": "CPP"
  },
  {
    "name": "node::DefineConstants(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IsContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::CreateCachedData(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDeleterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDeleterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyEnumeratorCallback(v8::PropertyCallbackInfo<v8::Array> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDescriptorCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDescriptorCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyGetterCallback(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyGetterCallback(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertySetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertySetterCallback(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::PropertyDefinerCallback(v8::Local<v8::Name>, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::IndexedPropertyDefinerCallback(unsigned int, v8::PropertyDescriptor const&, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::~ContextifyScript()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::~CompiledFnEntry()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::WeakCallback(v8::WeakCallbackInfo<node::contextify::CompiledFnEntry> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::~ContextifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::WeakCallback(v8::WeakCallbackInfo<node::contextify::ContextifyContext> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateDataWrapper(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextFromContextifiedSandbox(node::Environment*, v8::Local<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::InstanceOf(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::CompiledFnEntry(node::Environment*, v8::Local<v8::Object>, unsigned int, v8::Local<v8::ScriptOrModule>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::microtask_queue() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_contextify()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MicrotaskQueueWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CreateV8Context(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::ContextifyContext(node::Environment*, v8::Local<v8::Object>, node::contextify::ContextOptions const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::MakeContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_contextify(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::ContextifyScript(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyContext::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::EvalMachine(node::Environment*, long, bool, bool, bool, std::shared_ptr<v8::MicrotaskQueue>, v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInThisContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::RunInContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::MicrotaskQueue*, std::default_delete<v8::MicrotaskQueue>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::ContextifyScript::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::CompiledFnEntry::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::contextify::MicrotaskQueueWrap::~MicrotaskQueueWrap()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::contextify::MicrotaskQueueWrap, false>::BaseObjectPtrImpl(node::contextify::MicrotaskQueueWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Object>*, std::vector<v8::Local<v8::Object>, std::allocator<v8::Local<v8::Object> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >::_M_realloc_insert<v8::Local<v8::String> >(__gnu_cxx::__normal_iterator<v8::Local<v8::String>*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > >, v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >(std::unique_ptr<v8::MicrotaskQueue, std::default_delete<v8::MicrotaskQueue> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::ContextifyScript*>, std::allocator<std::pair<unsigned int const, node::contextify::ContextifyScript*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::ContextifyScript*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, std::allocator<std::pair<unsigned int const, node::contextify::CompiledFnEntry*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned int const, node::contextify::CompiledFnEntry*>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::HasOnly(int)",
    "type": "CPP"
  },
  {
    "name": "_register_credentials()",
    "type": "CPP"
  },
  {
    "name": "node::credentials::SafeGetenv(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::credentials::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_credentials(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<unsigned int>(v8::Local<v8::Context>, std::vector<unsigned int, std::allocator<unsigned int> > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned int, std::allocator<unsigned int> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterClose(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::DirHandle(node::Environment*, v8::Local<v8::Object>, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::New(node::Environment*, uv_dir_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::AfterOpenDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::~DirHandle()",
    "type": "CPP"
  },
  {
    "name": "_register_fs_dir()",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::Read(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs_dir(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_fs_s, void (*)(uv_fs_s*)>::Wrapper(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_fs_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs_dir::DirHandle::GCClose()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::~FSReqPromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs_dir::DirHandle::GCClose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::BindingData, false>::BaseObjectPtrImpl(node::fs::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::GetReqWrap(v8::FunctionCallbackInfo<v8::Value> const&, int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FSReqBase, false>::BaseObjectPtrImpl(node::fs::FSReqBase*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<uv_dirent_s, std::allocator<uv_dirent_s> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::AssignFromObject(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get[abi:cxx11](char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Clone(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::KVStore::CreateMapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::CreateEnvVarProxy(v8::Local<v8::Context>, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::Enumerate(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_env_var(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterEnvVarExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get[abi:cxx11](char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Get(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Set(v8::Isolate*, v8::Local<v8::String>, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Delete(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::Query(v8::Isolate*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::RealEnvStore::~RealEnvStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::RealEnvStore, std::allocator<node::RealEnvStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "node::MapKVStore::~MapKVStore()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MapKVStore, std::allocator<node::MapKVStore>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::KVStore>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::IsExceptionDecorated(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Abort()",
    "type": "CPP"
  },
  {
    "name": "node::Assert(node::AssertionInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::SetPrepareStackTraceCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::errno_string(int)",
    "type": "CPP"
  },
  {
    "name": "_register_errors()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_errors(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::errors::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::PrintStackTrace(v8::Isolate*, v8::Local<v8::StackTrace>)",
    "type": "CPP"
  },
  {
    "name": "node::AppendExceptionLine(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Message>, node::ErrorHandlingMode)",
    "type": "CPP"
  },
  {
    "name": "node::PrintException(v8::Isolate*, v8::Local<v8::Context>, v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::PrintCaughtException(v8::Isolate*, v8::Local<v8::Context>, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TryCatchScope::~TryCatchScope()",
    "type": "CPP"
  },
  {
    "name": "node::errors::DecorateErrorStack(node::Environment*, node::errors::TryCatchScope const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::errors::TriggerUncaughtException(v8::Isolate*, v8::TryCatch const&)",
    "type": "CPP"
  },
  {
    "name": "node::errors::PerIsolateMessageListener(v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::ToString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::GetCurrent(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<3u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<4u, node::Utf8Value>(node::Utf8Value const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::ToBaseString<3u, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::ExternalReferenceRegistry::ExternalReferenceRegistry()",
    "type": "CPP"
  },
  {
    "name": "node::ExternalReferenceRegistry::external_references()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SetReturnValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::~FileHandleReadWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::CloseReq::~CloseReq()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::Resolve(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReleaseFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Basename(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqBase::~FSReqBase()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::TransferData(int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::~FileHandle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Resolve()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::Reject(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::file_handle()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::CloseReq(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Promise>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ClosePromise()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::AfterClose()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::FileHandleReadWrap(node::fs::FileHandle*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FromNamespacedPath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::binding_data()",
    "type": "CPP"
  },
  {
    "name": "_register_fs()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::FileHandle(node::fs::BindingData*, v8::Local<v8::Object>, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(node::fs::BindingData*, int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::NewFSReqCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::ResolveStat(uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::FSReqAfterScope(node::fs::FSReqBase*, uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Clear()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::~FSReqAfterScope()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Reject(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqAfterScope::Proceed()",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterInteger(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPath(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStringPtr(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterOpenFileHandle(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterMkdirp(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterStat(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterNoArgs(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Access(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpAsync(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::MKDirpSync(uv_loop_s*, uv_fs_s*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, void (*)(uv_fs_s*))",
    "type": "CPP"
  },
  {
    "name": "node::fs::CallMKDirpSync(node::Environment*, v8::FunctionCallbackInfo<v8::Value> const&, node::fs::FSReqWrapSync*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDir(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::AfterScanDirWithTypes(uv_fs_s*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_fs(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::length() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FileHandle::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#2}>::~CallbackImpl()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::CallbackQueue<void, node::Environment*>::CallbackImpl<node::fs::FileHandle::Close()::{lambda(node::Environment*)#1}>::Call(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::~FSContinuationData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_fs_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::CloseReq::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSContinuationData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandleReadWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::IsSafeJsInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqWrapSync::~FSReqWrapSync()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::fs::FSReqCallback::~FSReqCallback()",
    "type": "CPP"
  },
  {
    "name": "node::fs::FileHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<char, 64ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<unsigned long, v8::BigUint64Array>(node::AliasedBufferBase<unsigned long, v8::BigUint64Array, std::enable_if<std::is_scalar<unsigned long>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::fs::FillStatsArray<double, v8::Float64Array>(node::AliasedBufferBase<double, v8::Float64Array, std::enable_if<std::is_scalar<double>::value, void>::type>*, uv_stat_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<unsigned long, v8::BigUint64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::FSReqPromise<node::AliasedBufferBase<double, v8::Float64Array, void> >::New(node::fs::BindingData*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::fs::BindingData* node::Environment::GetBindingData<node::fs::BindingData>(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, int, void (*)(uv_fs_s*)), char*, int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, void (*)(uv_fs_s*)), int)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, char const*, void (*)(uv_fs_s*)), char*)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, int, long)",
    "type": "CPP"
  },
  {
    "name": "int node::fs::SyncCall<int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long>(node::Environment*, v8::Local<v8::Value>, node::fs::FSReqWrapSync*, char const*, int (*)(uv_loop_s*, uv_fs_s*, int, uv_buf_t const*, unsigned int, long, void (*)(uv_fs_s*)), int, uv_buf_t*, unsigned long, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Integer> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Integer>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>::BaseObjectPtrImpl(node::fs::FileHandleReadWrap*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>*, std::vector<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>, std::allocator<node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false> > > >, node::BaseObjectPtrImpl<node::fs::FileHandleReadWrap, false>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "_register_http_parser()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameSent(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidHeader(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::~Provider()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::RefreshDefaultSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::HttpErrorString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::UpdateChunksSent(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::SetCallbackFunctions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Options::Http2Options(node::http2::Http2State*, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Init(node::http2::Http2State*, nghttp2_settings_entry*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Update(node::http2::Http2Session*, unsigned int (*)(nghttp2_session*, nghttp2_settings_id))",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::RefreshDefaults(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Done(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::TypeName() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Origins::Origins(node::Environment*, v8::Local<v8::String>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Callbacks::Callbacks(bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::StopTrackingRcbuf(nghttp2_rcbuf*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2StreamPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2SessionPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::http2::Http2SessionPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::EmitStatistics()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CanAddStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::GetFrameID(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::TranslateNghttp2ErrorCode(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HasWritesOnSocketForStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::operator*() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::stream() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Provider(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::Stream(node::http2::Http2Stream*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IncrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DecrementAvailableOutboundLength(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopPing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PopSettings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleSettingsFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::callback() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Done(bool, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePingFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "_register_http2()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::Http2Scope(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Http2Settings(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Http2Ping(node::http2::Http2Session*, v8::Local<v8::Object>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::DetachFromSession()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::FindStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RemoveStream(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::PushOutgoingBuffer(node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::CopyDataIntoOutgoing(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Http2Session(node::http2::Http2State*, v8::Local<v8::Object>, node::http2::SessionType)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::Environment*, unsigned long, nghttp2_settings_entry const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Pack(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::PackSettings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddStream(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::AddHeader(nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Consume(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::OnTrailers()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleAltSvcFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleGoawayFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RefreshState(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeScheduleWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Scope::~Http2Scope()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::Send()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(int, unsigned char*, unsigned long, unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(node::http2::Origins const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::Send(unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Origin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AltSvc(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddSettings(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Settings(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::AddPing(unsigned char const*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Ping(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::FlushRstStream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitResponse(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Respond(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPriority(node::http2::Http2Priority const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::~Http2Stream()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::~Http2Session()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleOriginFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Http2Stream(node::http2::Http2Session*, v8::Local<v8::Object>, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::New(node::http2::Http2Session*, int, nghttp2_headers_category, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SubmitRequest(node::http2::Http2Priority const&, node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitPushPromise(node::NgHeaders<node::http2::Http2HeadersTraits> const&, int*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Goaway(unsigned int, int, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnNghttpError(nghttp2_session*, char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Priority::Http2Priority(node::Environment*, v8::Local<v8::Value>, v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Priority(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDWordAlignedPadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnMaxFrameSizePadding(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSendData(nghttp2_session*, nghttp2_frame*, unsigned char const*, unsigned long, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnSelectPadding(nghttp2_session*, nghttp2_frame const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Close(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandlePriorityFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetNextStreamID(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SetLocalWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::DecrefHeaders(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleDataFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::HandleHeadersFrame(nghttp2_frame const*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MaybeStopReading()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameReceive(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnFrameNotSent(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamClose(nghttp2_session*, int, unsigned int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SendPendingData()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ClearOutgoing(int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Close(unsigned int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Destroy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitRstStream(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::RstStream(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnHeaderCallback(nghttp2_session*, nghttp2_frame const*, nghttp2_rcbuf*, nghttp2_rcbuf*, unsigned char, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::StartHeaders(nghttp2_headers_category)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnBeginHeadersCallback(nghttp2_session*, nghttp2_frame const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitInfo(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Info(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SubmitTrailers(node::NgHeaders<node::http2::Http2HeadersTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Trailers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::OnRead(nghttp2_session*, int, unsigned char*, unsigned long, unsigned int*, nghttp2_data_source*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::Request(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::PushPromise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::ConsumeHTTP2Data()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Session::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnInvalidFrame(nghttp2_session*, nghttp2_frame const*, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::OnDataChunkReceived(nghttp2_session*, unsigned char, int, unsigned char const*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::IsCacheable() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Lock() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResourceBase::Unlock() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::HasWantsWrite() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::http2::Http2Stream::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::flags() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::Provider::Stream::~Stream()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2StreamListener::~Http2StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::data() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::~NgRcBufPointer()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::length() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::~External()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::~Http2Settings()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::~Http2Ping()",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::~NgHeader()",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::value[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Ping::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Stream::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Session::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2Settings::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::http2::Http2Session, nghttp2_mem>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::MakeWeak()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::Http2State::~Http2State()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::http2::NgHttp2StreamWrite::~NgHttp2StreamWrite()",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<double, v8::Float64Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "node::AliasedBufferBase<unsigned int, v8::Uint32Array, void>::AliasedBufferBase(v8::Isolate*, unsigned long, unsigned long, node::AliasedBufferBase<unsigned char, v8::Uint8Array, void> const&, unsigned long const*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamReq::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, false>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Session, true>::BaseObjectPtrImpl(node::http2::Http2Session*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2State, false>::BaseObjectPtrImpl(node::http2::Http2State*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Stream, false>::BaseObjectPtrImpl(node::http2::Http2Stream*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaders<node::http2::Http2HeadersTraits>::NgHeaders(node::Environment*, v8::Local<v8::Array>)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<int, std::allocator<int> >::_M_realloc_insert<int&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> >::_M_realloc_insert<node::http2::NgHttp2StreamWrite>(__gnu_cxx::__normal_iterator<node::http2::NgHttp2StreamWrite*, std::vector<node::http2::NgHttp2StreamWrite, std::allocator<node::http2::NgHttp2StreamWrite> > >, node::http2::NgHttp2StreamWrite&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Ping, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Ping, false> >(node::BaseObjectPtrImpl<node::http2::Http2Ping, false>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::BaseObjectPtrImpl<node::http2::Http2Settings, false>, std::allocator<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> > >::_M_push_back_aux<node::BaseObjectPtrImpl<node::http2::Http2Settings, false> >(node::BaseObjectPtrImpl<node::http2::Http2Settings, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char*, std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, std::allocator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > > >, std::__detail::_Select1st, std::equal_to<char*>, std::hash<char*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<char* const, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> > >, false, false>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeaderBase<node::http2::Http2Session>::ToString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::AliasedStruct<node::http2::SessionJSFields>::AliasedStruct<>(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, std::allocator<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, node::BaseObjectPtrImpl<node::http2::Http2Stream, false> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > >::_M_realloc_insert<node::NgHeader<node::http2::Http2HeaderTraits> >(__gnu_cxx::__normal_iterator<node::NgHeader<node::http2::Http2HeaderTraits>*, std::vector<node::NgHeader<node::http2::Http2HeaderTraits>, std::allocator<node::NgHeader<node::http2::Http2HeaderTraits> > > >, node::NgHeader<node::http2::Http2HeaderTraits>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Ping, false>::BaseObjectPtrImpl(node::http2::Http2Ping*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::http2::Http2Settings, false>::BaseObjectPtrImpl(node::http2::Http2Settings*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::CleanupHookCallback, node::CleanupHookCallback, std::allocator<node::CleanupHookCallback>, std::__detail::_Identity, node::CleanupHookCallback::Equal, node::CleanupHookCallback::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::CleanupHookCallback, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_remote_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::http2::Http2Session::RefreshSettings<&nghttp2_session_get_local_settings>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<char const*, std::pair<char const* const, v8::Eternal<v8::String> >, std::allocator<std::pair<char const* const, v8::Eternal<v8::String> > >, std::__detail::_Select1st, std::equal_to<char const*>, std::hash<char const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<char const* const, v8::Eternal<v8::String> >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::String> node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>::External::New<node::http2::Http2Session>(node::http2::Http2Session*, node::NgRcBufPointer<node::http2::Http2RcBufferPointerTraits>)",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetValue(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::NgHeader<node::http2::Http2HeaderTraits>::GetName(node::http2::Http2Session*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Decode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Has(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::Converter(UConverter*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::set_subst_chars(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::reset()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::min_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::Converter::max_char_size() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::ConverterObject(node::Environment*, v8::Local<v8::Object>, UConverter*, int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::Create(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::InitializeICUDirectory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::SetDefaultTimeZone(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToUnicode(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ToASCII(node::MaybeStackBuffer<char, 1024ul>*, char const*, unsigned long, node::i18n::idna_mode)",
    "type": "CPP"
  },
  {
    "name": "_register_icu()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_icu(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::i18n::ConverterObject::~ConverterObject()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Create(v8::Isolate*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::NodeMainInstance(node::SnapshotData const*, uv_loop_s*, node::MultiIsolatePlatform*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Dispose()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::~NodeMainInstance()",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run(int*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::CreateMainEnvironment(int*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeMainInstance::Run()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::FinalizeTransferWrite(v8::Local<v8::Context>, v8::ValueSerializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::FinalizeTransferRead(v8::Local<v8::Context>, v8::ValueDeserializer*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Message(node::MallocedBuffer<char>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::IsCloseMessage() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MessagePortData(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::TriggerAsync()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Detach()",
    "type": "CPP"
  },
  {
    "name": "node::worker::GetMessagePortConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::CheckType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::JSTransferable(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Data(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, v8::Global<v8::Value>&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferOrClone(node::BaseObject::TransferMode) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::TransferForMessaging()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::SiblingGroup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Entangle(std::initializer_list<node::worker::MessagePortData*>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Entangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "_register_messaging()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Entangle(node::worker::MessagePortData*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Entangle(node::worker::MessagePort*, node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Deserialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddSharedArrayBuffer(std::shared_ptr<v8::BackingStore>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddTransferable(std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::AddWASMModule(v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::NestedTransferables() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::Serialize(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::Local<v8::Context>, node::worker::MessagePort::MessageProcessingMode, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::ReceiveMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnMessage(node::worker::MessagePort::MessageProcessingMode)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Drain(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MessagePort(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::AddToIncomingQueue(std::shared_ptr<node::worker::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Dispatch(node::worker::MessagePortData*, std::shared_ptr<node::worker::Message>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Dispatch(std::shared_ptr<node::worker::Message>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(node::Environment*, v8::Local<v8::Context>, v8::Local<v8::Value>, node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::PostMessage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Disentangle(node::worker::MessagePortData*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Disentangle()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::~MessagePortData()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::~MessagePort()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::New(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::MessagePortData, std::default_delete<node::worker::MessagePortData> >, std::shared_ptr<node::worker::SiblingGroup>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MoveToContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::OnClose()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_messaging(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::Get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::CheckSiblingGroup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::SiblingGroup::~SiblingGroup()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::Close(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::Message, std::allocator<node::worker::Message>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::~Data()",
    "type": "CPP"
  },
  {
    "name": "std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::weak_ptr<node::worker::SiblingGroup>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > > >::~unordered_map()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::Data::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Message::~Message()",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePortData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::MessagePort::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::BaseObject(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "node::worker::JSTransferable::~JSTransferable()",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::MessagePort, false>::BaseObjectPtrImpl(node::worker::MessagePort*)",
    "type": "CPP"
  },
  {
    "name": "node::MaybeStackBuffer<v8::Local<v8::Value>, 8ul>::AllocateSufficientStorage(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::SharedArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::SharedArrayBuffer>*, std::vector<v8::Local<v8::SharedArrayBuffer>, std::allocator<v8::Local<v8::SharedArrayBuffer> > > >, v8::Local<v8::SharedArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > >::_M_realloc_insert<std::shared_ptr<v8::BackingStore> >(__gnu_cxx::__normal_iterator<std::shared_ptr<v8::BackingStore>*, std::vector<std::shared_ptr<v8::BackingStore>, std::allocator<std::shared_ptr<v8::BackingStore> > > >, std::shared_ptr<v8::BackingStore>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > >::_M_realloc_insert<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >*, std::vector<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >, std::allocator<std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> > > > >, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> >::_M_realloc_insert<v8::CompiledWasmModule>(__gnu_cxx::__normal_iterator<v8::CompiledWasmModule*, std::vector<v8::CompiledWasmModule, std::allocator<v8::CompiledWasmModule> > >, v8::CompiledWasmModule&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > >::_M_realloc_insert<v8::Global<v8::SharedArrayBuffer> >(__gnu_cxx::__normal_iterator<v8::Global<v8::SharedArrayBuffer>*, std::vector<v8::Global<v8::SharedArrayBuffer>, std::allocator<v8::Global<v8::SharedArrayBuffer> > > >, v8::Global<v8::SharedArrayBuffer>&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::_M_realloc_insert<node::BaseObjectPtrImpl<node::BaseObject, false> >(__gnu_cxx::__normal_iterator<node::BaseObjectPtrImpl<node::BaseObject, false>*, std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > >, node::BaseObjectPtrImpl<node::BaseObject, false>&&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::operator=(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > >::_M_realloc_insert<v8::Local<v8::ArrayBuffer> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::ArrayBuffer>*, std::vector<v8::Local<v8::ArrayBuffer>, std::allocator<v8::Local<v8::ArrayBuffer> > > >, v8::Local<v8::ArrayBuffer> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Value> const&>(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::worker::MessagePortData*, node::worker::MessagePortData*, std::_Identity<node::worker::MessagePortData*>, std::less<node::worker::MessagePortData*>, std::allocator<node::worker::MessagePortData*> >::_M_erase(std::_Rb_tree_node<node::worker::MessagePortData*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::worker::MessagePortData*, node::worker::MessagePortData*, std::_Identity<node::worker::MessagePortData*>, std::less<node::worker::MessagePortData*>, std::allocator<node::worker::MessagePortData*> >::erase(node::worker::MessagePortData* const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > >::vector(std::vector<node::BaseObjectPtrImpl<node::BaseObject, false>, std::allocator<node::BaseObjectPtrImpl<node::BaseObject, false> > > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::weak_ptr<node::worker::SiblingGroup> > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::worker::SiblingGroup, std::allocator<node::worker::SiblingGroup>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::GetOpenSSLVersion[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Release::Release()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::InitializeIntlVersions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Versions::Versions()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::Metadata::~Metadata()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetInstance()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::code_cache[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadBuiltinModuleSource(v8::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetModuleIds[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::InitializeModuleCategories()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCannotBeRequired[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CannotBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCanBeRequired[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CanBeRequired(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetCodeCache(char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::CompileAsModule(v8::Local<v8::Context>, char const*, node::native_module::NativeModuleLoader::Result*)",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalOneByteResource::~NonOwningExternalOneByteResource()",
    "type": "CPP"
  },
  {
    "name": "node::NonOwningExternalTwoByteResource::~NonOwningExternalTwoByteResource()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::~NativeModuleLoader()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const*&, node::UnionBytes const&>(char const*&, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, false, true>)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::HasCachedBuiltins(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ConfigStringGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Add(char const*, node::UnionBytes const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::Exists(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetSourceObject(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetConfigString(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RefreshCodeCache(std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> > const&)",
    "type": "CPP"
  },
  {
    "name": "_register_native_module()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::ModuleIdsGetter(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetCacheUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RecordResult(char const*, node::native_module::NativeModuleLoader::Result, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileFunction(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::LookupAndCompile(v8::Local<v8::Context>, char const*, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > >*, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CopyCodeCache(std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> >*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_native_module(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::GetModuleCategories(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleEnv::CompileAllModules(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(v8::Local<v8::Context>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> >::_M_realloc_insert<node::native_module::CodeCacheInfo>(__gnu_cxx::__normal_iterator<node::native_module::CodeCacheInfo*, std::vector<node::native_module::CodeCacheInfo, std::allocator<node::native_module::CodeCacheInfo> > >, node::native_module::CodeCacheInfo&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::equal_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::erase(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_copy<std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node>(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Alloc_node&)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetEmbedderOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_options()",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (char const*)>)",
    "type": "CPP"
  },
  {
    "name": "node::HandleEnvOptions(std::shared_ptr<node::EnvironmentOptions>)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetCLIOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::SplitHostPort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::CheckOptions(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::ParseNodeOptionsEnvVar(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::GetBashCompletion[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_options(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::DebugOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerIsolateOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::Parse<node::PerProcessOptions, node::Options>(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::PerIsolateOptionsParser(node::options_parser::EnvironmentOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::PerProcessOptionsParser(node::options_parser::PerIsolateOptionsParser const&)",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::get_debug_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::get_per_isolate_options()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::get_per_env_options()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::PerProcessOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::LookupImpl(node::PerIsolateOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::LookupImpl(node::EnvironmentOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::LookupImpl(node::DebugOptions*) const",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::PerProcessOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::EnvironmentOptions*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long>, std::allocator<node::options_parser::OptionsParser<node::EnvironmentOptions>::SimpleOptionField<unsigned long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerIsolateOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<long> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool>, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<node::options_parser::OptionsParser<node::PerProcessOptions>::SimpleOptionField<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<bool>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::SimpleOptionField<node::HostPort>::~SimpleOptionField()",
    "type": "CPP"
  },
  {
    "name": "node::DebugOptions::~DebugOptions()",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::compare(char const*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::ToV8Value(v8::Local<v8::Context>, std::basic_string_view<char, std::char_traits<char> >, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "unsigned long long __gnu_cxx::__stoa<unsigned long long, unsigned long long, char, int>(unsigned long long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "node::EnvironmentOptions::~EnvironmentOptions()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, (__gnu_cxx::_Lock_policy)2> const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::~OptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerProcessOptionsParser::~PerProcessOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::PerIsolateOptionsParser::~PerIsolateOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::EnvironmentOptionsParser::~EnvironmentOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::DebugOptionsParser::~DebugOptionsParser()",
    "type": "CPP"
  },
  {
    "name": "v8::MaybeLocal<v8::Value> node::ToV8Value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(v8::Local<v8::Context>, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > const&, v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField::~AdaptedField()",
    "type": "CPP"
  },
  {
    "name": "std::shared_ptr<node::PerProcessOptions>::~shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo::~OptionInfo()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "node::PerProcessOptions::~PerProcessOptions()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerProcessOptions>::Convert<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField, node::PerIsolateOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::BaseOptionField>, node::PerIsolateOptions* (node::PerProcessOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::PerIsolateOptions>::Convert<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField, node::EnvironmentOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::BaseOptionField>, node::EnvironmentOptions* (node::PerIsolateOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::options_parser::OptionsParser<node::EnvironmentOptions>::Convert<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField, node::DebugOptions>(std::shared_ptr<node::options_parser::OptionsParser<node::DebugOptions>::BaseOptionField>, node::DebugOptions* (node::EnvironmentOptions::*)())::AdaptedField*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolateOptions::~PerIsolateOptions()",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ArgsInfo::pop_first[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::ParseAndValidatePort(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddAlias(char const*, std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddAlias(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::DebugOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::AddOption(char const*, char const*, bool node::DebugOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerIsolateOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Parse(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*, node::PerProcessOptions*, node::OptionEnvvarSettings, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, bool node::EnvironmentOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::AddOption(char const*, char const*, unsigned long node::EnvironmentOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::AddOption(char const*, char const*, bool node::PerIsolateOptions::*, node::OptionEnvvarSettings, bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::OptionInfo>, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::AddOption(char const*, char const*, long node::PerProcessOptions::*, node::OptionEnvvarSettings)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::EnvironmentOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::EnvironmentOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::EnvironmentOptions>::Insert<node::DebugOptions>(node::options_parser::OptionsParser<node::DebugOptions> const&, node::DebugOptions* (node::EnvironmentOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::DebugOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::DebugOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerIsolateOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerIsolateOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerIsolateOptions>::Insert<node::EnvironmentOptions>(node::options_parser::OptionsParser<node::EnvironmentOptions> const&, node::EnvironmentOptions* (node::PerIsolateOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, false> >::_M_insert_multi_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::options_parser::OptionsParser<node::PerProcessOptions>::Implication>, true>*)",
    "type": "CPP"
  },
  {
    "name": "void node::options_parser::OptionsParser<node::PerProcessOptions>::Insert<node::PerIsolateOptions>(node::options_parser::OptionsParser<node::PerIsolateOptions> const&, node::PerIsolateOptions* (node::PerProcessOptions::*)())",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::ImpliesNot(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::options_parser::OptionsParser<node::PerProcessOptions>::Implies(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::os::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_os()",
    "type": "CPP"
  },
  {
    "name": "node::os::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_os(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value>& std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::String> >(v8::Local<v8::String>&&)",
    "type": "CPP"
  },
  {
    "name": "v8::Local<v8::Value>& std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::emplace_back<v8::Local<v8::Number> >(v8::Local<v8::Number>&&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionStart(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetTimeOrigin(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GetTimeOriginTimeStamp(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GarbageCollectionCleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkGarbageCollectionEnd(v8::Isolate*, v8::GCType, v8::GCCallbackFlags, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::SetupPerformanceObservers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Notify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::CreateELDHistogram(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::PerformanceState(v8::Isolate*, node::performance::PerformanceState::SerializeInfo const*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Serialize(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Deserialize(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "node::performance::operator<<(std::ostream&, node::performance::PerformanceState::SerializeInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::PerformanceState::Mark(node::performance::PerformanceMilestone, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::performance::MarkMilestone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::performance::GCPerformanceEntryTraits::GetDetails(node::Environment*, node::performance::PerformanceEntry<node::performance::GCPerformanceEntryTraits> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_performance()",
    "type": "CPP"
  },
  {
    "name": "node::performance::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_performance(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceEventWithTimestamp(char, unsigned char const*, char const*, char const*, unsigned long, unsigned long, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int, long)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NumberOfWorkerThreads()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetStackTracePrinter()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetPageAllocator()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::MonotonicallyIncreasingTime()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CurrentClockTimeMillis()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostIdleTask(std::unique_ptr<v8::IdleTask, std::default_delete<v8::IdleTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::PostJob(v8::TaskPriority, std::unique_ptr<v8::JobTask, std::default_delete<v8::JobTask> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::GetForegroundTaskRunner()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::~PerIsolatePlatformData()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::BlockingDrain()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::NumberOfWorkerThreads() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DecreaseHandleCount()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::DeleteFromScheduledTasks(node::DelayedTask*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::RunForegroundTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::PostDelayedTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallDelayedOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, double)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::~NodePlatform()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::CallOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::PostNonNestableTask(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::AddIsolateFinishedCallback(v8::Isolate*, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::AddShutdownCallback(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::ForNodeIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::IdleTasksEnabled(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::GetForegroundTaskRunner(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, node::IsolatePlatformDelegate*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::WorkerThreadsTaskRunner(int)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::NodePlatform(int, v8::TracingController*, v8::PageAllocator*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushForegroundTasksInternal()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::DrainTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::FlushForegroundTasks(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::PerIsolatePlatformData(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::RegisterIsolate(v8::Isolate*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::Shutdown()",
    "type": "CPP"
  },
  {
    "name": "node::NodePlatform::UnregisterIsolate(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::AddTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::RemoveTraceStateObserver(v8::TracingController::TraceStateObserver*)",
    "type": "CPP"
  },
  {
    "name": "v8::ZoneBackingAllocator::GetMallocFn() const",
    "type": "CPP"
  },
  {
    "name": "v8::ZoneBackingAllocator::GetFreeFn() const",
    "type": "CPP"
  },
  {
    "name": "v8::HighAllocationThroughputObserver::EnterSection()",
    "type": "CPP"
  },
  {
    "name": "v8::HighAllocationThroughputObserver::LeaveSection()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetZoneBackingAllocator()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::OnCriticalMemoryPressure(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::DumpWithoutCrashing()",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::GetHighAllocationThroughputObserver()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::IdleTasksEnabled()",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PerIsolatePlatformData::NonNestableDelayedTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::~StopTask()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::~ScheduleTask()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::PerIsolatePlatformData, std::allocator<node::PerIsolatePlatformData>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::FlushTasks(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::WorkerThreadsTaskRunner, std::allocator<node::WorkerThreadsTaskRunner>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::Start()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::TakeTimerTask(uv_timer_s*)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::Push(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::RunTask(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallLowPriorityTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Platform::CallBlockingTaskOnWorkerThread(std::unique_ptr<v8::Task, std::default_delete<v8::Task> >)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<uv_timer_s*, std::allocator<uv_timer_s*> >::_M_realloc_insert<uv_timer_s* const&>(__gnu_cxx::__normal_iterator<uv_timer_s**, std::vector<uv_timer_s*, std::allocator<uv_timer_s*> > >, uv_timer_s* const&)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::StopTask::Run()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> >::_M_realloc_insert<node::PerIsolatePlatformData::ShutdownCallback>(__gnu_cxx::__normal_iterator<node::PerIsolatePlatformData::ShutdownCallback*, std::vector<node::PerIsolatePlatformData::ShutdownCallback, std::allocator<node::PerIsolatePlatformData::ShutdownCallback> > >, node::PerIsolatePlatformData::ShutdownCallback&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > >::_M_realloc_insert<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >*, std::vector<std::unique_ptr<unsigned long, std::default_delete<unsigned long> >, std::allocator<std::unique_ptr<unsigned long, std::default_delete<unsigned long> > > > >, std::unique_ptr<unsigned long, std::default_delete<unsigned long> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<v8::Isolate*, std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > >, std::allocator<std::pair<v8::Isolate* const, std::pair<node::IsolatePlatformDelegate*, std::shared_ptr<node::PerIsolatePlatformData> > > >, std::__detail::_Select1st, std::equal_to<v8::Isolate*>, std::hash<v8::Isolate*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](v8::Isolate* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<uv_timer_s*, uv_timer_s*, std::allocator<uv_timer_s*>, std::__detail::_Identity, std::equal_to<uv_timer_s*>, std::hash<uv_timer_s*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<uv_timer_s*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::WorkerThreadsTaskRunner::DelayedTaskScheduler::ScheduleTask::Run()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<v8::Task, std::default_delete<v8::Task> >, std::allocator<std::unique_ptr<v8::Task, std::default_delete<v8::Task> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TaskQueue<v8::Task>::TaskQueue()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> >, std::allocator<std::unique_ptr<node::DelayedTask, std::default_delete<node::DelayedTask> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::GenDebugSymbols()",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmit(node::Environment*, char const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitWarningGeneric(node::Environment*, char const*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitDeprecationWarning(node::Environment*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::ProcessEmitExperimentalWarning(node::Environment*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~set()",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SlowBigInt(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SlowNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::AddMethods()",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FromV8Value(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::NumberImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::BigIntImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "_register_process_methods()",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandles(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetActiveHandlesInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::process::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_process_methods(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RawDebug(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FastBigInt(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::FastNumber(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::process::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >::_M_realloc_insert<v8::Local<v8::Object> >(__gnu_cxx::__normal_iterator<v8::Local<v8::Value>*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > > >, v8::Local<v8::Object>&&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::process::BindingData, false>::BaseObjectPtrImpl(node::process::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::CreateProcessObject(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::PatchProcessObject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_process_object(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterProcessExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "report::TriggerNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::Value>, std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::LookupSymbol(void*)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::GetStackTrace(void**, int)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_start()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_end()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_objectend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::json_arrayend()",
    "type": "CPP"
  },
  {
    "name": "node::JSONWriter::write_string(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_objectstart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [9], unsigned long>(char const (&) [9], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_arraystart<char const*>(char const*)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [8], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const (&) [8], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(char const (&) [5], std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [5], unsigned long>(char const (&) [5], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "void node::JSONWriter::json_keyvalue<char [11], unsigned long>(char const (&) [11], unsigned long const&)",
    "type": "CPP"
  },
  {
    "name": "node::NativeSymbolDebuggingContext::~NativeSymbolDebuggingContext()",
    "type": "CPP"
  },
  {
    "name": "_register_report()",
    "type": "CPP"
  },
  {
    "name": "report::WriteReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "report::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_report(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "report::WalkHandle(uv_handle_s*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::ThrowDataCloneError(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SetTreatArrayBufferViewsAsHostObjects(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::ReleaseBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadHeader(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::GetWireFormatVersion(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadDouble(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadUint32(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteValue(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteUint64(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SerializerContext(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::DeserializerContext(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "_register_serdes()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::WriteRawBytes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::TransferArrayBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_serdes(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::DeserializerContext::~DeserializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::serdes::SerializerContext::~SerializerContext()",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::CollectExternalReferences()",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::InitializeIsolateParams(node::SnapshotData const*, v8::Isolate::CreateParams*)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::SnapshotableObject(node::Environment*, v8::Local<v8::Object>, node::EmbedderObjectType)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotableObject::GetTypeNameChars() const",
    "type": "CPP"
  },
  {
    "name": "node::IsSnapshotableType(node::FastStringKey)",
    "type": "CPP"
  },
  {
    "name": "_register_mksnapshot()",
    "type": "CPP"
  },
  {
    "name": "node::FormatBlob[abi:cxx11](node::SnapshotData*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_mksnapshot(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::Generate(node::SnapshotData*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::SnapshotBuilder::Generate(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >)",
    "type": "CPP"
  },
  {
    "name": "node::SerializeBindingData(node::Environment*, v8::SnapshotCreator*, node::EnvSerializeInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::DeserializeNodeInternalFields(v8::Local<v8::Object>, int, v8::StartupData, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SerializeNodeContextInternalFields(v8::Local<v8::Object>, int, void*)",
    "type": "CPP"
  },
  {
    "name": "std::unique_ptr<node::ExternalReferenceRegistry, std::default_delete<node::ExternalReferenceRegistry> >::~unique_ptr()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetFlowLabel(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::LegacyDetail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Detail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::ToSockAddr(int, char const*, unsigned int, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::New(int, char const*, unsigned int, node::SocketAddress*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::Hash::operator()(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromSockName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_tcp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::FromPeerName(uv_udp_s const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_match(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::compare(node::SocketAddress const&) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddress::is_in_network(node::SocketAddress const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressBlockList(std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::RemoveSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressRange(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddressMask(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::Apply(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SocketAddressRule(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SocketAddressRangeRule(std::shared_ptr<node::SocketAddress> const&, std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SocketAddressMaskRule(std::shared_ptr<node::SocketAddress> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SocketAddressBlockListWrap(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::HasInstance(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Check(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddRange(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddSubnet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SocketAddressBase(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "_register_block_list()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::AddSocketAddress(std::shared_ptr<node::SocketAddress> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::AddAddress(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::ListRules(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetRules(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::New(node::Environment*, std::shared_ptr<node::SocketAddressBlockList>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::Create(node::Environment*, std::shared_ptr<node::SocketAddress>)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::ToString[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddress, std::allocator<node::SocketAddress>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressMaskRule::~SocketAddressMaskRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRule::~SocketAddressRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::TransferData::~TransferData()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::SocketAddressBlockList, std::allocator<node::SocketAddressBlockList>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::SocketAddressRangeRule::~SocketAddressRangeRule()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockList::~SocketAddressBlockList()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBase::~SocketAddressBase()",
    "type": "CPP"
  },
  {
    "name": "node::SocketAddressBlockListWrap::~SocketAddressBlockListWrap()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<node::SocketAddress, std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > >, std::allocator<std::pair<node::SocketAddress const, std::_List_iterator<std::unique_ptr<node::SocketAddressBlockList::Rule, std::default_delete<node::SocketAddressBlockList::Rule> > > > >, std::__detail::_Select1st, std::equal_to<node::SocketAddress>, node::SocketAddress::Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](node::SocketAddress const&)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBlockListWrap, false>::BaseObjectPtrImpl(node::SocketAddressBlockListWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::SocketAddressBase, false>::BaseObjectPtrImpl(node::SocketAddressBase*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::StatWatcher(node::fs::BindingData*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::Callback(uv_fs_poll_s*, int, uv_stat_t const*, uv_stat_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "node::StatWatcher::~StatWatcher()",
    "type": "CPP"
  },
  {
    "name": "_register_symbols()",
    "type": "CPP"
  },
  {
    "name": "_register_task_queue()",
    "type": "CPP"
  },
  {
    "name": "node::PromiseRejectCallback(v8::PromiseRejectMessage)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_task_queue(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::task_queue::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Disable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::GetEnabledCategories(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_trace_events()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_trace_events(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::Enable(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::~NodeCategorySet()",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_emplace_unique<char*>(char*&&)",
    "type": "CPP"
  },
  {
    "name": "node::NodeCategorySet::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "_register_types()",
    "type": "CPP"
  },
  {
    "name": "node::RegisterTypesExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_types(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8String(v8::Isolate*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "_register_url()",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToObject(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::Parse(char const*, unsigned long, node::url::url_parse_state, node::url::url_data*, bool, node::url::url_data const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::FromFilePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::ToFilePath[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::url::URL::SerializeURL[abi:cxx11](node::url::url_data const&, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_url(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::url::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char*, unsigned long>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char*&&, unsigned long&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char const (&) [1]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >& std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<char const (&) [1]>(char const (&) [1])",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::ArrayBufferViewHasBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_util()",
    "type": "CPP"
  },
  {
    "name": "node::util::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_util(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::Environment::alpn_buffer_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::arrow_message_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_context_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::contextify_global_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::decorated_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_type_tag() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::napi_wrapper() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::untransferable_object_private_symbol() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::Get(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::IncRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::DecRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::util::WeakReference::~WeakReference()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::PrepareForSerialization(v8::Local<v8::Context>, v8::SnapshotCreator*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::Serialize(int)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::SetFlagsFromString(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::CachedDataVersionTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapCodeStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::UpdateHeapSpaceStatisticsBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::BindingData(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_v8()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_v8(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::Deserialize(v8::Local<v8::Context>, v8::Local<v8::Object>, int, node::InternalFieldInfo*)",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::v8_utils::BindingData::~BindingData()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::v8_utils::BindingData, false>::BaseObjectPtrImpl(node::v8_utils::BindingData*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::_SetMemory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::~WASI()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::WASI(node::Environment*, v8::Local<v8::Object>, uvwasi_options_s*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::CheckAllocatedSize(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::IncreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::DecreaseAllocatedSize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::backingStore(char**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "_register_wasi()",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SchedYield(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdClose(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdDatasync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSync(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcExit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ProcRaise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockResGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironSizesGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRenumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdTell(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::RandomGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ArgsGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::EnvironGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPrestatDirName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathCreateDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRemoveDirectory(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathUnlinkFile(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PollOneoff(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdWrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathSymlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathReadlink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathRename(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathLink(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::ClockTimeGet(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetFlags(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAllocate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFdstatSetRights(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdReaddir(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdPwrite(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockShutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdAdvise(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::FdSeek(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathFilestatSetTimes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockRecv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SockSend(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::PathOpen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::StopTrackingMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::ReallocImpl(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::MallocImpl(unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::CallocImpl(unsigned long, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::mem::NgLibMemoryManager<node::wasi::WASI, uvwasi_mem_s>::FreeImpl(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasi::WASI::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Finish(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Abort(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::SetImplementation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::SetURL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Initialize(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Create(node::Environment*, std::shared_ptr<v8::WasmStreaming>)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::StartStreamingCompilation(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_wasm_web_api()",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::Push(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_wasm_web_api(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::~WasmStreamingObject()",
    "type": "CPP"
  },
  {
    "name": "node::wasm_web_api::WasmStreamingObject::~WasmStreamingObject()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Run(void*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Timer(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HandleSignal(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::HandleSigint()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::RunSigintWatchdog(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::Watchdog(v8::Isolate*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::Watchdog::~Watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Init(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::TraceSigintWatchdog(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::InformWatchdogsAboutSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::~SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::HasPendingSignal()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Unregister(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::~SigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Stop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::SigintWatchdogHelper()",
    "type": "CPP"
  },
  {
    "name": "_register_watchdog()",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdogHelper::Register(node::SigintWatchdogBase*)",
    "type": "CPP"
  },
  {
    "name": "node::SigintWatchdog::SigintWatchdog(v8::Isolate*, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::HandleInterrupt()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TraceSigintWatchdog::~TraceSigintWatchdog()",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> >::_M_realloc_insert<node::SigintWatchdogBase* const&>(__gnu_cxx::__normal_iterator<node::SigintWatchdogBase**, std::vector<node::SigintWatchdogBase*, std::allocator<node::SigintWatchdogBase*> > >, node::SigintWatchdogBase* const&)",
    "type": "CPP"
  },
  {
    "name": "node::TraceSigintWatchdog::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Ref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::HasRef(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Unref(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopIdleTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::LoopStartTime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::is_stopped() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::UpdateResourceConstraints(v8::ResourceConstraints*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::CreateEnvMessagePort(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::JoinThread()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::GetResourceLimits(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "_register_worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StartThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_worker(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::~Worker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Worker(node::Environment*, v8::Local<v8::Object>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::PerIsolateOptions>, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&&, std::shared_ptr<node::KVStore>, node::SnapshotData const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::TakeHeapSnapshot(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Exit(int, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::StopThread(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::Run()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::NearHeapLimit(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::_FUN(void*)",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::~WorkerHeapSnapshotTaker()",
    "type": "CPP"
  },
  {
    "name": "node::worker::Worker::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerHeapSnapshotTaker::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::worker::WorkerThreadData::~WorkerThreadData()::{lambda(void*)#1}::operator()(void*) const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::worker::WorkerHeapSnapshotTaker, false>::BaseObjectPtrImpl(node::worker::WorkerHeapSnapshotTaker*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::worker::Worker*, node::worker::Worker*, std::allocator<node::worker::Worker*>, std::__detail::_Identity, std::equal_to<node::worker::Worker*>, std::hash<node::worker::Worker*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::worker::Worker*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::DefineZlibConstants(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_zlib()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_zlib(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObject::ClearWeak()",
    "type": "CPP"
  },
  {
    "name": "node::ThreadPoolWork::ScheduleWork()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Fchmod(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::PipeWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::PipeWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType, bool)",
    "type": "CPP"
  },
  {
    "name": "_register_pipe_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_pipe_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_connect_s, void (*)(uv_connect_s*, int)>::Wrapper(uv_connect_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "node::PipeWrap::~PipeWrap()",
    "type": "CPP"
  },
  {
    "name": "_register_process_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::HasSignalJSHandler(int)",
    "type": "CPP"
  },
  {
    "name": "_register_signal_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::DecreaseSignalHandlerCount(int)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_signal_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, long> >*)",
    "type": "CPP"
  },
  {
    "name": "std::map<int, long, std::less<int>, std::allocator<std::pair<int const, long> > >::~map()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, long>, std::_Select1st<std::pair<int const, long> >, std::less<int>, std::allocator<std::pair<int const, long> > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::WriteCallback(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ShutdownCallback(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::CloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ExitCallback(uv_process_s*, long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::AllocCallback(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::ReadCallback(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::KillTimerCallback(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::SyncProcessStdioPipe(node::SyncProcessRunner*, bool, bool, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::~SyncProcessStdioPipe()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Initialize(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Start()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::Close()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessStdioPipe::GetOutputAsBuffer(node::Environment*) const",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SyncProcessRunner(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::~SyncProcessRunner()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseStdioPipes()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseHandlesAndDeleteLoop()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CloseKillTimer()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Kill()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IncrementBufferSizeAndCheckOverflow(long)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnExit(long, int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::OnKillTimerTimeout()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::GetError()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::SetPipeError(int)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildOutputArray()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::BuildResultObject()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOption(int, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::IsSet(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsString(v8::Local<v8::Value>, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::CopyJsStringArray(v8::Local<v8::Value>, char**)",
    "type": "CPP"
  },
  {
    "name": "_register_spawn_sync()",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseStdioOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::ParseOptions(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::TryInitializeAndRunLoop(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Run(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::SyncProcessRunner::Spawn(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> >, std::allocator<std::unique_ptr<node::SyncProcessStdioPipe, std::default_delete<node::SyncProcessStdioPipe> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetObject()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetExternal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesRead(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetBytesWritten(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStartJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::ReadStopJS(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::UseUserBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::SetWriteResult(node::StreamWriteResult const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::CallJSOnreadMethod(long, v8::Local<v8::ArrayBuffer>, unsigned long, node::StreamBase::StreamBaseJSChecks)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethod(node::Environment*, v8::Local<v8::Signature>, v8::PropertyAttribute, v8::Local<v8::FunctionTemplate>, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterReqFinished(node::StreamReq*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReportWritesToJSStreamListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamListener::~StreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::StreamResource::~StreamResource()",
    "type": "CPP"
  },
  {
    "name": "node::ShutdownWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::WriteWrap::OnDone(int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Writev(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::WriteBuffer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldGet<2>(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::BaseObject::InternalFieldSet<2, &(v8::Value::IsFunction() const)>(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::EmitToJSStreamListener::~EmitToJSStreamListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "node::CustomBufferJSListener::~CustomBufferJSListener()",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStartJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::ReadStopJS>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::UseUserBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Shutdown>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Write(uv_buf_t*, unsigned long, uv_stream_s*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)1>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::Writev>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)4>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)0>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&(int node::StreamBase::WriteString<(node::encoding)3>(v8::FunctionCallbackInfo<v8::Value> const&))>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::StreamBase::JSMethod<&node::StreamBase::WriteBuffer>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::AsyncWrap>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamWantsWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::IsClosed(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::PendingWrites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::StreamPipe(node::StreamBase*, node::StreamBase*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_pipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(bool)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterShutdown(node::ShutdownWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::Unpipe(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::~StreamPipe()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ProcessData(unsigned long, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::OnStreamDestroy()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::WritableListener::~WritableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::ReadableListener::~ReadableListener()",
    "type": "CPP"
  },
  {
    "name": "node::StreamPipe::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::StreamPipe, false>::BaseObjectPtrImpl(node::StreamPipe*)",
    "type": "CPP"
  },
  {
    "name": "node::StreamBase::Shutdown(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::IsConstructCallCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateWriteWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvWrite(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::AfterUvShutdown(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::SetBlocking(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::LibuvStreamWrap::DoTryWrite(uv_buf_t**, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::LibuvStreamWrap(node::Environment*, v8::Local<v8::Object>, uv_stream_s*, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::From(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvAlloc(unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::OnUvRead(long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "_register_stream_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_stream_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::LibuvStreamWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_shutdown_s, void (*)(uv_shutdown_s*, int)>::Wrapper(uv_shutdown_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_write_s, void (*)(uv_write_s*, int)>::Wrapper(uv_write_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_shutdown_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_write_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleWriteWrap<node::ReqWrap<uv_write_s> >::~SimpleWriteWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SimpleShutdownWrap<node::ReqWrap<uv_shutdown_s> >::~SimpleShutdownWrap()",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::WriteUCS2(v8::Isolate*, char*, unsigned long, v8::Local<v8::String>, int, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::StorageSize(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Size(v8::Isolate*, v8::Local<v8::Value>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode(char const*, unsigned long, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::hex_encode[abi:cxx11](char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Write(v8::Isolate*, char*, unsigned long, v8::Local<v8::Value>, node::encoding, int*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, unsigned short const*, unsigned long, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, unsigned long, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::StringBytes::Encode(v8::Isolate*, char const*, node::encoding, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<char>(char*, unsigned long, char const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "unsigned long node::base64_decode_fast<unsigned short>(char*, unsigned long, unsigned short const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_string_decoder()",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::DecodeData(v8::Isolate*, char const*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::StringDecoder::FlushData(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_string_decoder(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterStringDecoderExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetNoDelay(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Listen(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SetKeepAlive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Reset(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::TCPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::TCPWrap(node::Environment*, v8::Local<v8::Object>, node::AsyncWrap::ProviderType)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Reset(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::AddressToJS(node::Environment*, sockaddr const*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_tcp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_tcp_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in*), int (*)(char const*, int, sockaddr_in*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<int (char const*, int, sockaddr_in6*), int (*)(char const*, int, sockaddr_in6*)>::_M_invoke(std::_Any_data const&, char const*&&, int&&, sockaddr_in6*&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<int (*)(char const*, int, sockaddr_in6*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TCPWrap::~TCPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::TCPWrap, &uv_tcp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Bind<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, int, std::function<int (char const*, int, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in*)>)",
    "type": "CPP"
  },
  {
    "name": "void node::TCPWrap::Connect<sockaddr_in6>(v8::FunctionCallbackInfo<v8::Value> const&, std::function<int (char const*, sockaddr_in6*)>)",
    "type": "CPP"
  },
  {
    "name": "_register_timers()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_timers(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::RegisterTimerExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::OnTimeout(uv_timer_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::TimerClosedCb(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::CleanupHook(void*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Close()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Ref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Unref()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::Update(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::~TimerWrap()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::TimerWrapHandle::~TimerWrapHandle()",
    "type": "CPP"
  },
  {
    "name": "node::Environment::CloseHandle<uv_handle_s, void (*)(uv_handle_s*)>(uv_handle_s*, void (*)(uv_handle_s*))::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Start()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::DefaultHandle()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::StopTracing()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddMetadataEvent(std::unique_ptr<v8::platform::tracing::TraceObject, std::default_delete<v8::platform::tracing::TraceObject> >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::AddMetadataEvent(unsigned char const*, char const*, int, char const**, unsigned char const*, unsigned long const*, std::unique_ptr<v8::ConvertableToTraceFormat, std::default_delete<v8::ConvertableToTraceFormat> >*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::InitializeWritersOnThread()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::GetEnabledCategories[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::CreateTraceConfig() const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disable(int, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Enable(int, std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::Disconnect(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::Agent::AddClient(std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> >, node::tracing::Agent::UseDefaultCategoryMode)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::AsyncTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::CurrentTimestampMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracingController::~TracingController()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_erase(std::_Rb_tree_node<node::tracing::AsyncTraceWriter*>*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::erase(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<node::tracing::AsyncTraceWriter*>, bool> std::_Rb_tree<node::tracing::AsyncTraceWriter*, node::tracing::AsyncTraceWriter*, std::_Identity<node::tracing::AsyncTraceWriter*>, std::less<node::tracing::AsyncTraceWriter*>, std::allocator<node::tracing::AsyncTraceWriter*> >::_M_insert_unique<node::tracing::AsyncTraceWriter* const&>(node::tracing::AsyncTraceWriter* const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int&&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<int const, std::multiset<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > >, std::allocator<std::pair<int const, std::unique_ptr<node::tracing::AsyncTraceWriter, std::default_delete<node::tracing::AsyncTraceWriter> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_insert_hint_equal_pos(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_equal<std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_insert_unique<std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::~NodeTraceBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::Flush()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NonBlockingFlushSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::AddTraceEvent(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::GetEventByHandle(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::MakeHandle(unsigned long, unsigned int, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::ExtractHandle(unsigned long, unsigned int*, unsigned long*, unsigned int*, unsigned long*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::TryLoadAvailableBuffer()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::InternalTraceBuffer::InternalTraceBuffer(unsigned long, unsigned int, node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceBuffer::NodeTraceBuffer(unsigned long, node::tracing::Agent*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "std::vector<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> >, std::allocator<std::unique_ptr<v8::platform::tracing::TraceBufferChunk, std::default_delete<v8::platform::tracing::TraceBufferChunk> > > >::_M_default_append(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::InitializeOnThread(uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::Flush(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::ExitSignalCb(uv_async_s*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::~NodeTraceWriter()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::NodeTraceWriter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteSuffix()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::StartWrite(uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AfterWrite()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::WriteToFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::replace_substring(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::OpenNewFileForStreaming()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::AppendTraceEvent(v8::platform::tracing::TraceObject*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::NodeTraceWriter::FlushPrivate()",
    "type": "CPP"
  },
  {
    "name": "void std::deque<node::tracing::NodeTraceWriter::WriteRequest, std::allocator<node::tracing::NodeTraceWriter::WriteRequest> >::_M_push_back_aux<node::tracing::NodeTraceWriter::WriteRequest>(node::tracing::NodeTraceWriter::WriteRequest&&)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetAgent(node::tracing::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetAgent()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TraceEventHelper::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::GetTracingController()",
    "type": "CPP"
  },
  {
    "name": "node::SetTracingController(v8::TracingController*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::Create()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::CreateArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::TracedValue(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::EndArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteComma()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetNull(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginArray(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::BeginDictionary(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetBoolean(char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendNull()",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendBoolean(bool)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::WriteName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendAsTraceFormat(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetInteger(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendInteger(int)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendString(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetString(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::SetDouble(char const*, double)",
    "type": "CPP"
  },
  {
    "name": "node::tracing::TracedValue::AppendDouble(double)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::GetWindowSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SetRawMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::IsTTY(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::TTYWrap(node::Environment*, v8::Local<v8::Object>, int, int*)",
    "type": "CPP"
  },
  {
    "name": "_register_tty_wrap()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_tty_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::TTYWrap::~TTYWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetPeerName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::GetSockName()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStop()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnAlloc(uv_handle_s*, unsigned long, uv_buf_t*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::RecvStart()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::CreateSendWrap(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::Send(uv_buf_t*, unsigned long, sockaddr const*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStart(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::RecvStop(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::GetFD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Disconnect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetBroadcast(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Open(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastTTL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastLoopback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMulticastInterface(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::BufferSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnSendDone(node::ReqWrap<uv_udp_send_s>*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SendWrap(node::Environment*, v8::Local<v8::Object>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPListener::~UDPListener()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::~UDPWrapBase()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::listener() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::set_listener(node::UDPListener*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::FromObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrapBase::AddMethods(node::Environment*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::UDPWrap(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::sockaddr_for_family(int, char const*, unsigned short, sockaddr_storage*)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoBind(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Bind6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoConnect(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Connect6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SetSourceMembership(v8::FunctionCallbackInfo<v8::Value> const&, uv_membership)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::AddSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DropSourceSpecificMembership(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::DoSend(v8::FunctionCallbackInfo<v8::Value> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Send6(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::Instantiate(node::Environment*, node::AsyncWrap*, node::UDPWrap::SocketType)",
    "type": "CPP"
  },
  {
    "name": "_register_udp_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::OnRecv(long, uv_buf_t const&, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::OnRecv(uv_udp_s*, long, uv_buf_t const*, sockaddr const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::ReqWrap<uv_udp_send_s>::Cancel()",
    "type": "CPP"
  },
  {
    "name": "node::MakeLibuvRequestCallback<uv_udp_send_s, void (*)(uv_udp_send_s*, int)>::Wrapper(uv_udp_send_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "node::SendWrap::~SendWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "node::UDPWrap::~UDPWrap()",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getpeername>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::GetSockOrPeerName<node::UDPWrap, &uv_udp_getsockname>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::Utf8Value::Utf8Value(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::TwoByteValue::TwoByteValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::BufferValue::BufferValue(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::LowMemoryNotification()",
    "type": "CPP"
  },
  {
    "name": "node::GetCurrentTimeInMicroseconds()",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(char const*, uv_buf_t)",
    "type": "CPP"
  },
  {
    "name": "node::WriteFileSync(v8::Isolate*, char const*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::LocalTime(tm*)",
    "type": "CPP"
  },
  {
    "name": "node::SplitString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)",
    "type": "CPP"
  },
  {
    "name": "node::ReadFileSync(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::DiagnosticFilename::MakeFilename[abi:cxx11](unsigned long, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetProcessTitle[abi:cxx11](char const*)",
    "type": "CPP"
  },
  {
    "name": "node::GetHumanReadableProcessName[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::uv::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::uv::GetErrMap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::uv::ErrName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "_register_uv()",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_uv(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::uv::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::LargePagesError(int)",
    "type": "CPP"
  },
  {
    "name": "node::MapStaticCodeToLargePages()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Agent(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::~Agent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::StartIoThread()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ConnectToMainThread(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ReportUncaughtException(v8::Local<v8::Value>, v8::Local<v8::Message>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::PauseOnNextJavascriptStatement(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ToggleAsyncHook(v8::Isolate*, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::EnableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::DisableAsyncHook()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RegisterAsyncHook(v8::Isolate*, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskScheduled(v8_inspector::StringView const&, void*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskCanceled(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskStarted(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AsyncTaskFinished(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::AllAsyncTasksCanceled()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::RequestIoThreadStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::ContextCreated(v8::Local<v8::Context>, node::ContextInfo const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::IsActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::SetParentHandle(std::unique_ptr<node::inspector::ParentInspectorHandle, std::default_delete<node::inspector::ParentInspectorHandle> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetParentHandle(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::WaitForConnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWsUrl[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::GetWorkerManager()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Agent::Start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::DebugOptions const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, bool)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::muteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::unmuteMetrics(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endUserGesture()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::serializeToWebDriverValue(v8::Local<v8::Value>, int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::valueSubtype(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::descriptionForValueSubtype(v8::Local<v8::Context>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::isInspectableHeapObject(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::beginEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::endEnsureAllContextsInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleAPIMessage(int, v8::Isolate::MessageErrorLevel, v8_inspector::StringView const&, v8_inspector::StringView const&, unsigned int, unsigned int, v8_inspector::V8StackTrace*)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::memoryInfo(v8::Isolate*, v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTime(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeEnd(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleTimeStamp(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::consoleClear(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::canExecuteScripts(int)",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::generateUniqueId()",
    "type": "CPP"
  },
  {
    "name": "v8_inspector::V8InspectorClient::dispatchError(v8::Local<v8::Context>, v8::Local<v8::Message>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::quitMessageLoopOnPause()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runIfWaitingForDebugger(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::ensureDefaultContextInGroup(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::currentTimeMS()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_handler<void (), node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_invoke(std::_Any_data const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)::{lambda()#1}> const&, std::_Manager_operation)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::resourceNameToUrl(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::NodeInspectorClient, std::allocator<node::inspector::NodeInspectorClient>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::installAdditionalCommandLineAPI(v8::Local<v8::Context>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Backend::disable()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadInterface, std::allocator<node::inspector::MainThreadInterface>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::cancelTimer(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::runMessageLoopOnPause(int)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::WorkerManager, std::allocator<node::inspector::WorkerManager>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::WorkerManager*, std::default_delete<node::inspector::WorkerManager>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::~NodeInspectorClient()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::maxAsyncCallStackDepthChanged(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::~WorkerAgent()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::inspector::WorkerManager, std::default_delete<node::inspector::WorkerManager> >(std::unique_ptr<node::inspector::WorkerManager, std::default_delete<node::inspector::WorkerManager> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<void*, std::pair<void* const, node::TimerWrapHandle>, std::allocator<std::pair<void* const, node::TimerWrapHandle> >, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, node::TimerWrapHandle>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::NodeInspectorClient::startRepeatingTimer(double, void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::EndSession(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::MessageReceived(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetIds[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::InspectorIo(std::shared_ptr<node::inspector::MainThreadHandle>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::~InspectorIo()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::Start(std::shared_ptr<node::inspector::MainThreadHandle>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::ExclusiveAccess<node::HostPort, node::MutexBase<node::LibuvMutexTraits> > >, node::InspectPublishUid const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::StopAcceptingNewConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::ThreadMain(void*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIo::GetWsUrl[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::GetTargetUrl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::StartSession(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::AssignServer(node::inspector::InspectorSocketServer*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::RequestQueue, std::allocator<node::inspector::RequestQueue>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::~IoSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::IoSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorIoDelegate::~InspectorIoDelegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetDirectory[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetFilename[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetDirectory[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::GetFilename[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::GetDirectory[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerConnection(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "_register_profiler()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_profiler(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::GetFilename[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::WriteProfile(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::DispatchMessage(char const*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::TakeCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::StopCoverage()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::Start()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::StartProfilers(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::SendMessageToFrontend(v8_inspector::StringView const&)",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::End()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::type() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::ending() const",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8ProfilerConnection::V8ProfilerSessionDelegate::~V8ProfilerSessionDelegate()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8HeapProfilerConnection::~V8HeapProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CpuProfilerConnection::~V8CpuProfilerConnection()",
    "type": "CPP"
  },
  {
    "name": "node::profiler::V8CoverageConnection::~V8CoverageConnection()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned int, unsigned int, std::allocator<unsigned int>, std::__detail::_Identity, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<unsigned int, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "_register_inspector()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_inspector(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnClosed(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::OnDataReceivedCb(uv_stream_s*, long, uv_buf_t const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::ProtocolHandler(node::inspector::InspectorSocket*, std::unique_ptr<node::inspector::TcpHolder, node::FunctionDeleter<node::inspector::TcpHolder, &node::inspector::TcpHolder::DisconnectAndDispose> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ProtocolHandler::GetHost[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::TcpHolder(std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::SetHandler(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::WriteRaw(std::vector<char, std::allocator<char> > const&, void (*)(uv_write_s*, int))",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::DisconnectAndDispose(node::inspector::TcpHolder*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::TcpHolder::ReclaimUvBuf(uv_buf_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::~InspectorSocket()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Shutdown(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Accept(uv_stream_s*, std::unique_ptr<node::inspector::InspectorSocket::Delegate, std::default_delete<node::inspector::InspectorSocket::Delegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::AcceptUpgrade(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::CancelHandshake()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::GetHost[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::SwitchProtocol(node::inspector::ProtocolHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocket::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<char, std::allocator<char> >::_M_realloc_insert<char>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnWsFrame(std::vector<char, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::InspectorSocketServer(std::unique_ptr<node::inspector::SocketServerDelegate, std::default_delete<node::inspector::SocketServerDelegate> >, uv_loop_s*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, node::InspectPublishUid const&, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Session(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TerminateConnections()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::TargetExists(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Port() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Send(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::CloseServerSocket(node::inspector::ServerSocket*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::SocketSession(node::inspector::InspectorSocketServer*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Send(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::DetectPort()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::Listen(sockaddr*, uv_loop_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::~InspectorSocketServer()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::GetFrontendURL(bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::FormatWsAddress(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::PrintDebuggerReadyMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, char const*, bool, _IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionTerminated(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Accept(int, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::SocketConnectedCallback(uv_stream_s*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SessionStarted(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnSocketUpgrade(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::Start()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::SendListResponse(node::inspector::InspectorSocket*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::inspector::SocketSession*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::InspectorSocketServer::HandleGetRequest(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::OnHttpGet(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ServerSocket::FreeOnCloseCallback(uv_handle_s*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_erase(std::_Rb_tree_node<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::erase(int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<int, std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > >, std::_Select1st<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, std::less<int>, std::allocator<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::unique_ptr<node::inspector::SocketSession, std::default_delete<node::inspector::SocketSession> > > > >, int const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::SocketSession::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::_M_realloc_insert<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >(__gnu_cxx::__normal_iterator<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >*, std::vector<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >*, std::vector<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >, std::allocator<std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> > > > >, std::unique_ptr<node::inspector::ServerSocket, node::FunctionDeleter<node::inspector::ServerSocket, &node::inspector::InspectorSocketServer::CloseServerSocket> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::~MainThreadInterface()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::WaitForFrontendEvent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::DispatchMessages()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::RemoveObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObject(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::GetObjectIfExists(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Post(std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::Expired()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::MainThreadInterface(node::inspector::Agent*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadInterface::AddObject(int, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::MainThreadHandle::MakeDelegateThreadSafe(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::Utf8ToStringView(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::MainThreadHandle, std::allocator<node::inspector::MainThreadHandle>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Deque_base<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> >, std::allocator<std::unique_ptr<node::inspector::Request, std::default_delete<node::inspector::Request> > > >::_M_initialize_map(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::Deletable, std::default_delete<node::inspector::Deletable> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::toDouble(char const*, unsigned long, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::jsonToMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::binaryToMessage[abi:cxx11](std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF8[abi:cxx11](unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharactersUTF8(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromDouble[abi:cxx11](double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::builderAppendQuotedString(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseJSON(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::fromUTF16[abi:cxx11](unsigned short const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::CharacterCount(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::parseMessage(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringUtil::StringViewToUtf8[abi:cxx11](v8_inspector::StringView)",
    "type": "CPP"
  },
  {
    "name": "icu_71::StringByteSink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_71::StringByteSink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~StringByteSink()",
    "type": "CPP"
  },
  {
    "name": "icu_71::StringByteSink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::StringByteSink(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, int)",
    "type": "CPP"
  },
  {
    "name": "icu_71::StringByteSink<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::Append(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWhenWaitingForDisconnect(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::notifyWaitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<node::inspector::protocol::NodeRuntime::Frontend*, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::RuntimeAgent::~RuntimeAgent()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >(std::unique_ptr<node::inspector::protocol::NodeRuntime::Frontend, std::default_delete<node::inspector::protocol::NodeRuntime::Frontend> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::stop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::~TracingAgent()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::TracingAgent(node::Environment*, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::start(std::unique_ptr<node::inspector::protocol::NodeTracing::TraceConfig, std::default_delete<node::inspector::protocol::NodeTracing::TraceConfig> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::TracingAgent::getCategories(std::unique_ptr<node::inspector::protocol::Array<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::default_delete<node::inspector::protocol::Array<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeTracing::Frontend, std::allocator<node::inspector::protocol::NodeTracing::Frontend>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::disable()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::enable(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::WorkerAgent(std::weak_ptr<node::inspector::WorkerManager>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::Wire(node::inspector::protocol::UberDispatcher*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Send(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Receive(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::sendMessageToWorker(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::Detached(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::WorkerAgent::detach(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorkers::WorkerCreated(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::shared_ptr<node::inspector::MainThreadHandle>)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::inspector::protocol::NodeWorker::Frontend*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::~WorkerInfo()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::inspector::protocol::NodeWorkers, std::allocator<node::inspector::protocol::NodeWorkers>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::InspectorSession, std::default_delete<node::inspector::InspectorSession> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::ParentInspectorHandle(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::~ParentInspectorHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::Connect(std::unique_ptr<node::inspector::InspectorSessionDelegate, std::default_delete<node::inspector::InspectorSessionDelegate> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerFinished(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::NewParentHandle(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::RemoveAttachDelegate(int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::~WorkerManagerEventHandle()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetAutoAttach(std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::ParentInspectorHandle::WorkerStarted(std::shared_ptr<node::inspector::MainThreadHandle>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::WorkerStarted(unsigned long, node::inspector::WorkerInfo const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManager::SetWaitOnStartForDelegate(int, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::WorkerManagerEventHandle::SetWaitOnStart(bool)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<int, std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > >, std::allocator<std::pair<int const, std::unique_ptr<node::inspector::WorkerDelegate, std::default_delete<node::inspector::WorkerDelegate> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<unsigned long, std::pair<unsigned long const, node::inspector::WorkerInfo>, std::allocator<std::pair<unsigned long const, node::inspector::WorkerInfo> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, node::inspector::WorkerInfo>, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::AESCipherConfig(node::crypto::AESCipherConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::operator=(node::crypto::AESCipherConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherTraits::DoCipher(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoCipherMode, node::crypto::AESCipherConfig const&, node::crypto::ByteSource const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AES::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::WebCryptoCipherMode, node::crypto::AESCipherConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AES::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::AESCipherTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::~AESCipherConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::~AESCipherConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::~CryptoErrorStore()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::~CryptoErrorStore()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::AESCipherTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::AESCipherConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::AESCipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::AESCipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::AESCipherTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::AESCipherTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::AESCipherTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::AESCipherTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::AESCipherTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::AESCipherTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::~NodeBIO()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Ctrl(bio_st*, int, long, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Free(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::New(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Peek(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekMultiple(char**, unsigned long*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::GetMethod()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::NewFixed(char const*, unsigned long, node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryMoveReadHead()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FreeEmpty()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Read(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::IndexOf(char, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Gets(bio_st*, char*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::PeekWritable(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Commit(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::TryAllocateForWrite(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Write(bio_st*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Puts(bio_st*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::Reset()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::FromBIO(bio_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NodeBIO::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SSL_CTX_get_issuer(ssl_ctx_st*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSSLOCSPResponse(node::Environment*, ssl_st*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetTLSSession(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, std::unique_ptr<ssl_session_st, node::FunctionDeleter<ssl_session_st, &SSL_SESSION_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetTLSSession(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyPeerCertificate(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseSNIContext(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, node::BaseObjectPtrImpl<node::crypto::SecureContext, false>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloALPN(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloServerName(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetServerName(ssl_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetGroups(node::crypto::SecureContext*, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ErrorCode(long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorReason(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidationErrorCode(node::Environment*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ToV8Value(node::Environment*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSerialNumber(node::Environment*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetKeyUsage(node::Environment*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetFingerprintDigest(node::Environment*, evp_md_st const*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidTo(node::Environment*, x509_st*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetValidFrom(node::Environment*, x509_st*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SafeX509SubjectAltNamePrint(std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, X509_extension_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SafeX509InfoAccessPrint(std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, X509_extension_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSubjectAltNameString(node::Environment*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetInfoAccessString(node::Environment*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetIssuerString(node::Environment*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetSubject(node::Environment*, std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetClientHelloCiphers(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCipherInfo(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetEphemeralKey(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECPointToBuffer(node::Environment*, ec_group_st const*, ec_point_st const*, point_conversion_form_t, char const**)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetRawDERCertificate(node::Environment*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509ToObject(node::Environment*, x509_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetPeerCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, bool, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LogSecret(std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, char const*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyGenTraits::Setup(node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportTraits::AdditionalConfig(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::DSAKeyExportConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportTraits::DoExport(std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoKeyFormat, node::crypto::DSAKeyExportConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetDsaKeyDetail(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAAlg::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAAlg::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyPairParams::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyPairParams::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyPairParams::~DsaKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportConfig::~DSAKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyPairParams::~DsaKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportConfig::~DSAKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr_inplace<node::MutexBase<node::LibuvMutexTraits>, std::allocator<node::MutexBase<node::LibuvMutexTraits> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DSAKeyExportConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DsaKeyPairParams::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DSAKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DsaKeyPairParams>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DsaKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DSAKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::HKDFConfig(node::crypto::HKDFConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::operator=(node::crypto::HKDFConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFTraits::EncodeOutput(node::Environment*, node::crypto::HKDFConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFTraits::DeriveBits(node::Environment*, node::crypto::HKDFConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HKDFConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::~HKDFConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HKDFConfig::~HKDFConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::PBKDF2Config(node::crypto::PBKDF2Config&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::operator=(node::crypto::PBKDF2Config&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Traits::EncodeOutput(node::Environment*, node::crypto::PBKDF2Config const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Traits::DeriveBits(node::Environment*, node::crypto::PBKDF2Config const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Traits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::PBKDF2Config*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::~PBKDF2Config()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::~PBKDF2Config()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PBKDF2Config::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Init(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::Update(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SignBase(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Sign(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(node::crypto::ManagedEVPPKey const&, int, v8::Maybe<int> const&, node::crypto::DSASigEnc)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Verify(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(node::crypto::ManagedEVPPKey const&, node::crypto::ByteSource const&, int, v8::Maybe<int> const&, bool*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::SignConfiguration(node::crypto::SignConfiguration&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::operator=(node::crypto::SignConfiguration&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignTraits::EncodeOutput(node::Environment*, node::crypto::SignConfiguration const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::SignFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignTraits::DeriveBits(node::Environment*, node::crypto::SignConfiguration const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::VerifyFinal(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::SignConfiguration*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SignTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SignTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::SignTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::SignTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::~SignConfiguration()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignConfiguration::~SignConfiguration()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SignTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SignTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::SignTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SignBase::~SignBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Sign::~Sign()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Verify::~Verify()",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Sign>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Sign*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Verify>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Verify*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ArrayBufferOrViewContents<char>::ArrayBufferOrViewContents(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SignTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::SignTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::SignTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Timing::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Timing::TimingSafeEqual(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Timing::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::GetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::GetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::GetSSLCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CipherBase(node::Environment*, v8::Local<v8::Object>, node::crypto::CipherBase::CipherKind)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::IsAuthenticatedMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MaybePassAuthTagToOpenSSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAutoPadding(bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CheckCCMMessageLength(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Update(char const*, unsigned long, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(node::crypto::ArrayBufferOrViewContents<unsigned char> const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAAD(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Final(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SetAuthTag(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitAuthenticated(char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::CommonInit(char const*, evp_cipher_st const*, unsigned char const*, int, unsigned char const*, int, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(char const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(char const*, node::crypto::ByteSource const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::InitIv(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherBase::~CipherBase()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ArrayBufferOrViewContents<unsigned char>::ArrayBufferOrViewContents(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::CipherBase>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::CipherBase*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::array_push_back<evp_cipher_st, &EVP_CIPHER_fetch, &EVP_CIPHER_free, &EVP_get_cipherbyname, &EVP_CIPHER_get0_name>(evp_cipher_st const*, char const*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "bool node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(node::Environment*, node::crypto::ManagedEVPPKey const&, int, evp_md_st const*, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, node::crypto::ArrayBufferOrViewContents<unsigned char> const&, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_verify_recover_init, &EVP_PKEY_verify_recover>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_sign_init, &EVP_PKEY_sign>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)1, &EVP_PKEY_decrypt_init, &EVP_PKEY_decrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::PublicKeyCipher::Cipher<(node::crypto::PublicKeyCipher::Operation)0, &EVP_PKEY_encrypt_init, &EVP_PKEY_encrypt>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetFreeListLength(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::IsExtraRootCertsFileLoaded(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketCompatibilityCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Close(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::EnableTicketKeyCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetRootCertificates(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::CtxGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::TicketKeyCallback(ssl_st*, unsigned char*, unsigned char*, evp_cipher_ctx_st*, hmac_ctx_st*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionTimeout(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMinProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetMaxProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetOptions(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetTicketKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCipherSuites(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCiphers(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSessionIdContext(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetClientCertEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::~SecureContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LoadBIO(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetCert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::HasInstance(node::Environment*, v8::Local<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SecureContext(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Create(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::CreateSSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetNewSessionCallback(int (*)(ssl_st*, ssl_session_st*))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetGetSessionCallback(ssl_session_st* (*)(ssl_st*, unsigned char const*, int, int*))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetSelectSNIContextCallback(int (*)(ssl_st*, int*, void*))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetKeylogCallback(void (*)(ssl_st const*, char const*))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NewRootCertStore()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCACert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddRootCerts(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::UseExtraCaCerts(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetECDHCurve(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::AddCRL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetEngineKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SetDHParam(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::LoadPKCS12(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "std::vector<x509_st*, std::allocator<x509_st*> >::~vector()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecureContext::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<false>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::SecureContext::GetCertificate<true>(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<x509_st*, std::allocator<x509_st*> >::_M_realloc_insert<x509_st* const&>(__gnu_cxx::__normal_iterator<x509_st**, std::vector<x509_st*, std::allocator<x509_st*> > >, x509_st* const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetCurves(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::~ECDH()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCurveFromName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetOKPCurveFromName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ECDH(node::Environment*, v8::Local<v8::Object>, std::unique_ptr<ec_key_st, node::FunctionDeleter<ec_key_st, &EC_KEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyValidForCurve(std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::IsKeyPairValid()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsTraits::EncodeOutput(node::Environment*, node::crypto::ECDHBitsConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyGenTraits::Setup(node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportTraits::AdditionalConfig(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::ECKeyExportConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportTraits::DoExport(std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoKeyFormat, node::crypto::ECKeyExportConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportJWKEdKey(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GroupOrderSize(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetEcKeyDetail(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::BufferToPoint(node::Environment*, ec_group_st const*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ConvertKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::ECDHBitsConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsTraits::DeriveBits(node::Environment*, node::crypto::ECDHBitsConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ImportJWKEcKey(node::Environment*, v8::Local<v8::Object>, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportJWKEcKey(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyPairParams::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyPairParams::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyPairParams::~EcKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportConfig::~ECKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportConfig::~ECKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyPairParams::~EcKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECKeyExportConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDH::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EcKeyPairParams::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsConfig::~ECDHBitsConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ECDHBitsConfig::~ECDHBitsConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ToBN() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ECDHBitsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::EcKeyPairParams>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::~ManagedEVPPKey()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::~ManagedEVPPKey()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ECDHBitsTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::ECKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::EcKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Hmac(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::HmacConfig(node::crypto::HmacConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::operator=(node::crypto::HmacConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacTraits::DeriveBits(node::Environment*, node::crypto::HmacConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacTraits::EncodeOutput(node::Environment*, node::crypto::HmacConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(char const*, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::HmacInit(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HmacConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HmacTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HmacTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::~HmacConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HmacConfig::~HmacConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hmac::~Hmac()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HmacTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HmacTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::HmacTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hmac>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hmac*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HmacTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HmacTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesTraits::EncodeOutput(node::Environment*, node::crypto::RandomBytesConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesTraits::DeriveBits(node::Environment*, node::crypto::RandomBytesConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeTraits::DeriveBits(node::Environment*, node::crypto::RandomPrimeConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeTraits::DeriveBits(node::Environment*, node::crypto::CheckPrimeConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeTraits::EncodeOutput(node::Environment*, node::crypto::CheckPrimeConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Random::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeTraits::EncodeOutput(node::Environment*, node::crypto::RandomPrimeConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::RandomBytesConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::CheckPrimeConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::RandomPrimeConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Random::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesConfig::~RandomBytesConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesConfig::~RandomBytesConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeConfig::~CheckPrimeConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeConfig::~CheckPrimeConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeConfig::~RandomPrimeConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeConfig::~RandomPrimeConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomPrimeConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RandomBytesConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckPrimeConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomBytesTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::CheckPrimeTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RandomPrimeTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomBytesTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::CheckPrimeTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::RandomPrimeTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyGenTraits::Setup(node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportTraits::AdditionalConfig(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::RSAKeyExportConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportTraits::DoExport(std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoKeyFormat, node::crypto::RSAKeyExportConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::RSACipherConfig(node::crypto::RSACipherConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherTraits::DoCipher(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoCipherMode, node::crypto::RSACipherConfig const&, node::crypto::ByteSource const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportJWKRsaKey(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAAlg::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetRsaKeyDetail(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::WebCryptoCipherMode, node::crypto::RSACipherConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAAlg::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ImportJWKRsaKey(node::Environment*, v8::Local<v8::Object>, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyPairParams::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyPairParams::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyPairParams::~RsaKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportConfig::~RSAKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSACipherTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyPairParams::~RsaKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportConfig::~RSAKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::~RSACipherConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::~RSACipherConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSACipherTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RsaKeyPairParams::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSACipherConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RSAKeyExportConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::RSACipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::RSACipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::~CipherJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::RSACipherTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSACipherTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSACipherTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSAKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::RSACipherTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::RsaKeyPairParams>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::RsaKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CipherJob<node::crypto::RSACipherTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CipherJob<node::crypto::RSACipherTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::RSAKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::VerifySpkac(node::crypto::ArrayBufferOrViewContents<char> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportPublicKey(node::Environment*, node::crypto::ArrayBufferOrViewContents<char> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportChallenge(node::crypto::ArrayBufferOrViewContents<char> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportChallenge(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::VerifySpkac(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::ExportPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SPKAC::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::InitCryptoOnce()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetFipsCrypto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TestFipsCrypto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::VerifyCallback(int, x509_store_ctx_st*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CheckEntropy()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EntropySource(unsigned char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PasswordCallback(char*, int, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NoPasswordCallback(char*, int, int, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ProcessFipsOptions()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::InitCryptoOnce(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::Empty() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::~ByteSource()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::reset()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::operator=(node::crypto::ByteSource&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ReleaseToBackingStore()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::size() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromBIO(std::unique_ptr<bio_st, node::FunctionDeleter<bio_st, &BIO_free_all> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromEncodedString(node::Environment*, v8::Local<v8::String>, node::encoding)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromString(node::Environment*, v8::Local<v8::String>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromBuffer(v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromStringOrBuffer(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::NullTerminatedCopy(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromSymmetricKeyObjectHandle(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::FromSecretKeyBytes(node::Environment*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ByteSource(char const*, char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Allocated(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::Foreign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::error::Decorate(node::Environment*, v8::Local<v8::Object>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::EncodeBignum(node::Environment*, bignum_st const*, int, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetEncodedValue(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, bignum_st const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetCryptoJobMode(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Util::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::Capture()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ToArrayBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ByteSource::ToBuffer(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoErrorStore::ToException(node::Environment*, v8::Local<v8::String>) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ThrowCryptoError(node::Environment*, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetFipsCrypto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::LoadEngineById(char const*, node::crypto::CryptoErrorStore*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetEngine(char const*, unsigned int, node::crypto::CryptoErrorStore*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SetEngine(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Util::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<char (&) [256]>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char (&) [256])",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseRecordHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseExtension(unsigned short, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseTLSClientHello(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::ParseHeader(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ClientHelloParser::Parse(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyErrorGetter(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellman(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Init(char const*, int, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::VerifyContext()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyGenTraits::Setup(node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportTraits::AdditionalConfig(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::DHKeyExportConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportTraits::DoExport(std::shared_ptr<node::crypto::KeyObjectData>, node::crypto::WebCryptoKeyFormat, node::crypto::DHKeyExportConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsTraits::EncodeOutput(node::Environment*, node::crypto::DHBitsConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::GetDhKeyDetail(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsTraits::DeriveBits(node::Environment*, node::crypto::DHBitsConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GenerateKeys(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::DiffieHellmanGroup(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetKey(v8::FunctionCallbackInfo<v8::Value> const&, int (*)(dh_st*, bignum_st*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetField(v8::FunctionCallbackInfo<v8::Value> const&, bignum_st const* (*)(dh_st const*), char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrime(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetGenerator(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::GetPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::ComputeSecret(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::DHBitsConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::Stateless(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyPairParams::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyPairParams::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyPairParams::~DhKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportConfig::~DHKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >, int> const&, 1ul>(std::__detail::__variant::_Variant_storage<false, std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >, int> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::__variant::__erased_ctor<std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >&, std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >&&>(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::__variant::__erased_ctor<int&, int&&>(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHBitsTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportConfig::~DHKeyExportConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyPairParams::~DhKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "void std::__detail::__variant::__erased_dtor<std::__detail::__variant::_Variant_storage<false, std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >, int> const&, 0ul>(std::__detail::__variant::_Variant_storage<false, std::unique_ptr<bignum_st, node::FunctionDeleter<bignum_st, &BN_free> >, int> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHBitsTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DhKeyPairParams::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHKeyExportConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::~KeyExportJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsConfig::~DHBitsConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DHBitsConfig::~DHBitsConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHBitsTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DiffieHellman::~DiffieHellman()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHBitsTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::DHBitsTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::DHBitsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::DhKeyPairParams>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::DHBitsTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyExportJob<node::crypto::DHKeyExportTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::DhKeyGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::GetHashes(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashDigest(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Hash(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashInit(evp_md_st const*, v8::Maybe<unsigned int>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::HashConfig(node::crypto::HashConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::operator=(node::crypto::HashConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashTraits::EncodeOutput(node::Environment*, node::crypto::HashConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashTraits::DeriveBits(node::Environment*, node::crypto::HashConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::HashUpdate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::HashConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HashTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::~HashConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::~HashConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HashTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HashTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HashTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::HashConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HashTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HashTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::HashTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Hash::~Hash()",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::Decode<node::crypto::Hash>(v8::FunctionCallbackInfo<v8::Value> const&, void (*)(node::crypto::Hash*, v8::FunctionCallbackInfo<v8::Value> const&, char const*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "void node::crypto::array_push_back<evp_md_st, &EVP_MD_fetch, &EVP_MD_free, &EVP_get_digestbyname, &EVP_MD_get0_name>(evp_md_st const*, char const*, char const*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HashTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HashTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HashTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetSymmetricKeySize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::CreateNativeKeyObjectClass(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ManagedEVPPKey(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator=(node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::get() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::mutex() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::size_of_private_key() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::size_of_public_key() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPublicKeyEncodingFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyEncodingContext)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::KeyObjectData(node::crypto::ByteSource)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::KeyObjectData(node::crypto::KeyType, node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateSecret(node::crypto::ByteSource)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::CreateAsymmetric(node::crypto::KeyType, node::crypto::ManagedEVPPKey const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetAsymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::GetSymmetricKeySize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Initialize(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Create(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Data()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::KeyObjectHandle(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetAsymmetricKeyType(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportSecretKey() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPublicKey(node::crypto::AsymmetricKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportPrivateKey(node::crypto::PrivateKeyEncodingConfig const&) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PKEY_SPKI_Export(node::crypto::KeyObjectData*, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::PKEY_PKCS8_Export(node::crypto::KeyObjectData*, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Keys::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::InitECRaw(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::InitEDRaw(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ExportJWKInner(node::Environment*, std::shared_ptr<node::crypto::KeyObjectData>, v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::ExportJWK(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ToEncodedPublicKey(node::Environment*, node::crypto::ManagedEVPPKey, node::crypto::AsymmetricKeyEncodingConfig const&, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::ToEncodedPrivateKey(node::Environment*, node::crypto::ManagedEVPPKey, node::crypto::PrivateKeyEncodingConfig const&, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPrivateKeyEncodingFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyEncodingContext)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Export(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetParsedKey(node::Environment*, std::unique_ptr<evp_pkey_st, node::FunctionDeleter<evp_pkey_st, &EVP_PKEY_free> >&&, node::crypto::ParseKeyResult, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPrivateKeyFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, bool)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::GetPublicOrPrivateKeyFromJs(v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Init(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::Equals(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::GetKeyDetail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::InitJWK(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Keys::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::KeyObjectData*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedEVPPKey::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::~KeyObjectData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectData::~KeyObjectData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::KeyObjectTransferData::~KeyObjectTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyObjectHandle::~KeyObjectHandle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NativeKeyObject::~NativeKeyObject()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairGenTraits::Setup(node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int*, node::crypto::SecretKeyGenConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenTraits::DoKeyGen(node::Environment*, node::crypto::SecretKeyGenConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenTraits::EncodeKey(node::Environment*, node::crypto::SecretKeyGenConfig*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Keygen::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Keygen::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairParams::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairParams::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairParams::~NidKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenConfig::~SecretKeyGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairParams::~NidKeyPairParams()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenConfig::~SecretKeyGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::NidKeyPairParams::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::SecretKeyGenConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::~KeyGenJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::~KeyPairGenConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::SecretKeyGenTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyPairGenConfig<node::crypto::NidKeyPairParams>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::KeyPairGenTraits<node::crypto::NidKeyPairGenTraits> >::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::KeyGenJob<node::crypto::SecretKeyGenTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::ScryptConfig(node::crypto::ScryptConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::operator=(node::crypto::ScryptConfig&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptTraits::EncodeOutput(node::Environment*, node::crypto::ScryptConfig const&, node::crypto::ByteSource*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptTraits::DeriveBits(node::Environment*, node::crypto::ScryptConfig const&, node::crypto::ByteSource*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptTraits::AdditionalConfig(node::crypto::CryptoJobMode, v8::FunctionCallbackInfo<v8::Value> const&, unsigned int, node::crypto::ScryptConfig*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::~ScryptConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::~ScryptConfig()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ScryptConfig::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::GetAsyncWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::ClearError()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::Error() const",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::IsIPCPipe()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::GetFD()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::CreateShutdownWrap(v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::IsClosing()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::OnStreamAlloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EnableCertCb(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::IsAlive()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::RequestOCSP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EnableKeylogCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EnablePskCallback(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EndParser(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::IsSessionReused(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Renegotiate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetX509Certificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetPeerX509Certificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EnableSessionCallbacks(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EnableTrace(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetPeerCertificate(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetTLSTicket(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetWriteQueueSize(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetCipher(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetProtocol(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetEphemeralKeyInfo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetALPNNegotiatedProto(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::VerifyError(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetVerifyMode(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetServername(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetMaxSendFragment(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetALPNProtocols(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::PskClientCallback(ssl_st*, char const*, char*, unsigned int, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ocsp_response() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearOcspResponse()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ReleaseSession()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::InitSSL()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetSSLError(int) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::WaitForCertCb(void (*)(void*), void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetCACerts(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "_register_tls_wrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SelectSNIContextCallback(ssl_st*, int*, void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::CertCbDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::LoadSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::PskServerCallback(ssl_st*, char const*, unsigned char*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::diagnostic_name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetPskIdentityHint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetSharedSigalgs(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ExportKeyingMaterial(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetPeerFinished(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::GetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetSession(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SetOCSPResponse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SSLInfoCallback(ssl_st const*, int, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::TLSWrap(node::Environment*, v8::Local<v8::Object>, node::crypto::TLSWrap::Kind, node::StreamBase*, node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Wrap(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::ReadStop()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::ReadStart()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_tls_wrap(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::InvokeQueued(int, char const*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Destroy()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DestroySSL(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::~TLSWrap()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearIn()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::DoWrite(node::WriteWrap*, uv_buf_t*, unsigned long, uv_stream_s*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::EncOut()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::OnStreamAfterWrite(node::WriteWrap*, int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::ClearOut()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Start(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::DoShutdown(node::ShutdownWrap*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Cycle()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::NewSessionDoneCb()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnClientHelloParseEnd(void*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::NewSessionDone(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::TLSWrap::OnStreamRead(long, uv_buf_t const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::Receive(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::TLSWrap::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::Environment::SetProtoMethodNoSideEffect(v8::Local<v8::FunctionTemplate>, char const*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&))",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::crypto::SecureContext, false>::BaseObjectPtrImpl(node::crypto::SecureContext*)",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::crypto::TLSWrap, false>::BaseObjectPtrImpl(node::crypto::TLSWrap*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<v8::BackingStore, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<v8::BackingStore, std::default_delete<v8::BackingStore>, void>(std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::GetTransferMode() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CloneForMessaging() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckCA(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::GetIssuerCert(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Raw(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::ToLegacy(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::SerialNumber(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::KeyUsage(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Fingerprint(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Fingerprint256(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Fingerprint512(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Subject(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Issuer(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::ValidFrom(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::ValidTo(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::SubjectAltName(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::InfoAccess(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Pem(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::PublicKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Verify(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckPrivateKey(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::ManagedX509(std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::ManagedX509(node::crypto::ManagedX509 const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::operator=(node::crypto::ManagedX509 const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::GetConstructorTemplate(node::Environment*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckIssued(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::HasInstance(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Initialize(node::Environment*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509Certificate(node::Environment*, v8::Local<v8::Object>, std::shared_ptr<node::crypto::ManagedX509>, stack_st_X509*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::New(node::Environment*, std::shared_ptr<node::crypto::ManagedX509>, stack_st_X509*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::New(node::Environment*, std::unique_ptr<x509_st, node::FunctionDeleter<x509_st, &X509_free> >, stack_st_X509*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::GetCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::GetPeerCert(node::Environment*, std::unique_ptr<ssl_st, node::FunctionDeleter<ssl_st, &SSL_free> > const&, node::crypto::X509Certificate::GetPeerCertificateFlag)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::Parse(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckHost(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckIP(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::CheckEmail(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::Deserialize(node::Environment*, v8::Local<v8::Context>, std::unique_ptr<node::worker::TransferData, std::default_delete<node::worker::TransferData> >)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::ManagedX509*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::ManagedX509*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::ManagedX509*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::~ManagedX509()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::ManagedX509*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_ptr<node::crypto::ManagedX509*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::~ManagedX509()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::ManagedX509::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::~X509CertificateTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::X509CertificateTransferData::~X509CertificateTransferData()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::~X509Certificate()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::X509Certificate::~X509Certificate()",
    "type": "CPP"
  },
  {
    "name": "node::BaseObjectPtrImpl<node::crypto::X509Certificate, false>::BaseObjectPtrImpl(node::crypto::X509Certificate*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::Initialize(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::Local<v8::Context>, void*)",
    "type": "CPP"
  },
  {
    "name": "_register_crypto()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::RegisterExternalReferences(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "_register_external_reference_crypto(node::ExternalReferenceRegistry*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ScryptTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::SelfSize() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HKDFTraits>::IsNotIndicativeOfMemoryLeakAtExit() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::ToResult(v8::Local<v8::Value>*, v8::Local<v8::Value>*)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::~DeriveBitsJob()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ScryptTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HKDFTraits>::MemoryInfoName[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::New(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HKDFTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ScryptTraits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::Run(v8::FunctionCallbackInfo<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::HKDFTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HKDFTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::CryptoJob<node::crypto::ScryptTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ScryptTraits>::AfterThreadPoolWork(int)",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::HKDFTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::ScryptTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::CryptoJob<node::crypto::PBKDF2Traits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::MemoryInfo(node::MemoryTracker*) const",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::HKDFTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::ScryptTraits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to node::crypto::DeriveBitsJob<node::crypto::PBKDF2Traits>::DoThreadPoolWork()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::GetConfig()",
    "type": "CPP"
  },
  {
    "name": "node::native_module::NativeModuleLoader::LoadJavaScriptSource()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >*)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [12], node::UnionBytes>(char const (&) [12], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [13], node::UnionBytes>(char const (&) [13], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [15], node::UnionBytes>(char const (&) [15], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [20], node::UnionBytes>(char const (&) [20], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [17], node::UnionBytes>(char const (&) [17], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [18], node::UnionBytes>(char const (&) [18], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [10], node::UnionBytes>(char const (&) [10], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [7], node::UnionBytes>(char const (&) [7], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [14], node::UnionBytes>(char const (&) [14], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [8], node::UnionBytes>(char const (&) [8], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [6], node::UnionBytes>(char const (&) [6], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [4], node::UnionBytes>(char const (&) [4], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [5], node::UnionBytes>(char const (&) [5], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [3], node::UnionBytes>(char const (&) [3], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [11], node::UnionBytes>(char const (&) [11], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [26], node::UnionBytes>(char const (&) [26], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [16], node::UnionBytes>(char const (&) [16], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [21], node::UnionBytes>(char const (&) [21], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [19], node::UnionBytes>(char const (&) [19], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [23], node::UnionBytes>(char const (&) [23], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [22], node::UnionBytes>(char const (&) [22], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [27], node::UnionBytes>(char const (&) [27], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [30], node::UnionBytes>(char const (&) [30], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [24], node::UnionBytes>(char const (&) [24], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [29], node::UnionBytes>(char const (&) [29], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [34], node::UnionBytes>(char const (&) [34], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [32], node::UnionBytes>(char const (&) [32], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [28], node::UnionBytes>(char const (&) [28], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [31], node::UnionBytes>(char const (&) [31], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [33], node::UnionBytes>(char const (&) [33], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [37], node::UnionBytes>(char const (&) [37], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [25], node::UnionBytes>(char const (&) [25], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, node::UnionBytes> > >::_M_emplace_unique<char const (&) [36], node::UnionBytes>(char const (&) [36], node::UnionBytes&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asBoolean(bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asDouble(double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::asInteger(int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::asBinary(node::inspector::protocol::Binary*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::~UberDispatcher()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::~ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::~DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::~Callback()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::~ErrorSupport()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::pop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::hasErrors()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::remove(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::DictionaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::ListValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeLatinStringForJSON(unsigned char const*, unsigned int, std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::escapeWideStringForJSON(unsigned short const*, unsigned int, std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::Object(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::~Object()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::OK()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::FallThrough()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::WeakPtr(node::inspector::protocol::DispatcherBase*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::WeakPtr::~WeakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::Callback(std::unique_ptr<node::inspector::protocol::DispatcherBase::WeakPtr, std::default_delete<node::inspector::protocol::DispatcherBase::WeakPtr> >, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::dispose()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::fallThroughIfActive()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::DispatcherBase(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::~DispatcherBase()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::clearFrontend()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::UberDispatcher(node::inspector::protocol::FrontendChannel*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::registerBackend(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DispatcherBase, std::default_delete<node::inspector::protocol::DispatcherBase> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createResponse(int, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::createNotification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::InternalResponse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::Serializable, std::default_delete<node::inspector::protocol::Serializable> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::ReadTokenStart(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::cbor::MajorType*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteForEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::InitialByteFor32BitLengthByteString()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::IsCBORMessage(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeTrue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFalse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeNull()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthArrayStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeIndefiniteLengthMapStart()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeStop()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStop(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::NewCBOREncoder(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::~CBORTokenizer()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::TokenTag() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Status() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetInt32() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetDouble() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString8() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetString16WireRep() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetBinary() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::GetEnvelopeContents() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::ReadNextToken(bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::CBORTokenizer(node::inspector::protocol::span<unsigned char>)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::Next()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::EnterEnvelope()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetToken(node::inspector::protocol::cbor::CBORTokenTag, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::CBORTokenizer::SetError(node::inspector::protocol::Error)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::vector<unsigned char, std::allocator<unsigned char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::NewJSONEncoder(node::inspector::protocol::json::Platform const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, node::inspector::protocol::Status*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::findDispatcher(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getBoolean(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getInteger(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getDouble(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, double*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getObject(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::getArray(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::at[abi:cxx11](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeJSON(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::booleanProperty(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::integerProperty(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::doubleProperty(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, double) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::asString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::Error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InvalidParams(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::setName(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::canDispatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::setupRedirects(std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::push()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setObject(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setArray(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::ListValue, std::default_delete<node::inspector::protocol::ListValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setValue(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setBoolean(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setInteger(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setDouble(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, double)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::setString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::parseBinary(unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::pushValue(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::internals::WriteTokenStart(node::inspector::protocol::cbor::MajorType, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeInt32(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned char const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString8(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::AppendString8EntryToCBORMap(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatchResponse::InternalError()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString[abi:cxx11](char const*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Status::ToASCIIString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::toJSONString[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::errors[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::reportProtocolError(int, node::inspector::protocol::DispatchResponse::ErrorCode, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::sendResponse(int, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::Callback::sendIfActive(std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::DispatchResponse const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::parseCommand(node::inspector::protocol::Value*, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::UberDispatcher::dispatch(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ErrorSupport::addError(char const*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Object::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::parseJSONCharacters(unsigned short const*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeString16(node::inspector::protocol::span<unsigned short>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromUTF16(node::inspector::protocol::span<unsigned short>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeFromLatin1(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeDouble(double, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EncodeBinary(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::ListValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::writeBinary(std::vector<unsigned char, std::allocator<unsigned char> >*) const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::EnvelopeEncoder::EncodeStart(std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::cbor::ParseCBOR(node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertCBORToJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DispatcherBase::weakPtr()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned short>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ParseJSON(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, node::inspector::protocol::StreamingParserHandler*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::json::ConvertJSONToCBOR(node::inspector::protocol::json::Platform const&, node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::Value::~Value()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::FundamentalValue::~FundamentalValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::BinaryValue::~BinaryValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::~StringValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::SerializedValue::~SerializedValue()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalResponse::~InternalResponse()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::StringValue::create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::DictionaryValue::create()",
    "type": "CPP"
  },
  {
    "name": "unsigned char& std::vector<unsigned char, std::allocator<unsigned char> >::emplace_back<unsigned char>(unsigned char&&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::cbor::MajorType, unsigned long, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned short>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::DictionaryValue::set<node::inspector::protocol::Value>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >*, std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > > >, std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >& std::vector<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >, std::allocator<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > > >::emplace_back<std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> > >(std::unique_ptr<node::inspector::protocol::Value, std::default_delete<node::inspector::protocol::Value> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::internals::WriteTokenStartTmpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(node::inspector::protocol::cbor::MajorType, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeBinaryTmpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeString8Tmpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromUTF16Tmpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(node::inspector::protocol::span<unsigned short>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(node::inspector::protocol::span<unsigned char>, std::vector<unsigned char, std::allocator<unsigned char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeFromLatin1Tmpl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(node::inspector::protocol::span<unsigned char>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "void node::inspector::protocol::cbor::EncodeStartTmpl<std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short&&)",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<node::inspector::protocol::DispatcherBase::WeakPtr*, node::inspector::protocol::DispatcherBase::WeakPtr*, std::allocator<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Identity, std::equal_to<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::hash<node::inspector::protocol::DispatcherBase::WeakPtr*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<node::inspector::protocol::DispatcherBase::WeakPtr*, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::vector<unsigned short, std::allocator<unsigned short> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short const&>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short const&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<node::inspector::protocol::cbor::EnvelopeEncoder*, std::vector<node::inspector::protocol::cbor::EnvelopeEncoder, std::allocator<node::inspector::protocol::cbor::EnvelopeEncoder> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::disable(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::enable(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::detach(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::sendMessageToWorker(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::WorkerInfo::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawJSONNotification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::attachedToWorker(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::NodeWorker::WorkerInfo, std::default_delete<node::inspector::protocol::NodeWorker::WorkerInfo> >, bool)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::detachedFromWorker(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Frontend::receivedMessageFromWorker(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::dispatch(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeWorker::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::canDispatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::~DetachedFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::InternalRawNotification::~InternalRawNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::~ReceivedMessageFromWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::~AttachedToWorkerNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::AttachedToWorkerNotification::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::DetachedFromWorkerNotification::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeWorker::ReceivedMessageFromWorkerNotification::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeWorker::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::stop(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::getCategories(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::toValue() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::dataCollected(std::unique_ptr<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue>, std::default_delete<node::inspector::protocol::Array<node::inspector::protocol::DictionaryValue> > >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::tracingComplete()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawJSONNotification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::start(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::dispatch(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeTracing::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::canDispatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::fromValue(node::inspector::protocol::Value*, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::clone() const",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::~TraceConfig()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::~DataCollectedNotification()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::TraceConfig::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToBinary()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeTracing::DataCollectedNotification::serializeToJSON[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeTracing::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "void std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > >::_M_realloc_insert<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >*, std::vector<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, std::allocator<std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> > > > >, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >&&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::notifyWhenWaitingForDisconnect(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::waitingForDisconnect()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::flush()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawJSONNotification(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Frontend::sendRawCBORNotification(std::vector<unsigned char, std::allocator<unsigned char> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::dispatch(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::Dispatcher::wire(node::inspector::protocol::UberDispatcher*, node::inspector::protocol::NodeRuntime::Backend*)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::canDispatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "node::inspector::protocol::NodeRuntime::DispatcherImpl::~DispatcherImpl()",
    "type": "CPP"
  },
  {
    "name": "std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, void (node::inspector::protocol::NodeRuntime::DispatcherImpl::*)(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<node::inspector::protocol::DictionaryValue, std::default_delete<node::inspector::protocol::DictionaryValue> >, node::inspector::protocol::ErrorSupport*)> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::PostGarbageCollection()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::FunctionCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CustomArguments<v8::PropertyCallbackInfo<v8::Value> >::IterateInstance(v8::internal::RootVisitor*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Relocatable::~Relocatable()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::~PropertyCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::~FunctionCallbackArguments()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyCallbackArguments::PropertyCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::Object, v8::internal::JSObject, v8::Maybe<v8::internal::ShouldThrow>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FunctionCallbackArguments::FunctionCallbackArguments(v8::internal::Isolate*, v8::internal::Object, v8::internal::HeapObject, v8::internal::Object, v8::internal::HeapObject, unsigned long*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateRemoteObject(v8::internal::Handle<v8::internal::ObjectTemplateInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::Intrinsic, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddAccessorProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::PropertyAttributes)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::AddNativeDataProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::TemplateInfo>, v8::internal::Handle<v8::internal::AccessorInfo>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::CreateApiFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::InstanceType, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NativeContext>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateFunction(v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::MaybeHandle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ApiNatives::InstantiateObject(v8::internal::Isolate*, v8::internal::Handle<v8::internal::ObjectTemplateInfo>, v8::internal::Handle<v8::internal::JSReceiver>)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TracePrologue(v8::EmbedderHeapTracer::TraceFlags)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::TraceEpilogue(v8::EmbedderHeapTracer::TraceSummary*)",
    "type": "CPP"
  },
  {
    "name": "v8::TaskRunner::NonNestableTasksEnabled() const",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::GetNativeFunctionTemplate(v8::Isolate*, v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::OutputStream::GetChunkSize()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Logger::DefaultEventLoggerSentinel(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::HeapSnapshotJSONSerializer::StringsMatch(void*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetWasmModuleTransferId(v8::Isolate*, v8::Local<v8::WasmModuleObject>)",
    "type": "CPP"
  },
  {
    "name": "v8::Isolate::IsHeapLimitIncreasedForDebugging()",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::IsRootForNonTracingGC(v8::TracedReference<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "v8::EmbedderHeapTracer::ResetHandleInNonTracingGC(v8::TracedReference<v8::Value> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::ReallocateBufferMemory(void*, unsigned long, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::FreeBufferMemory(void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::~Extension()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::~Delegate()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::InterruptsScope::~InterruptsScope()",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::Allocator::Reallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_counted_deleter<v8::internal::BackingStore*, std::default_delete<v8::internal::BackingStore>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::GetWasmModuleFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::ReadHostObject(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::GetSharedArrayBufferFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::Delegate::GetSharedValueFromId(v8::Isolate*, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetSharedArrayBufferId(v8::Isolate*, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::GetSharedValueId(v8::Isolate*, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Delegate::WriteHostObject(v8::Isolate*, v8::Local<v8::Object>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::tracing::ScopedTracer::~ScopedTracer()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::heap_internals::GenerationalBarrierInternal(v8::internal::HeapObject, unsigned long, v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::WriteBarrier::Marking(v8::internal::HeapObject, v8::internal::FullObjectSlot, v8::internal::Object)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::WriteBarrier::Marking(v8::internal::HeapObject, v8::internal::FullHeapObjectSlot, v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ReadOnlyHeap::GetReadOnlyRoots(v8::internal::HeapObject)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DoubleToInt32(double)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FixedArray::set(int, v8::internal::Object)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::LookupIterator::LookupIterator(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Name>, unsigned long, v8::internal::Handle<v8::internal::Object>, v8::internal::LookupIterator::Configuration)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PropertyKey::PropertyKey(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Name>)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PrototypeIterator::Advance()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Map::instance_type() const",
    "type": "CPP"
  },
  {
    "name": "v8::IsExecutionTerminatingCheck(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::NestedTimedHistogramScope::NestedTimedHistogramScope(v8::internal::NestedTimedHistogram*, v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::NestedTimedHistogramScope::~NestedTimedHistogramScope()",
    "type": "CPP"
  },
  {
    "name": "v8::internal::PauseNestedTimedHistogramScope::~PauseNestedTimedHistogramScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Utils::ReportApiFailure(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrigin::HostDefinedOptions() const",
    "type": "CPP"
  },
  {
    "name": "v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetSnapshotDataBlob(v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SnapshotCreator(v8::Isolate*, long const*, v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SnapshotCreator(long const*, v8::StartupData*)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::~SnapshotCreator()",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::GetIsolate()",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::SetDefaultContext(v8::Local<v8::Context>, v8::SerializeInternalFieldsCallback)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::AddData(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SnapshotCreator::AddData(v8::Local<v8::Context>, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::StartupData::CanBeRehashed() const",
    "type": "CPP"
  },
  {
    "name": "v8::StartupData::IsValid() const",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetDcheckErrorHandler(void (*)(char const*, int, char const*))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromString(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromString(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFlagsFromCommandLine(int*, char**, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::RegisteredExtension(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::Register(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::RegisteredExtension::UnregisterAll()",
    "type": "CPP"
  },
  {
    "name": "v8::RegisterExtension(std::unique_ptr<v8::Extension, std::default_delete<v8::Extension> >)",
    "type": "CPP"
  },
  {
    "name": "v8::Extension::Extension(char const*, char const*, int, char const**, int)",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::ConfigureDefaultsFromHeapSize(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ResourceConstraints::ConfigureDefaults(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::GlobalizeTracedReference(v8::internal::Isolate*, unsigned long*, unsigned long*, v8::internal::GlobalHandleStoreMode)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::MoveTracedReference(unsigned long**, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CopyTracedReference(unsigned long const* const*, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DisposeTracedReference(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::GlobalizeReference(v8::internal::Isolate*, unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::CopyGlobalReference(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::MoveGlobalReference(unsigned long**, unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::MakeWeak(unsigned long*, void*, void (*)(v8::WeakCallbackInfo<void> const&), v8::WeakCallbackType)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::MakeWeak(unsigned long**)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::ClearWeak(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::AnnotateStrongRetainer(unsigned long*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::DisposeGlobal(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::Eternalize(v8::Isolate*, v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::FromJustIsNothing()",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::ToLocalEmpty()",
    "type": "CPP"
  },
  {
    "name": "v8::api_internal::InternalFieldOutOfBounds(int)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::HandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::Initialize(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::~HandleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::NumberOfHandles(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::HandleScope::CreateHandle(v8::internal::Isolate*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::EscapableHandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::Escape(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::EscapableHandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::SealHandleScope(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::~SealHandleScope()",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::SealHandleScope::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsFixedArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsValue() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsPrivate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsObjectTemplate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsFunctionTemplate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Data::IsContext() const",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Enter()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Exit()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::BackupIncumbentScope::BackupIncumbentScope(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::BackupIncumbentScope::~BackupIncumbentScope()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetNumberOfEmbedderDataFields()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SlowGetEmbedderData(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetEmbedderData(int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SlowGetAlignedPointerFromEmbedderData(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetAlignedPointerInEmbedderData(int, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::Set(v8::Local<v8::Name>, v8::Local<v8::Data>, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetPrivate(v8::Local<v8::Private>, v8::Local<v8::Data>, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetAccessorProperty(v8::Local<v8::Name>, v8::Local<v8::FunctionTemplate>, v8::Local<v8::FunctionTemplate>, v8::PropertyAttribute, v8::AccessControl)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::PrototypeTemplate()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetPrototypeProviderTemplate(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::Inherit(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Signature::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::AccessorSignature::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetCallHandler(void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::SideEffectType, v8::MemorySpan<v8::CFunction const> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::New(v8::Isolate*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType, v8::CFunction const*, unsigned short, unsigned short, unsigned short)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::NewWithCFunctionOverloads(v8::Isolate*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::Local<v8::Signature>, int, v8::ConstructorBehavior, v8::SideEffectType, v8::MemorySpan<v8::CFunction const> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::NewWithCache(v8::Isolate*, void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Private>, v8::Local<v8::Value>, v8::Local<v8::Signature>, int, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::InstanceTemplate()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetLength(int)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetClassName(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::SetAcceptAnyReceiver(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::ReadOnlyPrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::RemovePrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::New(v8::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::New(v8::internal::Isolate*, v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetNativeDataProperty(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::AccessControl, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetLazyDataProperty(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), v8::Local<v8::Value>, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::Template::SetIntrinsicDataProperty(v8::Local<v8::Name>, v8::Intrinsic, v8::PropertyAttribute)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::String>, void (*)(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessor(v8::Local<v8::Name>, void (*)(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&), void (*)(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&), v8::Local<v8::Value>, v8::AccessControl, v8::PropertyAttribute, v8::Local<v8::AccessorSignature>, v8::SideEffectType, v8::SideEffectType)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetHandler(v8::NamedPropertyHandlerConfiguration const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::MarkAsUndetectable()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessCheckCallback(bool (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>), v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetAccessCheckCallbackAndHandler(bool (*)(v8::Local<v8::Context>, v8::Local<v8::Object>, v8::Local<v8::Value>), v8::NamedPropertyHandlerConfiguration const&, v8::IndexedPropertyHandlerConfiguration const&, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetHandler(v8::IndexedPropertyHandlerConfiguration const&)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetCallAsFunctionHandler(void (*)(v8::FunctionCallbackInfo<v8::Value> const&), v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::InternalFieldCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetInternalFieldCount(int)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::IsImmutableProto() const",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetImmutableProto()",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::IsCodeLike() const",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::SetCodeLike()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedData::CachedData(unsigned char const*, int, v8::ScriptCompiler::CachedData::BufferPolicy)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedData::~CachedData()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StreamedSource::StreamedSource(std::unique_ptr<v8::ScriptCompiler::ExternalSourceStream, std::default_delete<v8::ScriptCompiler::ExternalSourceStream> >, v8::ScriptCompiler::StreamedSource::Encoding)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StreamedSource::~StreamedSource()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::BindToCurrentContext()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetId() const",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetLineNumber(int)",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetScriptName()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetSourceURL()",
    "type": "CPP"
  },
  {
    "name": "v8::UnboundScript::GetSourceMappingURL()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrModule::GetResourceName()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrModule::GetHostDefinedOptions()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrModule::HostDefinedOptions()",
    "type": "CPP"
  },
  {
    "name": "v8::Script::GetUnboundScript()",
    "type": "CPP"
  },
  {
    "name": "v8::Script::GetResourceName()",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::New(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Set(v8::Isolate*, int, v8::Local<v8::Primitive>)",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::Get(v8::Isolate*, int)",
    "type": "CPP"
  },
  {
    "name": "v8::PrimitiveArray::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FixedArray::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::FixedArray::Get(v8::Local<v8::Context>, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::ModuleRequest::GetSpecifier() const",
    "type": "CPP"
  },
  {
    "name": "v8::ModuleRequest::GetSourceOffset() const",
    "type": "CPP"
  },
  {
    "name": "v8::ModuleRequest::GetImportAssertions() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetStatus() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetException() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleRequests() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::SourceOffsetToLocation(int) const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetModuleNamespace()",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetUnboundModuleScript()",
    "type": "CPP"
  },
  {
    "name": "v8::Module::ScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::IsGraphAsync() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::IsSourceTextModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::IsSyntheticModule() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::GetIdentityHash() const",
    "type": "CPP"
  },
  {
    "name": "v8::Module::CreateSyntheticModule(v8::Isolate*, v8::Local<v8::String>, std::vector<v8::Local<v8::String>, std::allocator<v8::Local<v8::String> > > const&, v8::MaybeLocal<v8::Value> (*)(v8::Local<v8::Context>, v8::Local<v8::Module>))",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ScriptStreamingTask::Run()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StartStreaming(v8::Isolate*, v8::ScriptCompiler::StreamedSource*, v8::ScriptType)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ConsumeCodeCacheTask::ConsumeCodeCacheTask(std::unique_ptr<v8::internal::BackgroundDeserializeTask, std::default_delete<v8::internal::BackgroundDeserializeTask> >)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ConsumeCodeCacheTask::~ConsumeCodeCacheTask()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::ConsumeCodeCacheTask::Run()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::StartConsumingCodeCache(v8::Isolate*, std::unique_ptr<v8::ScriptCompiler::CachedData, std::default_delete<v8::ScriptCompiler::CachedData> >)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CachedDataVersionTag()",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCache(v8::Local<v8::UnboundScript>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCache(v8::Local<v8::UnboundModuleScript>)",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptCompiler::CreateCodeCacheForFunction(v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::TryCatch(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::~TryCatch()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::HasCaught() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::CanContinue() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::HasTerminated() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::ReThrow()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Exception() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Message() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::Reset()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::ResetInternal()",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::SetVerbose(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::IsVerbose() const",
    "type": "CPP"
  },
  {
    "name": "v8::TryCatch::SetCaptureMessage(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Message::Get() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetIsolate() const",
    "type": "CPP"
  },
  {
    "name": "v8::ScriptOrigin::VerifyHostDefinedOptions() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetScriptOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetScriptResourceName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStackTrace() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetLineNumber(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartPosition() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndPosition() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::ErrorLevel() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartColumn() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetWasmFunctionIndex() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetStartColumn(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndColumn() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetEndColumn(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::IsSharedCrossOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::IsOpaque() const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetSource(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::GetSourceLine(v8::Local<v8::Context>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Message::PrintCurrentStackTrace(v8::Isolate*, std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::GetFrame(v8::Isolate*, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::GetFrameCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::CurrentStackTrace(v8::Isolate*, int, v8::StackTrace::StackTraceOptions)",
    "type": "CPP"
  },
  {
    "name": "v8::StackTrace::CurrentScriptNameOrSourceURL(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetLocation() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptName() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptNameOrSourceURL() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptSource() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetScriptSourceMappingURL() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::GetFunctionName() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsEval() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsConstructor() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsWasm() const",
    "type": "CPP"
  },
  {
    "name": "v8::StackFrame::IsUserJavaScript() const",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::ValueSerializer(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::ValueSerializer(v8::Isolate*, v8::ValueSerializer::Delegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::~ValueSerializer()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteHeader()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::Release()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::TransferArrayBuffer(unsigned int, v8::Local<v8::ArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteUint32(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteUint64(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteDouble(double)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueSerializer::WriteRawBytes(void const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ValueDeserializer(v8::Isolate*, unsigned char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ValueDeserializer(v8::Isolate*, unsigned char const*, unsigned long, v8::ValueDeserializer::Delegate*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::~ValueDeserializer()",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::SetSupportsLegacyWireFormat(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::GetWireFormatVersion() const",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::TransferArrayBuffer(unsigned int, v8::Local<v8::ArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::TransferSharedArrayBuffer(unsigned int, v8::Local<v8::SharedArrayBuffer>)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadUint32(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadUint64(unsigned long*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadDouble(double*)",
    "type": "CPP"
  },
  {
    "name": "v8::ValueDeserializer::ReadRawBytes(unsigned long, void const**)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsUndefined() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsNull() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsTrue() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFalse() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::FullIsString() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSymbol() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArrayBuffer() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArrayBufferView() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsTypedArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint8Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt8Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint16Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt16Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFloat32Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsFloat64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint8ClampedArray() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigUint64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigInt64Array() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsDataView() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSharedArrayBuffer() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigInt() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsProxy() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsArgumentsObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBigIntObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBooleanObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNumberObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsStringObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSymbolObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsDate() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsMap() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSet() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWasmMemoryObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWasmModuleObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWeakMap() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsWeakSet() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsBoolean() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsInt32() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsUint32() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsNativeError() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsRegExp() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsAsyncFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsGeneratorFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsGeneratorObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsMapIterator() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsSetIterator() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsPromise() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::IsModuleNamespaceObject() const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::BooleanValue(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::ToBoolean(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::internal::DecodeExternalPointerImpl(v8::internal::Isolate const*, unsigned long, v8::internal::ExternalPointerTag)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::IsolateFromNeverReadOnlySpaceObject(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::ShouldThrowOnError(v8::internal::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::CanHaveInternalField(int)",
    "type": "CPP"
  },
  {
    "name": "v8::internal::Internals::CheckInitializedImpl(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::External::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Boolean::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Name::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::String::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Private::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FixedArray::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::ModuleRequest::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Module::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Number::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Map::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Set::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Promise::Resolver::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Proxy::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmMemoryObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::WasmModuleObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::~BackingStore()",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::Data() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::ByteLength() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::IsShared() const",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::Reallocate(v8::Isolate*, std::unique_ptr<v8::BackingStore, std::default_delete<v8::BackingStore> >, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::BackingStore::EmptyDeleter(void*, unsigned long, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBuffer::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::ArrayBufferView::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::TypedArray::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int8Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint16Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int16Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Int32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Float32Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Float64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Uint8ClampedArray::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigUint64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigInt64Array::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::DataView::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::SharedArrayBuffer::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Date::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::StringObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::SymbolObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::NumberObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BigIntObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::BooleanObject::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::RegExp::CheckCast(v8::Value*)",
    "type": "CPP"
  },
  {
    "name": "v8::Value::StrictEquals(v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::SameValue(v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::Value::TypeOf(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor()",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>, bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::PropertyDescriptor(v8::Local<v8::Value>, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::~PropertyDescriptor()",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::value() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::get() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_value() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_get() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_set() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::writable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_writable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set_enumerable(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::enumerable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_enumerable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::set_configurable(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::configurable() const",
    "type": "CPP"
  },
  {
    "name": "v8::PropertyDescriptor::has_configurable() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetPrototype()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::FindInstanceInPrototypeChain(v8::Local<v8::FunctionTemplate>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetConstructorName()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAccessorProperty(v8::Local<v8::Name>, v8::Local<v8::Function>, v8::Local<v8::Function>, v8::PropertyAttribute, v8::AccessControl)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasNamedLookupInterceptor() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::HasIndexedLookupInterceptor() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::Clone()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CreationContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::CreationContext(v8::PersistentBase<v8::Object> const&)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetCreationContext()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetCreationContextChecked()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::GetIdentityHash()",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsCallable() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsConstructor() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsApiWrapper() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::IsUndetectable() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::SetName(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetInferredName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetDebugName() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptOrigin() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptLineNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetScriptColumnNumber() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetUnboundScript() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::ScriptId() const",
    "type": "CPP"
  },
  {
    "name": "v8::Function::GetBoundFunction() const",
    "type": "CPP"
  },
  {
    "name": "v8::Name::GetIdentityHash()",
    "type": "CPP"
  },
  {
    "name": "v8::String::Length() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::ContainsOnlyOneByteHelper::CheckCons(v8::internal::ConsString)",
    "type": "CPP"
  },
  {
    "name": "v8::String::ContainsOnlyOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::Utf8Length(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::WriteUtf8(v8::Isolate*, char*, int, int*, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::WriteOneByte(v8::Isolate*, unsigned char*, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::Write(v8::Isolate*, unsigned short*, int, int, int) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsExternal() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsExternalTwoByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::IsExternalOneByte() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::VerifyExternalStringResource(v8::String::ExternalStringResource*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::VerifyExternalStringResourceBase(v8::String::ExternalStringResourceBase*, v8::String::Encoding) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalStringResourceSlow() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResource::UpdateDataCache()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalStringResource::CheckCachedDataInvariants() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalOneByteStringResource::UpdateDataCache()",
    "type": "CPP"
  },
  {
    "name": "v8::String::ExternalOneByteStringResource::CheckCachedDataInvariants() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalStringResourceBaseSlow(v8::String::Encoding*) const",
    "type": "CPP"
  },
  {
    "name": "v8::String::GetExternalOneByteStringResource() const",
    "type": "CPP"
  },
  {
    "name": "v8::Symbol::Description(v8::Isolate*) const",
    "type": "CPP"
  },
  {
    "name": "v8::Private::Name() const",
    "type": "CPP"
  },
  {
    "name": "v8::Number::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Boolean::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Integer::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Int32::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Uint32::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::InternalFieldCount() const",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SlowGetInternalField(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetInternalField(int, v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SlowGetAlignedPointerFromInternalField(int)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAlignedPointerInInternalField(int, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::Object::SetAlignedPointerInInternalFields(int, int*, void**)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializePlatform(v8::Platform*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::DisposePlatform()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::Initialize(int)",
    "type": "CPP"
  },
  {
    "name": "v8::TryHandleWebAssemblyTrapPosix(int, siginfo_t*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::EnableWebAssemblyTrapHandler(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetFatalMemoryErrorCallback(void (*)(char const*, bool))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetEntropySource(bool (*)(unsigned char*, unsigned long))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::SetReturnAddressLocationResolver(unsigned long (*)(unsigned long))",
    "type": "CPP"
  },
  {
    "name": "v8::V8::Dispose()",
    "type": "CPP"
  },
  {
    "name": "v8::SharedMemoryStatistics::SharedMemoryStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapStatistics::HeapStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapSpaceStatistics::HeapSpaceStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapObjectStatistics::HeapObjectStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::HeapCodeStatistics::HeapCodeStatistics()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeICU(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeICUDefaultLocation(char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeExternalStartupData(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::InitializeExternalStartupDataFromFile(char const*)",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GetVersion()",
    "type": "CPP"
  },
  {
    "name": "v8::V8::GetSharedMemoryStatistics(v8::SharedMemoryStatistics*)",
    "type": "CPP"
  },
  {
    "name": "v8::NewContext(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::ObjectTemplate>, v8::MaybeLocal<v8::Value>, unsigned long, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::New(v8::Isolate*, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::ObjectTemplate>, v8::MaybeLocal<v8::Value>, v8::DeserializeInternalFieldsCallback, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::FromSnapshot(v8::Isolate*, unsigned long, v8::DeserializeInternalFieldsCallback, v8::ExtensionConfiguration*, v8::MaybeLocal<v8::Value>, v8::MicrotaskQueue*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetSecurityToken(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::UseDefaultSecurityToken()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetSecurityToken()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetIsolate()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetMicrotaskQueue()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::Global()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::DetachGlobal()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetExtrasBindingObject()",
    "type": "CPP"
  },
  {
    "name": "v8::Context::AllowCodeGenerationFromStrings(bool)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::IsCodeGenerationFromStringsAllowed() const",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetErrorMessageForCodeGenerationFromStrings(v8::Local<v8::String>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetAbortScriptExecution(void (*)(v8::Isolate*, v8::Local<v8::Context>))",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetContinuationPreservedEmbedderData() const",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetContinuationPreservedEmbedderData(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::SetPromiseHooks(v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>, v8::Local<v8::Function>)",
    "type": "CPP"
  },
  {
    "name": "v8::metrics::Recorder::GetContext(v8::Isolate*, v8::metrics::Recorder::ContextId)",
    "type": "CPP"
  },
  {
    "name": "v8::metrics::Recorder::GetContextId(v8::Local<v8::Context>)",
    "type": "CPP"
  },
  {
    "name": "v8::metrics::LongTaskStats::Get(v8::Isolate*)",
    "type": "CPP"
  },
  {
    "name": "v8::Context::GetDataFromSnapshotOnce(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "v8::ObjectTemplate::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::Signature::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::AccessorSignature::CheckCast(v8::Data*)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::HasInstance(v8::Local<v8::Value>)",
    "type": "CPP"
  },
  {
    "name": "v8::FunctionTemplate::IsLeafTemplateForApiObject(v8::Local<v8::Value>) const",
    "type": "CPP"
  },
  {
    "name": "v8::External::New(v8::Isolate*, void*)",
    "type": "CPP"
  },
  {
    "name": "v8::External::Value() const",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromUtf8Literal(v8::Isolate*, char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromUtf8(v8::Isolate*, char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromOneByte(v8::Isolate*, unsigned char const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "v8::String::NewFromTwoByte(v8::Isolate*, unsigned short const*, v8::NewStringType, int)",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libc-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "abort",
    "type": "CPP"
  },
  {
    "name": "__libc_init_first",
    "type": "CPP"
  },
  {
    "name": "__libc_start_main",
    "type": "CPP"
  },
  {
    "name": "gnu_get_libc_release",
    "type": "CPP"
  },
  {
    "name": "gnu_get_libc_version",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "iconv_open",
    "type": "CPP"
  },
  {
    "name": "iconv",
    "type": "CPP"
  },
  {
    "name": "iconv_close",
    "type": "CPP"
  },
  {
    "name": "__gconv_open",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_modules_db",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_alias_db",
    "type": "CPP"
  },
  {
    "name": "__gconv_transliterate",
    "type": "CPP"
  },
  {
    "name": "__gconv_get_cache",
    "type": "CPP"
  },
  {
    "name": "__gconv_create_spec",
    "type": "CPP"
  },
  {
    "name": "__gconv_destroy_spec",
    "type": "CPP"
  },
  {
    "name": "setlocale",
    "type": "CPP"
  },
  {
    "name": "localeconv",
    "type": "CPP"
  },
  {
    "name": "nl_langinfo",
    "type": "CPP"
  },
  {
    "name": "__nl_langinfo_l",
    "type": "CPP"
  },
  {
    "name": "__ctype_get_mb_cur_max",
    "type": "CPP"
  },
  {
    "name": "__newlocale",
    "type": "CPP"
  },
  {
    "name": "__duplocale",
    "type": "CPP"
  },
  {
    "name": "__freelocale",
    "type": "CPP"
  },
  {
    "name": "__uselocale",
    "type": "CPP"
  },
  {
    "name": "__assert_fail",
    "type": "CPP"
  },
  {
    "name": "__assert_perror_fail",
    "type": "CPP"
  },
  {
    "name": "__assert",
    "type": "CPP"
  },
  {
    "name": "isalnum",
    "type": "CPP"
  },
  {
    "name": "isalpha",
    "type": "CPP"
  },
  {
    "name": "iscntrl",
    "type": "CPP"
  },
  {
    "name": "isdigit",
    "type": "CPP"
  },
  {
    "name": "islower",
    "type": "CPP"
  },
  {
    "name": "isgraph",
    "type": "CPP"
  },
  {
    "name": "isprint",
    "type": "CPP"
  },
  {
    "name": "ispunct",
    "type": "CPP"
  },
  {
    "name": "isspace",
    "type": "CPP"
  },
  {
    "name": "isupper",
    "type": "CPP"
  },
  {
    "name": "isxdigit",
    "type": "CPP"
  },
  {
    "name": "tolower",
    "type": "CPP"
  },
  {
    "name": "toupper",
    "type": "CPP"
  },
  {
    "name": "isblank",
    "type": "CPP"
  },
  {
    "name": "_tolower",
    "type": "CPP"
  },
  {
    "name": "_toupper",
    "type": "CPP"
  },
  {
    "name": "toascii",
    "type": "CPP"
  },
  {
    "name": "isascii",
    "type": "CPP"
  },
  {
    "name": "__isblank_l",
    "type": "CPP"
  },
  {
    "name": "__isalnum_l",
    "type": "CPP"
  },
  {
    "name": "__isalpha_l",
    "type": "CPP"
  },
  {
    "name": "__iscntrl_l",
    "type": "CPP"
  },
  {
    "name": "__isdigit_l",
    "type": "CPP"
  },
  {
    "name": "__islower_l",
    "type": "CPP"
  },
  {
    "name": "__isgraph_l",
    "type": "CPP"
  },
  {
    "name": "__isprint_l",
    "type": "CPP"
  },
  {
    "name": "__ispunct_l",
    "type": "CPP"
  },
  {
    "name": "__isspace_l",
    "type": "CPP"
  },
  {
    "name": "__isupper_l",
    "type": "CPP"
  },
  {
    "name": "__isxdigit_l",
    "type": "CPP"
  },
  {
    "name": "__tolower_l",
    "type": "CPP"
  },
  {
    "name": "__toupper_l",
    "type": "CPP"
  },
  {
    "name": "__isctype",
    "type": "CPP"
  },
  {
    "name": "__ctype_b_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_toupper_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_tolower_loc",
    "type": "CPP"
  },
  {
    "name": "__ctype_init",
    "type": "CPP"
  },
  {
    "name": "bindtextdomain",
    "type": "CPP"
  },
  {
    "name": "bind_textdomain_codeset",
    "type": "CPP"
  },
  {
    "name": "__dcgettext",
    "type": "CPP"
  },
  {
    "name": "__dgettext",
    "type": "CPP"
  },
  {
    "name": "gettext",
    "type": "CPP"
  },
  {
    "name": "dcngettext",
    "type": "CPP"
  },
  {
    "name": "dngettext",
    "type": "CPP"
  },
  {
    "name": "ngettext",
    "type": "CPP"
  },
  {
    "name": "textdomain",
    "type": "CPP"
  },
  {
    "name": "catopen",
    "type": "CPP"
  },
  {
    "name": "catgets",
    "type": "CPP"
  },
  {
    "name": "catclose",
    "type": "CPP"
  },
  {
    "name": "__open_catalog",
    "type": "CPP"
  },
  {
    "name": "__isinfl",
    "type": "CPP"
  },
  {
    "name": "__isnanl",
    "type": "CPP"
  },
  {
    "name": "__finitel",
    "type": "CPP"
  },
  {
    "name": "copysignl",
    "type": "CPP"
  },
  {
    "name": "modfl",
    "type": "CPP"
  },
  {
    "name": "frexpl",
    "type": "CPP"
  },
  {
    "name": "__signbitl",
    "type": "CPP"
  },
  {
    "name": "ldexpl",
    "type": "CPP"
  },
  {
    "name": "__isinf",
    "type": "CPP"
  },
  {
    "name": "__isnan",
    "type": "CPP"
  },
  {
    "name": "__finite",
    "type": "CPP"
  },
  {
    "name": "copysign",
    "type": "CPP"
  },
  {
    "name": "modf",
    "type": "CPP"
  },
  {
    "name": "frexp",
    "type": "CPP"
  },
  {
    "name": "__signbit",
    "type": "CPP"
  },
  {
    "name": "ldexp",
    "type": "CPP"
  },
  {
    "name": "__isinff",
    "type": "CPP"
  },
  {
    "name": "__isnanf",
    "type": "CPP"
  },
  {
    "name": "__finitef",
    "type": "CPP"
  },
  {
    "name": "copysignf",
    "type": "CPP"
  },
  {
    "name": "modff",
    "type": "CPP"
  },
  {
    "name": "frexpf",
    "type": "CPP"
  },
  {
    "name": "__signbitf",
    "type": "CPP"
  },
  {
    "name": "ldexpf",
    "type": "CPP"
  },
  {
    "name": "__sigsetjmp",
    "type": "CPP"
  },
  {
    "name": "setjmp",
    "type": "CPP"
  },
  {
    "name": "_setjmp",
    "type": "CPP"
  },
  {
    "name": "__libc_siglongjmp",
    "type": "CPP"
  },
  {
    "name": "__libc_longjmp",
    "type": "CPP"
  },
  {
    "name": "bsd_signal",
    "type": "CPP"
  },
  {
    "name": "gsignal",
    "type": "CPP"
  },
  {
    "name": "killpg",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "sigprocmask",
    "type": "CPP"
  },
  {
    "name": "kill",
    "type": "CPP"
  },
  {
    "name": "sigpending",
    "type": "CPP"
  },
  {
    "name": "__sigsuspend",
    "type": "CPP"
  },
  {
    "name": "sigwait",
    "type": "CPP"
  },
  {
    "name": "sigblock",
    "type": "CPP"
  },
  {
    "name": "sigsetmask",
    "type": "CPP"
  },
  {
    "name": "__sigpause",
    "type": "CPP"
  },
  {
    "name": "sigpause",
    "type": "CPP"
  },
  {
    "name": "__xpg_sigpause",
    "type": "CPP"
  },
  {
    "name": "sigvec",
    "type": "CPP"
  },
  {
    "name": "sigstack",
    "type": "CPP"
  },
  {
    "name": "sigaltstack",
    "type": "CPP"
  },
  {
    "name": "siginterrupt",
    "type": "CPP"
  },
  {
    "name": "sigemptyset",
    "type": "CPP"
  },
  {
    "name": "sigfillset",
    "type": "CPP"
  },
  {
    "name": "sigaddset",
    "type": "CPP"
  },
  {
    "name": "sigdelset",
    "type": "CPP"
  },
  {
    "name": "sigismember",
    "type": "CPP"
  },
  {
    "name": "sigreturn",
    "type": "CPP"
  },
  {
    "name": "siggetmask",
    "type": "CPP"
  },
  {
    "name": "__sysv_signal",
    "type": "CPP"
  },
  {
    "name": "sigisemptyset",
    "type": "CPP"
  },
  {
    "name": "sigandset",
    "type": "CPP"
  },
  {
    "name": "sigorset",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "__sigtimedwait",
    "type": "CPP"
  },
  {
    "name": "sigwaitinfo",
    "type": "CPP"
  },
  {
    "name": "sigqueue",
    "type": "CPP"
  },
  {
    "name": "sighold",
    "type": "CPP"
  },
  {
    "name": "sigrelse",
    "type": "CPP"
  },
  {
    "name": "sigignore",
    "type": "CPP"
  },
  {
    "name": "sigset",
    "type": "CPP"
  },
  {
    "name": "atof",
    "type": "CPP"
  },
  {
    "name": "atoi",
    "type": "CPP"
  },
  {
    "name": "atol",
    "type": "CPP"
  },
  {
    "name": "atoll",
    "type": "CPP"
  },
  {
    "name": "bsearch",
    "type": "CPP"
  },
  {
    "name": "qsort_r",
    "type": "CPP"
  },
  {
    "name": "qsort",
    "type": "CPP"
  },
  {
    "name": "getenv",
    "type": "CPP"
  },
  {
    "name": "putenv",
    "type": "CPP"
  },
  {
    "name": "setenv",
    "type": "CPP"
  },
  {
    "name": "unsetenv",
    "type": "CPP"
  },
  {
    "name": "clearenv",
    "type": "CPP"
  },
  {
    "name": "__libc_secure_getenv",
    "type": "CPP"
  },
  {
    "name": "exit",
    "type": "CPP"
  },
  {
    "name": "on_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_atexit",
    "type": "CPP"
  },
  {
    "name": "__cxa_finalize",
    "type": "CPP"
  },
  {
    "name": "quick_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_at_quick_exit",
    "type": "CPP"
  },
  {
    "name": "__cxa_thread_atexit_impl",
    "type": "CPP"
  },
  {
    "name": "__call_tls_dtors",
    "type": "CPP"
  },
  {
    "name": "abs",
    "type": "CPP"
  },
  {
    "name": "imaxabs",
    "type": "CPP"
  },
  {
    "name": "llabs",
    "type": "CPP"
  },
  {
    "name": "div",
    "type": "CPP"
  },
  {
    "name": "imaxdiv",
    "type": "CPP"
  },
  {
    "name": "lldiv",
    "type": "CPP"
  },
  {
    "name": "mblen",
    "type": "CPP"
  },
  {
    "name": "mbstowcs",
    "type": "CPP"
  },
  {
    "name": "mbtowc",
    "type": "CPP"
  },
  {
    "name": "wcstombs",
    "type": "CPP"
  },
  {
    "name": "wctomb",
    "type": "CPP"
  },
  {
    "name": "srand",
    "type": "CPP"
  },
  {
    "name": "initstate",
    "type": "CPP"
  },
  {
    "name": "setstate",
    "type": "CPP"
  },
  {
    "name": "random",
    "type": "CPP"
  },
  {
    "name": "srandom_r",
    "type": "CPP"
  },
  {
    "name": "initstate_r",
    "type": "CPP"
  },
  {
    "name": "setstate_r",
    "type": "CPP"
  },
  {
    "name": "random_r",
    "type": "CPP"
  },
  {
    "name": "rand",
    "type": "CPP"
  },
  {
    "name": "rand_r",
    "type": "CPP"
  },
  {
    "name": "drand48",
    "type": "CPP"
  },
  {
    "name": "erand48",
    "type": "CPP"
  },
  {
    "name": "lrand48",
    "type": "CPP"
  },
  {
    "name": "nrand48",
    "type": "CPP"
  },
  {
    "name": "mrand48",
    "type": "CPP"
  },
  {
    "name": "jrand48",
    "type": "CPP"
  },
  {
    "name": "srand48",
    "type": "CPP"
  },
  {
    "name": "seed48",
    "type": "CPP"
  },
  {
    "name": "lcong48",
    "type": "CPP"
  },
  {
    "name": "drand48_r",
    "type": "CPP"
  },
  {
    "name": "erand48_r",
    "type": "CPP"
  },
  {
    "name": "lrand48_r",
    "type": "CPP"
  },
  {
    "name": "nrand48_r",
    "type": "CPP"
  },
  {
    "name": "mrand48_r",
    "type": "CPP"
  },
  {
    "name": "jrand48_r",
    "type": "CPP"
  },
  {
    "name": "srand48_r",
    "type": "CPP"
  },
  {
    "name": "seed48_r",
    "type": "CPP"
  },
  {
    "name": "lcong48_r",
    "type": "CPP"
  },
  {
    "name": "getrandom",
    "type": "CPP"
  },
  {
    "name": "getentropy",
    "type": "CPP"
  },
  {
    "name": "strfromf",
    "type": "CPP"
  },
  {
    "name": "strfromd",
    "type": "CPP"
  },
  {
    "name": "strfromf64x",
    "type": "CPP"
  },
  {
    "name": "__strtol_internal",
    "type": "CPP"
  },
  {
    "name": "strtol",
    "type": "CPP"
  },
  {
    "name": "__strtoul_internal",
    "type": "CPP"
  },
  {
    "name": "strtoul",
    "type": "CPP"
  },
  {
    "name": "__strtol_l",
    "type": "CPP"
  },
  {
    "name": "__strtoul_l",
    "type": "CPP"
  },
  {
    "name": "__strtof_internal",
    "type": "CPP"
  },
  {
    "name": "strtof",
    "type": "CPP"
  },
  {
    "name": "__strtod_internal",
    "type": "CPP"
  },
  {
    "name": "strtod",
    "type": "CPP"
  },
  {
    "name": "__strtold_internal",
    "type": "CPP"
  },
  {
    "name": "strtof64x",
    "type": "CPP"
  },
  {
    "name": "strtof32_l",
    "type": "CPP"
  },
  {
    "name": "__strtod_l",
    "type": "CPP"
  },
  {
    "name": "strtof64x_l",
    "type": "CPP"
  },
  {
    "name": "__strtof_nan",
    "type": "CPP"
  },
  {
    "name": "__strtod_nan",
    "type": "CPP"
  },
  {
    "name": "__strtold_nan",
    "type": "CPP"
  },
  {
    "name": "__libc_system",
    "type": "CPP"
  },
  {
    "name": "realpath",
    "type": "CPP"
  },
  {
    "name": "canonicalize_file_name",
    "type": "CPP"
  },
  {
    "name": "a64l",
    "type": "CPP"
  },
  {
    "name": "l64a",
    "type": "CPP"
  },
  {
    "name": "rpmatch",
    "type": "CPP"
  },
  {
    "name": "strfmon",
    "type": "CPP"
  },
  {
    "name": "__strfmon_l",
    "type": "CPP"
  },
  {
    "name": "getsubopt",
    "type": "CPP"
  },
  {
    "name": "__xpg_basename",
    "type": "CPP"
  },
  {
    "name": "fmtmsg",
    "type": "CPP"
  },
  {
    "name": "addseverity",
    "type": "CPP"
  },
  {
    "name": "strtoimax",
    "type": "CPP"
  },
  {
    "name": "strtoumax",
    "type": "CPP"
  },
  {
    "name": "wcstoimax",
    "type": "CPP"
  },
  {
    "name": "wcstoumax",
    "type": "CPP"
  },
  {
    "name": "getcontext",
    "type": "CPP"
  },
  {
    "name": "setcontext",
    "type": "CPP"
  },
  {
    "name": "makecontext",
    "type": "CPP"
  },
  {
    "name": "swapcontext",
    "type": "CPP"
  },
  {
    "name": "strfromf128",
    "type": "CPP"
  },
  {
    "name": "__strtof128_internal",
    "type": "CPP"
  },
  {
    "name": "strtof128",
    "type": "CPP"
  },
  {
    "name": "strtof128_l",
    "type": "CPP"
  },
  {
    "name": "__strtof128_nan",
    "type": "CPP"
  },
  {
    "name": "ctermid",
    "type": "CPP"
  },
  {
    "name": "cuserid",
    "type": "CPP"
  },
  {
    "name": "_IO_vfprintf",
    "type": "CPP"
  },
  {
    "name": "vprintf",
    "type": "CPP"
  },
  {
    "name": "__printf_fp",
    "type": "CPP"
  },
  {
    "name": "register_printf_specifier",
    "type": "CPP"
  },
  {
    "name": "register_printf_function",
    "type": "CPP"
  },
  {
    "name": "parse_printf_format",
    "type": "CPP"
  },
  {
    "name": "register_printf_modifier",
    "type": "CPP"
  },
  {
    "name": "register_printf_type",
    "type": "CPP"
  },
  {
    "name": "printf_size",
    "type": "CPP"
  },
  {
    "name": "printf_size_info",
    "type": "CPP"
  },
  {
    "name": "fprintf",
    "type": "CPP"
  },
  {
    "name": "_IO_printf",
    "type": "CPP"
  },
  {
    "name": "__snprintf",
    "type": "CPP"
  },
  {
    "name": "_IO_sprintf",
    "type": "CPP"
  },
  {
    "name": "__asprintf",
    "type": "CPP"
  },
  {
    "name": "dprintf",
    "type": "CPP"
  },
  {
    "name": "vfwprintf",
    "type": "CPP"
  },
  {
    "name": "__vfscanf",
    "type": "CPP"
  },
  {
    "name": "vfwscanf",
    "type": "CPP"
  },
  {
    "name": "fscanf",
    "type": "CPP"
  },
  {
    "name": "scanf",
    "type": "CPP"
  },
  {
    "name": "_IO_sscanf",
    "type": "CPP"
  },
  {
    "name": "perror",
    "type": "CPP"
  },
  {
    "name": "psignal",
    "type": "CPP"
  },
  {
    "name": "tmpfile",
    "type": "CPP"
  },
  {
    "name": "tmpnam",
    "type": "CPP"
  },
  {
    "name": "tmpnam_r",
    "type": "CPP"
  },
  {
    "name": "tempnam",
    "type": "CPP"
  },
  {
    "name": "getline",
    "type": "CPP"
  },
  {
    "name": "getw",
    "type": "CPP"
  },
  {
    "name": "putw",
    "type": "CPP"
  },
  {
    "name": "remove",
    "type": "CPP"
  },
  {
    "name": "rename",
    "type": "CPP"
  },
  {
    "name": "renameat",
    "type": "CPP"
  },
  {
    "name": "renameat2",
    "type": "CPP"
  },
  {
    "name": "flockfile",
    "type": "CPP"
  },
  {
    "name": "ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "funlockfile",
    "type": "CPP"
  },
  {
    "name": "__isoc99_scanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_fscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vfscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_sscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vsscanf",
    "type": "CPP"
  },
  {
    "name": "psiginfo",
    "type": "CPP"
  },
  {
    "name": "_IO_file_doallocate",
    "type": "CPP"
  },
  {
    "name": "fclose",
    "type": "CPP"
  },
  {
    "name": "fdopen",
    "type": "CPP"
  },
  {
    "name": "fflush",
    "type": "CPP"
  },
  {
    "name": "fgetpos",
    "type": "CPP"
  },
  {
    "name": "fgets",
    "type": "CPP"
  },
  {
    "name": "fopen",
    "type": "CPP"
  },
  {
    "name": "fopencookie",
    "type": "CPP"
  },
  {
    "name": "fputs",
    "type": "CPP"
  },
  {
    "name": "fread",
    "type": "CPP"
  },
  {
    "name": "fsetpos",
    "type": "CPP"
  },
  {
    "name": "ftell",
    "type": "CPP"
  },
  {
    "name": "fwrite",
    "type": "CPP"
  },
  {
    "name": "__getdelim",
    "type": "CPP"
  },
  {
    "name": "_IO_getline_info",
    "type": "CPP"
  },
  {
    "name": "_IO_getline",
    "type": "CPP"
  },
  {
    "name": "gets",
    "type": "CPP"
  },
  {
    "name": "_IO_padn",
    "type": "CPP"
  },
  {
    "name": "_IO_proc_close",
    "type": "CPP"
  },
  {
    "name": "_IO_proc_open",
    "type": "CPP"
  },
  {
    "name": "_IO_popen",
    "type": "CPP"
  },
  {
    "name": "_IO_puts",
    "type": "CPP"
  },
  {
    "name": "_IO_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_seekpos",
    "type": "CPP"
  },
  {
    "name": "_IO_setbuffer",
    "type": "CPP"
  },
  {
    "name": "_IO_setvbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_ungetc",
    "type": "CPP"
  },
  {
    "name": "_IO_vsprintf",
    "type": "CPP"
  },
  {
    "name": "__vsscanf",
    "type": "CPP"
  },
  {
    "name": "fputwc",
    "type": "CPP"
  },
  {
    "name": "fputwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetwc",
    "type": "CPP"
  },
  {
    "name": "fgetwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "getwchar",
    "type": "CPP"
  },
  {
    "name": "getwchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetws",
    "type": "CPP"
  },
  {
    "name": "fgetws_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputws",
    "type": "CPP"
  },
  {
    "name": "fputws_unlocked",
    "type": "CPP"
  },
  {
    "name": "ungetwc",
    "type": "CPP"
  },
  {
    "name": "putwc",
    "type": "CPP"
  },
  {
    "name": "putwc_unlocked",
    "type": "CPP"
  },
  {
    "name": "putwchar",
    "type": "CPP"
  },
  {
    "name": "putwchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "putchar",
    "type": "CPP"
  },
  {
    "name": "putchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fwprintf",
    "type": "CPP"
  },
  {
    "name": "swprintf",
    "type": "CPP"
  },
  {
    "name": "vwprintf",
    "type": "CPP"
  },
  {
    "name": "wprintf",
    "type": "CPP"
  },
  {
    "name": "wscanf",
    "type": "CPP"
  },
  {
    "name": "fwscanf",
    "type": "CPP"
  },
  {
    "name": "vwscanf",
    "type": "CPP"
  },
  {
    "name": "vswprintf",
    "type": "CPP"
  },
  {
    "name": "vswscanf",
    "type": "CPP"
  },
  {
    "name": "swscanf",
    "type": "CPP"
  },
  {
    "name": "_IO_least_wmarker",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_main_wget_area",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_wbackup_area",
    "type": "CPP"
  },
  {
    "name": "_IO_wsetb",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_uflow",
    "type": "CPP"
  },
  {
    "name": "__woverflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_wdoallocbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_doallocate",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_wget_mode",
    "type": "CPP"
  },
  {
    "name": "__wuflow",
    "type": "CPP"
  },
  {
    "name": "__wunderflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wdefault_xsgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_free_wbackup_area",
    "type": "CPP"
  },
  {
    "name": "_IO_sputbackwc",
    "type": "CPP"
  },
  {
    "name": "_IO_sungetwc",
    "type": "CPP"
  },
  {
    "name": "_IO_adjust_wcolumn",
    "type": "CPP"
  },
  {
    "name": "_IO_init_wmarker",
    "type": "CPP"
  },
  {
    "name": "_IO_wmarker_delta",
    "type": "CPP"
  },
  {
    "name": "_IO_seekwmark",
    "type": "CPP"
  },
  {
    "name": "_IO_unsave_wmarkers",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_wdo_write",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_sync",
    "type": "CPP"
  },
  {
    "name": "_IO_wfile_xsputn",
    "type": "CPP"
  },
  {
    "name": "fwide",
    "type": "CPP"
  },
  {
    "name": "open_wmemstream",
    "type": "CPP"
  },
  {
    "name": "clearerr",
    "type": "CPP"
  },
  {
    "name": "feof",
    "type": "CPP"
  },
  {
    "name": "ferror",
    "type": "CPP"
  },
  {
    "name": "fileno",
    "type": "CPP"
  },
  {
    "name": "fputc",
    "type": "CPP"
  },
  {
    "name": "freopen",
    "type": "CPP"
  },
  {
    "name": "fseek",
    "type": "CPP"
  },
  {
    "name": "fgetc",
    "type": "CPP"
  },
  {
    "name": "getchar",
    "type": "CPP"
  },
  {
    "name": "open_memstream",
    "type": "CPP"
  },
  {
    "name": "pclose",
    "type": "CPP"
  },
  {
    "name": "_IO_putc",
    "type": "CPP"
  },
  {
    "name": "rewind",
    "type": "CPP"
  },
  {
    "name": "setbuf",
    "type": "CPP"
  },
  {
    "name": "setlinebuf",
    "type": "CPP"
  },
  {
    "name": "vasprintf",
    "type": "CPP"
  },
  {
    "name": "vdprintf",
    "type": "CPP"
  },
  {
    "name": "vscanf",
    "type": "CPP"
  },
  {
    "name": "__vsnprintf",
    "type": "CPP"
  },
  {
    "name": "obstack_vprintf",
    "type": "CPP"
  },
  {
    "name": "obstack_printf",
    "type": "CPP"
  },
  {
    "name": "fcloseall",
    "type": "CPP"
  },
  {
    "name": "fseeko",
    "type": "CPP"
  },
  {
    "name": "ftello",
    "type": "CPP"
  },
  {
    "name": "freopen64",
    "type": "CPP"
  },
  {
    "name": "__fbufsize",
    "type": "CPP"
  },
  {
    "name": "__freading",
    "type": "CPP"
  },
  {
    "name": "__fwriting",
    "type": "CPP"
  },
  {
    "name": "__freadable",
    "type": "CPP"
  },
  {
    "name": "__fwritable",
    "type": "CPP"
  },
  {
    "name": "__flbf",
    "type": "CPP"
  },
  {
    "name": "__fpurge",
    "type": "CPP"
  },
  {
    "name": "__fpending",
    "type": "CPP"
  },
  {
    "name": "__fsetlocking",
    "type": "CPP"
  },
  {
    "name": "__libc_fatal",
    "type": "CPP"
  },
  {
    "name": "fmemopen",
    "type": "CPP"
  },
  {
    "name": "fmemopen",
    "type": "CPP"
  },
  {
    "name": "__libc_readline_unlocked",
    "type": "CPP"
  },
  {
    "name": "clearerr_unlocked",
    "type": "CPP"
  },
  {
    "name": "feof_unlocked",
    "type": "CPP"
  },
  {
    "name": "ferror_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputc_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgetc_unlocked",
    "type": "CPP"
  },
  {
    "name": "getchar_unlocked",
    "type": "CPP"
  },
  {
    "name": "fflush_unlocked",
    "type": "CPP"
  },
  {
    "name": "putc_unlocked",
    "type": "CPP"
  },
  {
    "name": "_IO_peekc_locked",
    "type": "CPP"
  },
  {
    "name": "fread_unlocked",
    "type": "CPP"
  },
  {
    "name": "fwrite_unlocked",
    "type": "CPP"
  },
  {
    "name": "fgets_unlocked",
    "type": "CPP"
  },
  {
    "name": "fputs_unlocked",
    "type": "CPP"
  },
  {
    "name": "_IO_file_sync",
    "type": "CPP"
  },
  {
    "name": "_IO_file_close",
    "type": "CPP"
  },
  {
    "name": "_IO_file_setbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_file_seek",
    "type": "CPP"
  },
  {
    "name": "_IO_file_seekoff",
    "type": "CPP"
  },
  {
    "name": "_IO_file_stat",
    "type": "CPP"
  },
  {
    "name": "_IO_file_write",
    "type": "CPP"
  },
  {
    "name": "_IO_file_read",
    "type": "CPP"
  },
  {
    "name": "_IO_file_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_file_init",
    "type": "CPP"
  },
  {
    "name": "_IO_file_close_it",
    "type": "CPP"
  },
  {
    "name": "_IO_file_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_file_open",
    "type": "CPP"
  },
  {
    "name": "_IO_file_fopen",
    "type": "CPP"
  },
  {
    "name": "_IO_file_attach",
    "type": "CPP"
  },
  {
    "name": "_IO_do_write",
    "type": "CPP"
  },
  {
    "name": "_IO_file_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_file_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_un_link",
    "type": "CPP"
  },
  {
    "name": "_IO_link_in",
    "type": "CPP"
  },
  {
    "name": "_IO_switch_to_get_mode",
    "type": "CPP"
  },
  {
    "name": "_IO_free_backup_area",
    "type": "CPP"
  },
  {
    "name": "__overflow",
    "type": "CPP"
  },
  {
    "name": "__underflow",
    "type": "CPP"
  },
  {
    "name": "__uflow",
    "type": "CPP"
  },
  {
    "name": "_IO_setb",
    "type": "CPP"
  },
  {
    "name": "_IO_doallocbuf",
    "type": "CPP"
  },
  {
    "name": "_IO_default_uflow",
    "type": "CPP"
  },
  {
    "name": "_IO_default_xsputn",
    "type": "CPP"
  },
  {
    "name": "_IO_sgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_default_xsgetn",
    "type": "CPP"
  },
  {
    "name": "_IO_default_doallocate",
    "type": "CPP"
  },
  {
    "name": "_IO_enable_locks",
    "type": "CPP"
  },
  {
    "name": "_IO_init",
    "type": "CPP"
  },
  {
    "name": "_IO_default_finish",
    "type": "CPP"
  },
  {
    "name": "_IO_sputbackc",
    "type": "CPP"
  },
  {
    "name": "_IO_sungetc",
    "type": "CPP"
  },
  {
    "name": "_IO_adjust_column",
    "type": "CPP"
  },
  {
    "name": "_IO_flush_all",
    "type": "CPP"
  },
  {
    "name": "_flushlbf",
    "type": "CPP"
  },
  {
    "name": "_IO_init_marker",
    "type": "CPP"
  },
  {
    "name": "_IO_remove_marker",
    "type": "CPP"
  },
  {
    "name": "_IO_marker_difference",
    "type": "CPP"
  },
  {
    "name": "_IO_marker_delta",
    "type": "CPP"
  },
  {
    "name": "_IO_seekmark",
    "type": "CPP"
  },
  {
    "name": "_IO_unsave_markers",
    "type": "CPP"
  },
  {
    "name": "_IO_default_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_begin",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_end",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_next",
    "type": "CPP"
  },
  {
    "name": "_IO_iter_file",
    "type": "CPP"
  },
  {
    "name": "_IO_list_lock",
    "type": "CPP"
  },
  {
    "name": "_IO_list_unlock",
    "type": "CPP"
  },
  {
    "name": "_IO_list_resetlock",
    "type": "CPP"
  },
  {
    "name": "_IO_str_underflow",
    "type": "CPP"
  },
  {
    "name": "_IO_str_overflow",
    "type": "CPP"
  },
  {
    "name": "_IO_str_pbackfail",
    "type": "CPP"
  },
  {
    "name": "_IO_str_init_static",
    "type": "CPP"
  },
  {
    "name": "_IO_str_init_readonly",
    "type": "CPP"
  },
  {
    "name": "_IO_str_seekoff",
    "type": "CPP"
  },
  {
    "name": "__libc_alloca_cutoff",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "pthread_exit",
    "type": "CPP"
  },
  {
    "name": "pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__libc_pthread_init",
    "type": "CPP"
  },
  {
    "name": "__register_atfork",
    "type": "CPP"
  },
  {
    "name": "pthread_self",
    "type": "CPP"
  },
  {
    "name": "thrd_current",
    "type": "CPP"
  },
  {
    "name": "thrd_equal",
    "type": "CPP"
  },
  {
    "name": "thrd_sleep",
    "type": "CPP"
  },
  {
    "name": "thrd_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_equal",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getdetachstate",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setdetachstate",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getinheritsched",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setinheritsched",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedparam",
    "type": "CPP"
  },
  {
    "name": "__libc_malloc",
    "type": "CPP"
  },
  {
    "name": "cfree",
    "type": "CPP"
  },
  {
    "name": "__libc_realloc",
    "type": "CPP"
  },
  {
    "name": "aligned_alloc",
    "type": "CPP"
  },
  {
    "name": "__libc_valloc",
    "type": "CPP"
  },
  {
    "name": "__libc_pvalloc",
    "type": "CPP"
  },
  {
    "name": "calloc",
    "type": "CPP"
  },
  {
    "name": "malloc_trim",
    "type": "CPP"
  },
  {
    "name": "malloc_usable_size",
    "type": "CPP"
  },
  {
    "name": "__libc_mallinfo",
    "type": "CPP"
  },
  {
    "name": "malloc_stats",
    "type": "CPP"
  },
  {
    "name": "__libc_mallopt",
    "type": "CPP"
  },
  {
    "name": "posix_memalign",
    "type": "CPP"
  },
  {
    "name": "malloc_info",
    "type": "CPP"
  },
  {
    "name": "__default_morecore",
    "type": "CPP"
  },
  {
    "name": "mcheck_check_all",
    "type": "CPP"
  },
  {
    "name": "mcheck",
    "type": "CPP"
  },
  {
    "name": "mcheck_pedantic",
    "type": "CPP"
  },
  {
    "name": "mprobe",
    "type": "CPP"
  },
  {
    "name": "tr_break",
    "type": "CPP"
  },
  {
    "name": "mtrace",
    "type": "CPP"
  },
  {
    "name": "muntrace",
    "type": "CPP"
  },
  {
    "name": "_obstack_begin",
    "type": "CPP"
  },
  {
    "name": "_obstack_begin_1",
    "type": "CPP"
  },
  {
    "name": "_obstack_newchunk",
    "type": "CPP"
  },
  {
    "name": "_obstack_allocated_p",
    "type": "CPP"
  },
  {
    "name": "_obstack_free",
    "type": "CPP"
  },
  {
    "name": "_obstack_memory_used",
    "type": "CPP"
  },
  {
    "name": "__libc_reallocarray",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_grow",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_grow_preserve",
    "type": "CPP"
  },
  {
    "name": "__libc_scratch_buffer_set_array_size",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_at_failure",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_emplace_enlarge",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_finalize",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_resize",
    "type": "CPP"
  },
  {
    "name": "__libc_dynarray_resize_clear",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_alloc_array",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_allocate",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_copy_bytes",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_copy_string",
    "type": "CPP"
  },
  {
    "name": "__libc_alloc_buffer_create_failure",
    "type": "CPP"
  },
  {
    "name": "__libc_thread_freeres",
    "type": "CPP"
  },
  {
    "name": "strcoll",
    "type": "CPP"
  },
  {
    "name": "__strverscmp",
    "type": "CPP"
  },
  {
    "name": "__strdup",
    "type": "CPP"
  },
  {
    "name": "__strndup",
    "type": "CPP"
  },
  {
    "name": "strerror",
    "type": "CPP"
  },
  {
    "name": "__strerror_r",
    "type": "CPP"
  },
  {
    "name": "strsignal",
    "type": "CPP"
  },
  {
    "name": "strtok",
    "type": "CPP"
  },
  {
    "name": "__strtok_r",
    "type": "CPP"
  },
  {
    "name": "strxfrm",
    "type": "CPP"
  },
  {
    "name": "bcopy",
    "type": "CPP"
  },
  {
    "name": "__ffs",
    "type": "CPP"
  },
  {
    "name": "ffsl",
    "type": "CPP"
  },
  {
    "name": "memccpy",
    "type": "CPP"
  },
  {
    "name": "strsep",
    "type": "CPP"
  },
  {
    "name": "__strcasestr",
    "type": "CPP"
  },
  {
    "name": "swab",
    "type": "CPP"
  },
  {
    "name": "strfry",
    "type": "CPP"
  },
  {
    "name": "memfrob",
    "type": "CPP"
  },
  {
    "name": "memmem",
    "type": "CPP"
  },
  {
    "name": "argz_append",
    "type": "CPP"
  },
  {
    "name": "argz_add",
    "type": "CPP"
  },
  {
    "name": "__argz_count",
    "type": "CPP"
  },
  {
    "name": "argz_create",
    "type": "CPP"
  },
  {
    "name": "argz_create_sep",
    "type": "CPP"
  },
  {
    "name": "__argz_next",
    "type": "CPP"
  },
  {
    "name": "argz_delete",
    "type": "CPP"
  },
  {
    "name": "argz_extract",
    "type": "CPP"
  },
  {
    "name": "argz_insert",
    "type": "CPP"
  },
  {
    "name": "__argz_stringify",
    "type": "CPP"
  },
  {
    "name": "argz_add_sep",
    "type": "CPP"
  },
  {
    "name": "argz_replace",
    "type": "CPP"
  },
  {
    "name": "envz_entry",
    "type": "CPP"
  },
  {
    "name": "envz_get",
    "type": "CPP"
  },
  {
    "name": "envz_remove",
    "type": "CPP"
  },
  {
    "name": "envz_add",
    "type": "CPP"
  },
  {
    "name": "envz_merge",
    "type": "CPP"
  },
  {
    "name": "envz_strip",
    "type": "CPP"
  },
  {
    "name": "basename",
    "type": "CPP"
  },
  {
    "name": "__strcoll_l",
    "type": "CPP"
  },
  {
    "name": "__strxfrm_l",
    "type": "CPP"
  },
  {
    "name": "__strtok_r_1c",
    "type": "CPP"
  },
  {
    "name": "__strsep_1c",
    "type": "CPP"
  },
  {
    "name": "__strsep_2c",
    "type": "CPP"
  },
  {
    "name": "__strsep_3c",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c1",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c2",
    "type": "CPP"
  },
  {
    "name": "__strcspn_c3",
    "type": "CPP"
  },
  {
    "name": "__strspn_c1",
    "type": "CPP"
  },
  {
    "name": "__strspn_c2",
    "type": "CPP"
  },
  {
    "name": "__strspn_c3",
    "type": "CPP"
  },
  {
    "name": "__strpbrk_c2",
    "type": "CPP"
  },
  {
    "name": "__strpbrk_c3",
    "type": "CPP"
  },
  {
    "name": "__mempcpy_small",
    "type": "CPP"
  },
  {
    "name": "__strcpy_small",
    "type": "CPP"
  },
  {
    "name": "__stpcpy_small",
    "type": "CPP"
  },
  {
    "name": "__xpg_strerror_r",
    "type": "CPP"
  },
  {
    "name": "strerror_l",
    "type": "CPP"
  },
  {
    "name": "explicit_bzero",
    "type": "CPP"
  },
  {
    "name": "memcpy",
    "type": "CPP"
  },
  {
    "name": "__bzero",
    "type": "CPP"
  },
  {
    "name": "wcscat",
    "type": "CPP"
  },
  {
    "name": "wcscspn",
    "type": "CPP"
  },
  {
    "name": "wcsdup",
    "type": "CPP"
  },
  {
    "name": "wcsncat",
    "type": "CPP"
  },
  {
    "name": "wcsncpy",
    "type": "CPP"
  },
  {
    "name": "wcspbrk",
    "type": "CPP"
  },
  {
    "name": "wcsspn",
    "type": "CPP"
  },
  {
    "name": "wcstok",
    "type": "CPP"
  },
  {
    "name": "wcsstr",
    "type": "CPP"
  },
  {
    "name": "wmemcpy",
    "type": "CPP"
  },
  {
    "name": "wmemmove",
    "type": "CPP"
  },
  {
    "name": "wcpcpy",
    "type": "CPP"
  },
  {
    "name": "wcpncpy",
    "type": "CPP"
  },
  {
    "name": "wmempcpy",
    "type": "CPP"
  },
  {
    "name": "btowc",
    "type": "CPP"
  },
  {
    "name": "wctob",
    "type": "CPP"
  },
  {
    "name": "mbsinit",
    "type": "CPP"
  },
  {
    "name": "__mbrlen",
    "type": "CPP"
  },
  {
    "name": "__mbrtowc",
    "type": "CPP"
  },
  {
    "name": "wcrtomb",
    "type": "CPP"
  },
  {
    "name": "mbsrtowcs",
    "type": "CPP"
  },
  {
    "name": "wcsrtombs",
    "type": "CPP"
  },
  {
    "name": "mbsnrtowcs",
    "type": "CPP"
  },
  {
    "name": "wcsnrtombs",
    "type": "CPP"
  },
  {
    "name": "wcschrnul",
    "type": "CPP"
  },
  {
    "name": "__wcstol_internal",
    "type": "CPP"
  },
  {
    "name": "wcstol",
    "type": "CPP"
  },
  {
    "name": "__wcstoul_internal",
    "type": "CPP"
  },
  {
    "name": "wcstoul",
    "type": "CPP"
  },
  {
    "name": "__wcstod_internal",
    "type": "CPP"
  },
  {
    "name": "wcstod",
    "type": "CPP"
  },
  {
    "name": "__wcstold_internal",
    "type": "CPP"
  },
  {
    "name": "wcstof64x",
    "type": "CPP"
  },
  {
    "name": "__wcstof_internal",
    "type": "CPP"
  },
  {
    "name": "wcstof",
    "type": "CPP"
  },
  {
    "name": "__wcstol_l",
    "type": "CPP"
  },
  {
    "name": "__wcstoul_l",
    "type": "CPP"
  },
  {
    "name": "__wcstod_l",
    "type": "CPP"
  },
  {
    "name": "wcstof64x_l",
    "type": "CPP"
  },
  {
    "name": "wcstof32_l",
    "type": "CPP"
  },
  {
    "name": "wcscoll",
    "type": "CPP"
  },
  {
    "name": "wcsxfrm",
    "type": "CPP"
  },
  {
    "name": "wcwidth",
    "type": "CPP"
  },
  {
    "name": "wcswidth",
    "type": "CPP"
  },
  {
    "name": "__wcscoll_l",
    "type": "CPP"
  },
  {
    "name": "__wcsxfrm_l",
    "type": "CPP"
  },
  {
    "name": "wcscasecmp",
    "type": "CPP"
  },
  {
    "name": "wcsncasecmp",
    "type": "CPP"
  },
  {
    "name": "__wcscasecmp_l",
    "type": "CPP"
  },
  {
    "name": "__wcsncasecmp_l",
    "type": "CPP"
  },
  {
    "name": "__isoc99_wscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_fwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vfwscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_swscanf",
    "type": "CPP"
  },
  {
    "name": "__isoc99_vswscanf",
    "type": "CPP"
  },
  {
    "name": "mbrtoc16",
    "type": "CPP"
  },
  {
    "name": "c16rtomb",
    "type": "CPP"
  },
  {
    "name": "mbrtoc32",
    "type": "CPP"
  },
  {
    "name": "c32rtomb",
    "type": "CPP"
  },
  {
    "name": "wcstof128_l",
    "type": "CPP"
  },
  {
    "name": "__wcstof128_internal",
    "type": "CPP"
  },
  {
    "name": "wcstof128",
    "type": "CPP"
  },
  {
    "name": "asctime_r",
    "type": "CPP"
  },
  {
    "name": "asctime",
    "type": "CPP"
  },
  {
    "name": "clock",
    "type": "CPP"
  },
  {
    "name": "ctime",
    "type": "CPP"
  },
  {
    "name": "ctime_r",
    "type": "CPP"
  },
  {
    "name": "difftime",
    "type": "CPP"
  },
  {
    "name": "__gmtime_r",
    "type": "CPP"
  },
  {
    "name": "gmtime",
    "type": "CPP"
  },
  {
    "name": "localtime_r",
    "type": "CPP"
  },
  {
    "name": "localtime",
    "type": "CPP"
  },
  {
    "name": "mktime",
    "type": "CPP"
  },
  {
    "name": "settimeofday",
    "type": "CPP"
  },
  {
    "name": "adjtime",
    "type": "CPP"
  },
  {
    "name": "tzset",
    "type": "CPP"
  },
  {
    "name": "getitimer",
    "type": "CPP"
  },
  {
    "name": "setitimer",
    "type": "CPP"
  },
  {
    "name": "dysize",
    "type": "CPP"
  },
  {
    "name": "timegm",
    "type": "CPP"
  },
  {
    "name": "ftime",
    "type": "CPP"
  },
  {
    "name": "getdate_r",
    "type": "CPP"
  },
  {
    "name": "getdate",
    "type": "CPP"
  },
  {
    "name": "strptime",
    "type": "CPP"
  },
  {
    "name": "strptime_l",
    "type": "CPP"
  },
  {
    "name": "strftime",
    "type": "CPP"
  },
  {
    "name": "wcsftime",
    "type": "CPP"
  },
  {
    "name": "__strftime_l",
    "type": "CPP"
  },
  {
    "name": "__wcsftime_l",
    "type": "CPP"
  },
  {
    "name": "timespec_get",
    "type": "CPP"
  },
  {
    "name": "clock_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "clock_getres",
    "type": "CPP"
  },
  {
    "name": "__clock_gettime",
    "type": "CPP"
  },
  {
    "name": "clock_settime",
    "type": "CPP"
  },
  {
    "name": "clock_nanosleep",
    "type": "CPP"
  },
  {
    "name": "ntp_gettime",
    "type": "CPP"
  },
  {
    "name": "ntp_gettimex",
    "type": "CPP"
  },
  {
    "name": "opendir",
    "type": "CPP"
  },
  {
    "name": "closedir",
    "type": "CPP"
  },
  {
    "name": "rewinddir",
    "type": "CPP"
  },
  {
    "name": "seekdir",
    "type": "CPP"
  },
  {
    "name": "telldir",
    "type": "CPP"
  },
  {
    "name": "getdents64",
    "type": "CPP"
  },
  {
    "name": "dirfd",
    "type": "CPP"
  },
  {
    "name": "readdir",
    "type": "CPP"
  },
  {
    "name": "readdir64_r",
    "type": "CPP"
  },
  {
    "name": "scandir",
    "type": "CPP"
  },
  {
    "name": "alphasort",
    "type": "CPP"
  },
  {
    "name": "versionsort",
    "type": "CPP"
  },
  {
    "name": "fdopendir",
    "type": "CPP"
  },
  {
    "name": "scandirat",
    "type": "CPP"
  },
  {
    "name": "getdirentries",
    "type": "CPP"
  },
  {
    "name": "fgetgrent",
    "type": "CPP"
  },
  {
    "name": "getgrouplist",
    "type": "CPP"
  },
  {
    "name": "initgroups",
    "type": "CPP"
  },
  {
    "name": "setgroups",
    "type": "CPP"
  },
  {
    "name": "getgrent",
    "type": "CPP"
  },
  {
    "name": "getgrgid",
    "type": "CPP"
  },
  {
    "name": "getgrnam",
    "type": "CPP"
  },
  {
    "name": "putgrent",
    "type": "CPP"
  },
  {
    "name": "setgrent",
    "type": "CPP"
  },
  {
    "name": "endgrent",
    "type": "CPP"
  },
  {
    "name": "getgrent_r",
    "type": "CPP"
  },
  {
    "name": "getgrgid_r",
    "type": "CPP"
  },
  {
    "name": "getgrnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_grent",
    "type": "CPP"
  },
  {
    "name": "fgetgrent_r",
    "type": "CPP"
  },
  {
    "name": "__copy_grp",
    "type": "CPP"
  },
  {
    "name": "__merge_grp",
    "type": "CPP"
  },
  {
    "name": "fgetpwent",
    "type": "CPP"
  },
  {
    "name": "getpw",
    "type": "CPP"
  },
  {
    "name": "putpwent",
    "type": "CPP"
  },
  {
    "name": "getpwent",
    "type": "CPP"
  },
  {
    "name": "getpwnam",
    "type": "CPP"
  },
  {
    "name": "getpwuid",
    "type": "CPP"
  },
  {
    "name": "setpwent",
    "type": "CPP"
  },
  {
    "name": "endpwent",
    "type": "CPP"
  },
  {
    "name": "getpwent_r",
    "type": "CPP"
  },
  {
    "name": "getpwnam_r",
    "type": "CPP"
  },
  {
    "name": "getpwuid_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_pwent",
    "type": "CPP"
  },
  {
    "name": "fgetpwent_r",
    "type": "CPP"
  },
  {
    "name": "uname",
    "type": "CPP"
  },
  {
    "name": "times",
    "type": "CPP"
  },
  {
    "name": "__wait",
    "type": "CPP"
  },
  {
    "name": "__waitpid",
    "type": "CPP"
  },
  {
    "name": "wait3",
    "type": "CPP"
  },
  {
    "name": "wait4",
    "type": "CPP"
  },
  {
    "name": "waitid",
    "type": "CPP"
  },
  {
    "name": "alarm",
    "type": "CPP"
  },
  {
    "name": "sleep",
    "type": "CPP"
  },
  {
    "name": "pause",
    "type": "CPP"
  },
  {
    "name": "__nanosleep",
    "type": "CPP"
  },
  {
    "name": "__fork",
    "type": "CPP"
  },
  {
    "name": "__vfork",
    "type": "CPP"
  },
  {
    "name": "_exit",
    "type": "CPP"
  },
  {
    "name": "execve",
    "type": "CPP"
  },
  {
    "name": "fexecve",
    "type": "CPP"
  },
  {
    "name": "execv",
    "type": "CPP"
  },
  {
    "name": "execle",
    "type": "CPP"
  },
  {
    "name": "execl",
    "type": "CPP"
  },
  {
    "name": "execvp",
    "type": "CPP"
  },
  {
    "name": "execlp",
    "type": "CPP"
  },
  {
    "name": "execvpe",
    "type": "CPP"
  },
  {
    "name": "__getpid",
    "type": "CPP"
  },
  {
    "name": "getppid",
    "type": "CPP"
  },
  {
    "name": "getuid",
    "type": "CPP"
  },
  {
    "name": "geteuid",
    "type": "CPP"
  },
  {
    "name": "getgid",
    "type": "CPP"
  },
  {
    "name": "getegid",
    "type": "CPP"
  },
  {
    "name": "getgroups",
    "type": "CPP"
  },
  {
    "name": "setuid",
    "type": "CPP"
  },
  {
    "name": "setgid",
    "type": "CPP"
  },
  {
    "name": "group_member",
    "type": "CPP"
  },
  {
    "name": "__getpgid",
    "type": "CPP"
  },
  {
    "name": "__setpgid",
    "type": "CPP"
  },
  {
    "name": "getpgrp",
    "type": "CPP"
  },
  {
    "name": "__bsd_getpgrp",
    "type": "CPP"
  },
  {
    "name": "setpgrp",
    "type": "CPP"
  },
  {
    "name": "getsid",
    "type": "CPP"
  },
  {
    "name": "setsid",
    "type": "CPP"
  },
  {
    "name": "getresuid",
    "type": "CPP"
  },
  {
    "name": "getresgid",
    "type": "CPP"
  },
  {
    "name": "setresuid",
    "type": "CPP"
  },
  {
    "name": "setresgid",
    "type": "CPP"
  },
  {
    "name": "pathconf",
    "type": "CPP"
  },
  {
    "name": "__sysconf",
    "type": "CPP"
  },
  {
    "name": "fpathconf",
    "type": "CPP"
  },
  {
    "name": "glob",
    "type": "CPP"
  },
  {
    "name": "globfree",
    "type": "CPP"
  },
  {
    "name": "glob_pattern_p",
    "type": "CPP"
  },
  {
    "name": "fnmatch",
    "type": "CPP"
  },
  {
    "name": "re_compile_pattern",
    "type": "CPP"
  },
  {
    "name": "re_set_syntax",
    "type": "CPP"
  },
  {
    "name": "re_compile_fastmap",
    "type": "CPP"
  },
  {
    "name": "regcomp",
    "type": "CPP"
  },
  {
    "name": "regerror",
    "type": "CPP"
  },
  {
    "name": "regfree",
    "type": "CPP"
  },
  {
    "name": "re_comp",
    "type": "CPP"
  },
  {
    "name": "regexec",
    "type": "CPP"
  },
  {
    "name": "re_match",
    "type": "CPP"
  },
  {
    "name": "re_search",
    "type": "CPP"
  },
  {
    "name": "re_match_2",
    "type": "CPP"
  },
  {
    "name": "re_search_2",
    "type": "CPP"
  },
  {
    "name": "re_set_registers",
    "type": "CPP"
  },
  {
    "name": "re_exec",
    "type": "CPP"
  },
  {
    "name": "confstr",
    "type": "CPP"
  },
  {
    "name": "getopt",
    "type": "CPP"
  },
  {
    "name": "__posix_getopt",
    "type": "CPP"
  },
  {
    "name": "getopt_long",
    "type": "CPP"
  },
  {
    "name": "getopt_long_only",
    "type": "CPP"
  },
  {
    "name": "sched_setparam",
    "type": "CPP"
  },
  {
    "name": "__sched_getparam",
    "type": "CPP"
  },
  {
    "name": "__sched_setscheduler",
    "type": "CPP"
  },
  {
    "name": "__sched_getscheduler",
    "type": "CPP"
  },
  {
    "name": "__sched_yield",
    "type": "CPP"
  },
  {
    "name": "__sched_get_priority_max",
    "type": "CPP"
  },
  {
    "name": "__sched_get_priority_min",
    "type": "CPP"
  },
  {
    "name": "sched_rr_get_interval",
    "type": "CPP"
  },
  {
    "name": "sched_getaffinity",
    "type": "CPP"
  },
  {
    "name": "sched_setaffinity",
    "type": "CPP"
  },
  {
    "name": "getaddrinfo",
    "type": "CPP"
  },
  {
    "name": "freeaddrinfo",
    "type": "CPP"
  },
  {
    "name": "gai_strerror",
    "type": "CPP"
  },
  {
    "name": "wordfree",
    "type": "CPP"
  },
  {
    "name": "wordexp",
    "type": "CPP"
  },
  {
    "name": "__libc_pread",
    "type": "CPP"
  },
  {
    "name": "__libc_pwrite",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_init",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_destroy",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addclose",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addopen",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_adddup2",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addchdir_np",
    "type": "CPP"
  },
  {
    "name": "posix_spawn_file_actions_addfchdir_np",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_init",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_destroy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getsigdefault",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setsigdefault",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getflags",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setflags",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getpgroup",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setpgroup",
    "type": "CPP"
  },
  {
    "name": "posix_spawn",
    "type": "CPP"
  },
  {
    "name": "posix_spawnp",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getsigmask",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_getschedparam",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setsigmask",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "posix_spawnattr_setschedparam",
    "type": "CPP"
  },
  {
    "name": "posix_madvise",
    "type": "CPP"
  },
  {
    "name": "__sched_cpualloc",
    "type": "CPP"
  },
  {
    "name": "__sched_cpufree",
    "type": "CPP"
  },
  {
    "name": "sched_getcpu",
    "type": "CPP"
  },
  {
    "name": "getcpu",
    "type": "CPP"
  },
  {
    "name": "utime",
    "type": "CPP"
  },
  {
    "name": "mkfifo",
    "type": "CPP"
  },
  {
    "name": "mkfifoat",
    "type": "CPP"
  },
  {
    "name": "__xstat",
    "type": "CPP"
  },
  {
    "name": "__fxstat",
    "type": "CPP"
  },
  {
    "name": "__lxstat",
    "type": "CPP"
  },
  {
    "name": "statx",
    "type": "CPP"
  },
  {
    "name": "__xmknod",
    "type": "CPP"
  },
  {
    "name": "__xmknodat",
    "type": "CPP"
  },
  {
    "name": "__fxstatat",
    "type": "CPP"
  },
  {
    "name": "__statfs",
    "type": "CPP"
  },
  {
    "name": "fstatfs",
    "type": "CPP"
  },
  {
    "name": "statvfs",
    "type": "CPP"
  },
  {
    "name": "fstatvfs",
    "type": "CPP"
  },
  {
    "name": "umask",
    "type": "CPP"
  },
  {
    "name": "chmod",
    "type": "CPP"
  },
  {
    "name": "fchmod",
    "type": "CPP"
  },
  {
    "name": "lchmod",
    "type": "CPP"
  },
  {
    "name": "fchmodat",
    "type": "CPP"
  },
  {
    "name": "mkdir",
    "type": "CPP"
  },
  {
    "name": "mkdirat",
    "type": "CPP"
  },
  {
    "name": "__open_2",
    "type": "CPP"
  },
  {
    "name": "__open",
    "type": "CPP"
  },
  {
    "name": "__open64_2",
    "type": "CPP"
  },
  {
    "name": "__openat_2",
    "type": "CPP"
  },
  {
    "name": "openat",
    "type": "CPP"
  },
  {
    "name": "__openat64_2",
    "type": "CPP"
  },
  {
    "name": "__read",
    "type": "CPP"
  },
  {
    "name": "__write",
    "type": "CPP"
  },
  {
    "name": "llseek",
    "type": "CPP"
  },
  {
    "name": "access",
    "type": "CPP"
  },
  {
    "name": "eaccess",
    "type": "CPP"
  },
  {
    "name": "faccessat",
    "type": "CPP"
  },
  {
    "name": "__fcntl",
    "type": "CPP"
  },
  {
    "name": "flock",
    "type": "CPP"
  },
  {
    "name": "lockf",
    "type": "CPP"
  },
  {
    "name": "lockf64",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "dup",
    "type": "CPP"
  },
  {
    "name": "__dup2",
    "type": "CPP"
  },
  {
    "name": "dup3",
    "type": "CPP"
  },
  {
    "name": "__pipe",
    "type": "CPP"
  },
  {
    "name": "pipe2",
    "type": "CPP"
  },
  {
    "name": "creat",
    "type": "CPP"
  },
  {
    "name": "chdir",
    "type": "CPP"
  },
  {
    "name": "fchdir",
    "type": "CPP"
  },
  {
    "name": "getcwd",
    "type": "CPP"
  },
  {
    "name": "getwd",
    "type": "CPP"
  },
  {
    "name": "get_current_dir_name",
    "type": "CPP"
  },
  {
    "name": "chown",
    "type": "CPP"
  },
  {
    "name": "fchown",
    "type": "CPP"
  },
  {
    "name": "lchown",
    "type": "CPP"
  },
  {
    "name": "fchownat",
    "type": "CPP"
  },
  {
    "name": "ttyname",
    "type": "CPP"
  },
  {
    "name": "ttyname_r",
    "type": "CPP"
  },
  {
    "name": "isatty",
    "type": "CPP"
  },
  {
    "name": "link",
    "type": "CPP"
  },
  {
    "name": "linkat",
    "type": "CPP"
  },
  {
    "name": "symlink",
    "type": "CPP"
  },
  {
    "name": "symlinkat",
    "type": "CPP"
  },
  {
    "name": "readlink",
    "type": "CPP"
  },
  {
    "name": "readlinkat",
    "type": "CPP"
  },
  {
    "name": "unlink",
    "type": "CPP"
  },
  {
    "name": "unlinkat",
    "type": "CPP"
  },
  {
    "name": "rmdir",
    "type": "CPP"
  },
  {
    "name": "ftw",
    "type": "CPP"
  },
  {
    "name": "nftw",
    "type": "CPP"
  },
  {
    "name": "fts64_open",
    "type": "CPP"
  },
  {
    "name": "fts64_close",
    "type": "CPP"
  },
  {
    "name": "fts64_read",
    "type": "CPP"
  },
  {
    "name": "fts64_set",
    "type": "CPP"
  },
  {
    "name": "fts64_children",
    "type": "CPP"
  },
  {
    "name": "__poll",
    "type": "CPP"
  },
  {
    "name": "ppoll",
    "type": "CPP"
  },
  {
    "name": "posix_fadvise",
    "type": "CPP"
  },
  {
    "name": "posix_fallocate",
    "type": "CPP"
  },
  {
    "name": "posix_fallocate64",
    "type": "CPP"
  },
  {
    "name": "sendfile",
    "type": "CPP"
  },
  {
    "name": "copy_file_range",
    "type": "CPP"
  },
  {
    "name": "utimensat",
    "type": "CPP"
  },
  {
    "name": "futimens",
    "type": "CPP"
  },
  {
    "name": "sync_file_range",
    "type": "CPP"
  },
  {
    "name": "fallocate",
    "type": "CPP"
  },
  {
    "name": "__close_nocancel",
    "type": "CPP"
  },
  {
    "name": "__open64_nocancel",
    "type": "CPP"
  },
  {
    "name": "__read_nocancel",
    "type": "CPP"
  },
  {
    "name": "__pread64_nocancel",
    "type": "CPP"
  },
  {
    "name": "__write_nocancel",
    "type": "CPP"
  },
  {
    "name": "cfgetospeed",
    "type": "CPP"
  },
  {
    "name": "cfgetispeed",
    "type": "CPP"
  },
  {
    "name": "cfsetospeed",
    "type": "CPP"
  },
  {
    "name": "cfsetispeed",
    "type": "CPP"
  },
  {
    "name": "cfsetspeed",
    "type": "CPP"
  },
  {
    "name": "tcsetattr",
    "type": "CPP"
  },
  {
    "name": "tcgetattr",
    "type": "CPP"
  },
  {
    "name": "tcgetpgrp",
    "type": "CPP"
  },
  {
    "name": "tcsetpgrp",
    "type": "CPP"
  },
  {
    "name": "tcdrain",
    "type": "CPP"
  },
  {
    "name": "tcflow",
    "type": "CPP"
  },
  {
    "name": "tcflush",
    "type": "CPP"
  },
  {
    "name": "tcsendbreak",
    "type": "CPP"
  },
  {
    "name": "cfmakeraw",
    "type": "CPP"
  },
  {
    "name": "tcgetsid",
    "type": "CPP"
  },
  {
    "name": "__getrlimit",
    "type": "CPP"
  },
  {
    "name": "setrlimit",
    "type": "CPP"
  },
  {
    "name": "getrusage",
    "type": "CPP"
  },
  {
    "name": "ulimit",
    "type": "CPP"
  },
  {
    "name": "vlimit",
    "type": "CPP"
  },
  {
    "name": "vtimes",
    "type": "CPP"
  },
  {
    "name": "getpriority",
    "type": "CPP"
  },
  {
    "name": "setpriority",
    "type": "CPP"
  },
  {
    "name": "nice",
    "type": "CPP"
  },
  {
    "name": "brk",
    "type": "CPP"
  },
  {
    "name": "__sbrk",
    "type": "CPP"
  },
  {
    "name": "sstk",
    "type": "CPP"
  },
  {
    "name": "ioctl",
    "type": "CPP"
  },
  {
    "name": "readv",
    "type": "CPP"
  },
  {
    "name": "writev",
    "type": "CPP"
  },
  {
    "name": "preadv",
    "type": "CPP"
  },
  {
    "name": "pwritev",
    "type": "CPP"
  },
  {
    "name": "preadv2",
    "type": "CPP"
  },
  {
    "name": "pwritev2",
    "type": "CPP"
  },
  {
    "name": "setreuid",
    "type": "CPP"
  },
  {
    "name": "setregid",
    "type": "CPP"
  },
  {
    "name": "seteuid",
    "type": "CPP"
  },
  {
    "name": "setegid",
    "type": "CPP"
  },
  {
    "name": "__getpagesize",
    "type": "CPP"
  },
  {
    "name": "getdtablesize",
    "type": "CPP"
  },
  {
    "name": "gethostname",
    "type": "CPP"
  },
  {
    "name": "sethostname",
    "type": "CPP"
  },
  {
    "name": "getdomainname",
    "type": "CPP"
  },
  {
    "name": "setdomainname",
    "type": "CPP"
  },
  {
    "name": "__select",
    "type": "CPP"
  },
  {
    "name": "pselect",
    "type": "CPP"
  },
  {
    "name": "acct",
    "type": "CPP"
  },
  {
    "name": "chroot",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "sync",
    "type": "CPP"
  },
  {
    "name": "fdatasync",
    "type": "CPP"
  },
  {
    "name": "syncfs",
    "type": "CPP"
  },
  {
    "name": "reboot",
    "type": "CPP"
  },
  {
    "name": "gethostid",
    "type": "CPP"
  },
  {
    "name": "sethostid",
    "type": "CPP"
  },
  {
    "name": "revoke",
    "type": "CPP"
  },
  {
    "name": "vhangup",
    "type": "CPP"
  },
  {
    "name": "swapon",
    "type": "CPP"
  },
  {
    "name": "swapoff",
    "type": "CPP"
  },
  {
    "name": "__mktemp",
    "type": "CPP"
  },
  {
    "name": "mkstemp",
    "type": "CPP"
  },
  {
    "name": "mkdtemp",
    "type": "CPP"
  },
  {
    "name": "mkostemp",
    "type": "CPP"
  },
  {
    "name": "mkstemps",
    "type": "CPP"
  },
  {
    "name": "mkostemps",
    "type": "CPP"
  },
  {
    "name": "ualarm",
    "type": "CPP"
  },
  {
    "name": "usleep",
    "type": "CPP"
  },
  {
    "name": "gtty",
    "type": "CPP"
  },
  {
    "name": "stty",
    "type": "CPP"
  },
  {
    "name": "ptrace",
    "type": "CPP"
  },
  {
    "name": "setfsent",
    "type": "CPP"
  },
  {
    "name": "getfsent",
    "type": "CPP"
  },
  {
    "name": "getfsspec",
    "type": "CPP"
  },
  {
    "name": "getfsfile",
    "type": "CPP"
  },
  {
    "name": "endfsent",
    "type": "CPP"
  },
  {
    "name": "getmntent",
    "type": "CPP"
  },
  {
    "name": "__setmntent",
    "type": "CPP"
  },
  {
    "name": "__endmntent",
    "type": "CPP"
  },
  {
    "name": "__getmntent_r",
    "type": "CPP"
  },
  {
    "name": "addmntent",
    "type": "CPP"
  },
  {
    "name": "hasmntopt",
    "type": "CPP"
  },
  {
    "name": "utimes",
    "type": "CPP"
  },
  {
    "name": "lutimes",
    "type": "CPP"
  },
  {
    "name": "futimes",
    "type": "CPP"
  },
  {
    "name": "futimesat",
    "type": "CPP"
  },
  {
    "name": "truncate",
    "type": "CPP"
  },
  {
    "name": "ftruncate",
    "type": "CPP"
  },
  {
    "name": "chflags",
    "type": "CPP"
  },
  {
    "name": "fchflags",
    "type": "CPP"
  },
  {
    "name": "insque",
    "type": "CPP"
  },
  {
    "name": "remque",
    "type": "CPP"
  },
  {
    "name": "getttynam",
    "type": "CPP"
  },
  {
    "name": "getttyent",
    "type": "CPP"
  },
  {
    "name": "setttyent",
    "type": "CPP"
  },
  {
    "name": "endttyent",
    "type": "CPP"
  },
  {
    "name": "getusershell",
    "type": "CPP"
  },
  {
    "name": "endusershell",
    "type": "CPP"
  },
  {
    "name": "setusershell",
    "type": "CPP"
  },
  {
    "name": "getpass",
    "type": "CPP"
  },
  {
    "name": "ttyslot",
    "type": "CPP"
  },
  {
    "name": "syslog",
    "type": "CPP"
  },
  {
    "name": "vsyslog",
    "type": "CPP"
  },
  {
    "name": "__syslog_chk",
    "type": "CPP"
  },
  {
    "name": "__vsyslog_chk",
    "type": "CPP"
  },
  {
    "name": "openlog",
    "type": "CPP"
  },
  {
    "name": "closelog",
    "type": "CPP"
  },
  {
    "name": "setlogmask",
    "type": "CPP"
  },
  {
    "name": "syscall",
    "type": "CPP"
  },
  {
    "name": "daemon",
    "type": "CPP"
  },
  {
    "name": "__mmap",
    "type": "CPP"
  },
  {
    "name": "__munmap",
    "type": "CPP"
  },
  {
    "name": "__mprotect",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__madvise",
    "type": "CPP"
  },
  {
    "name": "mincore",
    "type": "CPP"
  },
  {
    "name": "remap_file_pages",
    "type": "CPP"
  },
  {
    "name": "mlock",
    "type": "CPP"
  },
  {
    "name": "munlock",
    "type": "CPP"
  },
  {
    "name": "mlockall",
    "type": "CPP"
  },
  {
    "name": "munlockall",
    "type": "CPP"
  },
  {
    "name": "fcvt",
    "type": "CPP"
  },
  {
    "name": "ecvt",
    "type": "CPP"
  },
  {
    "name": "gcvt",
    "type": "CPP"
  },
  {
    "name": "fcvt_r",
    "type": "CPP"
  },
  {
    "name": "ecvt_r",
    "type": "CPP"
  },
  {
    "name": "qfcvt",
    "type": "CPP"
  },
  {
    "name": "qecvt",
    "type": "CPP"
  },
  {
    "name": "qgcvt",
    "type": "CPP"
  },
  {
    "name": "qfcvt_r",
    "type": "CPP"
  },
  {
    "name": "qecvt_r",
    "type": "CPP"
  },
  {
    "name": "hdestroy",
    "type": "CPP"
  },
  {
    "name": "hsearch",
    "type": "CPP"
  },
  {
    "name": "hcreate",
    "type": "CPP"
  },
  {
    "name": "hcreate_r",
    "type": "CPP"
  },
  {
    "name": "hdestroy_r",
    "type": "CPP"
  },
  {
    "name": "hsearch_r",
    "type": "CPP"
  },
  {
    "name": "__tsearch",
    "type": "CPP"
  },
  {
    "name": "__tfind",
    "type": "CPP"
  },
  {
    "name": "__tdelete",
    "type": "CPP"
  },
  {
    "name": "__twalk",
    "type": "CPP"
  },
  {
    "name": "__twalk_r",
    "type": "CPP"
  },
  {
    "name": "tdestroy",
    "type": "CPP"
  },
  {
    "name": "lsearch",
    "type": "CPP"
  },
  {
    "name": "lfind",
    "type": "CPP"
  },
  {
    "name": "vwarn",
    "type": "CPP"
  },
  {
    "name": "vwarnx",
    "type": "CPP"
  },
  {
    "name": "warn",
    "type": "CPP"
  },
  {
    "name": "warnx",
    "type": "CPP"
  },
  {
    "name": "verr",
    "type": "CPP"
  },
  {
    "name": "verrx",
    "type": "CPP"
  },
  {
    "name": "err",
    "type": "CPP"
  },
  {
    "name": "errx",
    "type": "CPP"
  },
  {
    "name": "error",
    "type": "CPP"
  },
  {
    "name": "error_at_line",
    "type": "CPP"
  },
  {
    "name": "ustat",
    "type": "CPP"
  },
  {
    "name": "get_nprocs",
    "type": "CPP"
  },
  {
    "name": "get_nprocs_conf",
    "type": "CPP"
  },
  {
    "name": "get_phys_pages",
    "type": "CPP"
  },
  {
    "name": "get_avphys_pages",
    "type": "CPP"
  },
  {
    "name": "dirname",
    "type": "CPP"
  },
  {
    "name": "getloadavg",
    "type": "CPP"
  },
  {
    "name": "fgetxattr",
    "type": "CPP"
  },
  {
    "name": "flistxattr",
    "type": "CPP"
  },
  {
    "name": "fremovexattr",
    "type": "CPP"
  },
  {
    "name": "fsetxattr",
    "type": "CPP"
  },
  {
    "name": "getxattr",
    "type": "CPP"
  },
  {
    "name": "listxattr",
    "type": "CPP"
  },
  {
    "name": "lgetxattr",
    "type": "CPP"
  },
  {
    "name": "llistxattr",
    "type": "CPP"
  },
  {
    "name": "lremovexattr",
    "type": "CPP"
  },
  {
    "name": "lsetxattr",
    "type": "CPP"
  },
  {
    "name": "removexattr",
    "type": "CPP"
  },
  {
    "name": "setxattr",
    "type": "CPP"
  },
  {
    "name": "__getauxval",
    "type": "CPP"
  },
  {
    "name": "__libc_ifunc_impl_list",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_major",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_minor",
    "type": "CPP"
  },
  {
    "name": "gnu_dev_makedev",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_once_slow",
    "type": "CPP"
  },
  {
    "name": "ioperm",
    "type": "CPP"
  },
  {
    "name": "iopl",
    "type": "CPP"
  },
  {
    "name": "__sysctl",
    "type": "CPP"
  },
  {
    "name": "__adjtimex",
    "type": "CPP"
  },
  {
    "name": "__clone",
    "type": "CPP"
  },
  {
    "name": "umount",
    "type": "CPP"
  },
  {
    "name": "umount2",
    "type": "CPP"
  },
  {
    "name": "readahead",
    "type": "CPP"
  },
  {
    "name": "setfsuid",
    "type": "CPP"
  },
  {
    "name": "setfsgid",
    "type": "CPP"
  },
  {
    "name": "epoll_pwait",
    "type": "CPP"
  },
  {
    "name": "signalfd",
    "type": "CPP"
  },
  {
    "name": "eventfd",
    "type": "CPP"
  },
  {
    "name": "eventfd_read",
    "type": "CPP"
  },
  {
    "name": "eventfd_write",
    "type": "CPP"
  },
  {
    "name": "prlimit",
    "type": "CPP"
  },
  {
    "name": "personality",
    "type": "CPP"
  },
  {
    "name": "epoll_wait",
    "type": "CPP"
  },
  {
    "name": "tee",
    "type": "CPP"
  },
  {
    "name": "vmsplice",
    "type": "CPP"
  },
  {
    "name": "splice",
    "type": "CPP"
  },
  {
    "name": "open_by_handle_at",
    "type": "CPP"
  },
  {
    "name": "mlock2",
    "type": "CPP"
  },
  {
    "name": "pkey_mprotect",
    "type": "CPP"
  },
  {
    "name": "pkey_set",
    "type": "CPP"
  },
  {
    "name": "pkey_get",
    "type": "CPP"
  },
  {
    "name": "__arch_prctl",
    "type": "CPP"
  },
  {
    "name": "modify_ldt",
    "type": "CPP"
  },
  {
    "name": "fanotify_mark",
    "type": "CPP"
  },
  {
    "name": "capget",
    "type": "CPP"
  },
  {
    "name": "capset",
    "type": "CPP"
  },
  {
    "name": "clock_adjtime",
    "type": "CPP"
  },
  {
    "name": "create_module",
    "type": "CPP"
  },
  {
    "name": "delete_module",
    "type": "CPP"
  },
  {
    "name": "epoll_create",
    "type": "CPP"
  },
  {
    "name": "epoll_create1",
    "type": "CPP"
  },
  {
    "name": "epoll_ctl",
    "type": "CPP"
  },
  {
    "name": "get_kernel_syms",
    "type": "CPP"
  },
  {
    "name": "init_module",
    "type": "CPP"
  },
  {
    "name": "inotify_add_watch",
    "type": "CPP"
  },
  {
    "name": "inotify_init",
    "type": "CPP"
  },
  {
    "name": "inotify_init1",
    "type": "CPP"
  },
  {
    "name": "inotify_rm_watch",
    "type": "CPP"
  },
  {
    "name": "klogctl",
    "type": "CPP"
  },
  {
    "name": "mount",
    "type": "CPP"
  },
  {
    "name": "mremap",
    "type": "CPP"
  },
  {
    "name": "nfsservctl",
    "type": "CPP"
  },
  {
    "name": "pivot_root",
    "type": "CPP"
  },
  {
    "name": "prctl",
    "type": "CPP"
  },
  {
    "name": "query_module",
    "type": "CPP"
  },
  {
    "name": "quotactl",
    "type": "CPP"
  },
  {
    "name": "sysinfo",
    "type": "CPP"
  },
  {
    "name": "unshare",
    "type": "CPP"
  },
  {
    "name": "uselib",
    "type": "CPP"
  },
  {
    "name": "timerfd_create",
    "type": "CPP"
  },
  {
    "name": "timerfd_settime",
    "type": "CPP"
  },
  {
    "name": "timerfd_gettime",
    "type": "CPP"
  },
  {
    "name": "fanotify_init",
    "type": "CPP"
  },
  {
    "name": "name_to_handle_at",
    "type": "CPP"
  },
  {
    "name": "setns",
    "type": "CPP"
  },
  {
    "name": "process_vm_readv",
    "type": "CPP"
  },
  {
    "name": "process_vm_writev",
    "type": "CPP"
  },
  {
    "name": "memfd_create",
    "type": "CPP"
  },
  {
    "name": "pkey_alloc",
    "type": "CPP"
  },
  {
    "name": "pkey_free",
    "type": "CPP"
  },
  {
    "name": "gettid",
    "type": "CPP"
  },
  {
    "name": "tgkill",
    "type": "CPP"
  },
  {
    "name": "bdflush",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "bind",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "getpeername",
    "type": "CPP"
  },
  {
    "name": "getsockname",
    "type": "CPP"
  },
  {
    "name": "getsockopt",
    "type": "CPP"
  },
  {
    "name": "listen",
    "type": "CPP"
  },
  {
    "name": "__recv",
    "type": "CPP"
  },
  {
    "name": "recvfrom",
    "type": "CPP"
  },
  {
    "name": "recvmsg",
    "type": "CPP"
  },
  {
    "name": "__send",
    "type": "CPP"
  },
  {
    "name": "sendmsg",
    "type": "CPP"
  },
  {
    "name": "sendto",
    "type": "CPP"
  },
  {
    "name": "setsockopt",
    "type": "CPP"
  },
  {
    "name": "shutdown",
    "type": "CPP"
  },
  {
    "name": "__socket",
    "type": "CPP"
  },
  {
    "name": "socketpair",
    "type": "CPP"
  },
  {
    "name": "isfdtype",
    "type": "CPP"
  },
  {
    "name": "sockatmark",
    "type": "CPP"
  },
  {
    "name": "accept4",
    "type": "CPP"
  },
  {
    "name": "recvmmsg",
    "type": "CPP"
  },
  {
    "name": "__sendmmsg",
    "type": "CPP"
  },
  {
    "name": "__libc_sa_len",
    "type": "CPP"
  },
  {
    "name": "__cmsg_nxthdr",
    "type": "CPP"
  },
  {
    "name": "ftok",
    "type": "CPP"
  },
  {
    "name": "__libc_msgsnd",
    "type": "CPP"
  },
  {
    "name": "__libc_msgrcv",
    "type": "CPP"
  },
  {
    "name": "msgget",
    "type": "CPP"
  },
  {
    "name": "msgctl",
    "type": "CPP"
  },
  {
    "name": "semop",
    "type": "CPP"
  },
  {
    "name": "semget",
    "type": "CPP"
  },
  {
    "name": "semctl",
    "type": "CPP"
  },
  {
    "name": "semtimedop",
    "type": "CPP"
  },
  {
    "name": "shmat",
    "type": "CPP"
  },
  {
    "name": "shmdt",
    "type": "CPP"
  },
  {
    "name": "shmget",
    "type": "CPP"
  },
  {
    "name": "shmctl",
    "type": "CPP"
  },
  {
    "name": "moncontrol",
    "type": "CPP"
  },
  {
    "name": "__monstartup",
    "type": "CPP"
  },
  {
    "name": "_mcleanup",
    "type": "CPP"
  },
  {
    "name": "profil",
    "type": "CPP"
  },
  {
    "name": "sprofil",
    "type": "CPP"
  },
  {
    "name": "__profile_frequency",
    "type": "CPP"
  },
  {
    "name": "_mcount",
    "type": "CPP"
  },
  {
    "name": "__fentry__",
    "type": "CPP"
  },
  {
    "name": "iswalnum",
    "type": "CPP"
  },
  {
    "name": "iswalpha",
    "type": "CPP"
  },
  {
    "name": "iswblank",
    "type": "CPP"
  },
  {
    "name": "iswcntrl",
    "type": "CPP"
  },
  {
    "name": "iswdigit",
    "type": "CPP"
  },
  {
    "name": "iswlower",
    "type": "CPP"
  },
  {
    "name": "iswgraph",
    "type": "CPP"
  },
  {
    "name": "iswprint",
    "type": "CPP"
  },
  {
    "name": "iswpunct",
    "type": "CPP"
  },
  {
    "name": "iswspace",
    "type": "CPP"
  },
  {
    "name": "iswupper",
    "type": "CPP"
  },
  {
    "name": "iswxdigit",
    "type": "CPP"
  },
  {
    "name": "towlower",
    "type": "CPP"
  },
  {
    "name": "towupper",
    "type": "CPP"
  },
  {
    "name": "wctype",
    "type": "CPP"
  },
  {
    "name": "__iswctype",
    "type": "CPP"
  },
  {
    "name": "wctrans",
    "type": "CPP"
  },
  {
    "name": "__towctrans",
    "type": "CPP"
  },
  {
    "name": "__iswalnum_l",
    "type": "CPP"
  },
  {
    "name": "__iswalpha_l",
    "type": "CPP"
  },
  {
    "name": "__iswblank_l",
    "type": "CPP"
  },
  {
    "name": "__iswcntrl_l",
    "type": "CPP"
  },
  {
    "name": "__iswdigit_l",
    "type": "CPP"
  },
  {
    "name": "__iswlower_l",
    "type": "CPP"
  },
  {
    "name": "__iswgraph_l",
    "type": "CPP"
  },
  {
    "name": "__iswprint_l",
    "type": "CPP"
  },
  {
    "name": "__iswpunct_l",
    "type": "CPP"
  },
  {
    "name": "__iswspace_l",
    "type": "CPP"
  },
  {
    "name": "__iswupper_l",
    "type": "CPP"
  },
  {
    "name": "__iswxdigit_l",
    "type": "CPP"
  },
  {
    "name": "__towlower_l",
    "type": "CPP"
  },
  {
    "name": "__towupper_l",
    "type": "CPP"
  },
  {
    "name": "__wctype_l",
    "type": "CPP"
  },
  {
    "name": "__iswctype_l",
    "type": "CPP"
  },
  {
    "name": "__wctrans_l",
    "type": "CPP"
  },
  {
    "name": "__towctrans_l",
    "type": "CPP"
  },
  {
    "name": "getspent",
    "type": "CPP"
  },
  {
    "name": "getspnam",
    "type": "CPP"
  },
  {
    "name": "sgetspent",
    "type": "CPP"
  },
  {
    "name": "fgetspent",
    "type": "CPP"
  },
  {
    "name": "putspent",
    "type": "CPP"
  },
  {
    "name": "setspent",
    "type": "CPP"
  },
  {
    "name": "endspent",
    "type": "CPP"
  },
  {
    "name": "getspent_r",
    "type": "CPP"
  },
  {
    "name": "getspnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_spent",
    "type": "CPP"
  },
  {
    "name": "sgetspent_r",
    "type": "CPP"
  },
  {
    "name": "fgetspent_r",
    "type": "CPP"
  },
  {
    "name": "lckpwdf",
    "type": "CPP"
  },
  {
    "name": "ulckpwdf",
    "type": "CPP"
  },
  {
    "name": "getsgent",
    "type": "CPP"
  },
  {
    "name": "getsgnam",
    "type": "CPP"
  },
  {
    "name": "sgetsgent",
    "type": "CPP"
  },
  {
    "name": "fgetsgent",
    "type": "CPP"
  },
  {
    "name": "putsgent",
    "type": "CPP"
  },
  {
    "name": "setsgent",
    "type": "CPP"
  },
  {
    "name": "endsgent",
    "type": "CPP"
  },
  {
    "name": "getsgent_r",
    "type": "CPP"
  },
  {
    "name": "getsgnam_r",
    "type": "CPP"
  },
  {
    "name": "_nss_files_parse_sgent",
    "type": "CPP"
  },
  {
    "name": "sgetsgent_r",
    "type": "CPP"
  },
  {
    "name": "fgetsgent_r",
    "type": "CPP"
  },
  {
    "name": "argp_failure",
    "type": "CPP"
  },
  {
    "name": "argp_help",
    "type": "CPP"
  },
  {
    "name": "argp_state_help",
    "type": "CPP"
  },
  {
    "name": "argp_error",
    "type": "CPP"
  },
  {
    "name": "argp_parse",
    "type": "CPP"
  },
  {
    "name": "argp_usage",
    "type": "CPP"
  },
  {
    "name": "__backtrace",
    "type": "CPP"
  },
  {
    "name": "__backtrace_symbols",
    "type": "CPP"
  },
  {
    "name": "__backtrace_symbols_fd",
    "type": "CPP"
  },
  {
    "name": "__cyg_profile_func_enter",
    "type": "CPP"
  },
  {
    "name": "__stpcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__strcat_chk",
    "type": "CPP"
  },
  {
    "name": "__strcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__strncat_chk",
    "type": "CPP"
  },
  {
    "name": "__strncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__stpncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__sprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vsprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__snprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vsnprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__printf_chk",
    "type": "CPP"
  },
  {
    "name": "__fprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vfprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__gets_chk",
    "type": "CPP"
  },
  {
    "name": "__chk_fail",
    "type": "CPP"
  },
  {
    "name": "__fgets_chk",
    "type": "CPP"
  },
  {
    "name": "__fgets_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__read_chk",
    "type": "CPP"
  },
  {
    "name": "__pread_chk",
    "type": "CPP"
  },
  {
    "name": "__pread64_chk",
    "type": "CPP"
  },
  {
    "name": "__recv_chk",
    "type": "CPP"
  },
  {
    "name": "__recvfrom_chk",
    "type": "CPP"
  },
  {
    "name": "__readlink_chk",
    "type": "CPP"
  },
  {
    "name": "__readlinkat_chk",
    "type": "CPP"
  },
  {
    "name": "__getwd_chk",
    "type": "CPP"
  },
  {
    "name": "__getcwd_chk",
    "type": "CPP"
  },
  {
    "name": "__realpath_chk",
    "type": "CPP"
  },
  {
    "name": "__fread_chk",
    "type": "CPP"
  },
  {
    "name": "__fread_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__wctomb_chk",
    "type": "CPP"
  },
  {
    "name": "__wcscpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wmemcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wmemmove_chk",
    "type": "CPP"
  },
  {
    "name": "__wmempcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcpcpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__wcscat_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsncat_chk",
    "type": "CPP"
  },
  {
    "name": "__wcpncpy_chk",
    "type": "CPP"
  },
  {
    "name": "__swprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vswprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__wprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__fwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vfwprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__fgetws_chk",
    "type": "CPP"
  },
  {
    "name": "__fgetws_unlocked_chk",
    "type": "CPP"
  },
  {
    "name": "__confstr_chk",
    "type": "CPP"
  },
  {
    "name": "__getgroups_chk",
    "type": "CPP"
  },
  {
    "name": "__ttyname_r_chk",
    "type": "CPP"
  },
  {
    "name": "__gethostname_chk",
    "type": "CPP"
  },
  {
    "name": "__getdomainname_chk",
    "type": "CPP"
  },
  {
    "name": "__wcrtomb_chk",
    "type": "CPP"
  },
  {
    "name": "__mbsnrtowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsnrtombs_chk",
    "type": "CPP"
  },
  {
    "name": "__mbsrtowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcsrtombs_chk",
    "type": "CPP"
  },
  {
    "name": "__mbstowcs_chk",
    "type": "CPP"
  },
  {
    "name": "__wcstombs_chk",
    "type": "CPP"
  },
  {
    "name": "__asprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vasprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__dprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__vdprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__obstack_printf_chk",
    "type": "CPP"
  },
  {
    "name": "__obstack_vprintf_chk",
    "type": "CPP"
  },
  {
    "name": "__longjmp_chk",
    "type": "CPP"
  },
  {
    "name": "__fdelt_chk",
    "type": "CPP"
  },
  {
    "name": "__poll_chk",
    "type": "CPP"
  },
  {
    "name": "__ppoll_chk",
    "type": "CPP"
  },
  {
    "name": "__explicit_bzero_chk",
    "type": "CPP"
  },
  {
    "name": "__stack_chk_fail",
    "type": "CPP"
  },
  {
    "name": "__fortify_fail",
    "type": "CPP"
  },
  {
    "name": "htonl",
    "type": "CPP"
  },
  {
    "name": "htons",
    "type": "CPP"
  },
  {
    "name": "inet_lnaof",
    "type": "CPP"
  },
  {
    "name": "inet_makeaddr",
    "type": "CPP"
  },
  {
    "name": "inet_netof",
    "type": "CPP"
  },
  {
    "name": "inet_ntoa",
    "type": "CPP"
  },
  {
    "name": "inet_network",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "gethostbyaddr",
    "type": "CPP"
  },
  {
    "name": "gethostbyaddr_r",
    "type": "CPP"
  },
  {
    "name": "gethostbyname",
    "type": "CPP"
  },
  {
    "name": "gethostbyname2",
    "type": "CPP"
  },
  {
    "name": "gethostbyname2_r",
    "type": "CPP"
  },
  {
    "name": "gethostbyname_r",
    "type": "CPP"
  },
  {
    "name": "gethostent",
    "type": "CPP"
  },
  {
    "name": "sethostent",
    "type": "CPP"
  },
  {
    "name": "endhostent",
    "type": "CPP"
  },
  {
    "name": "gethostent_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyaddr",
    "type": "CPP"
  },
  {
    "name": "getnetbyaddr_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyname",
    "type": "CPP"
  },
  {
    "name": "getnetent",
    "type": "CPP"
  },
  {
    "name": "setnetent",
    "type": "CPP"
  },
  {
    "name": "endnetent",
    "type": "CPP"
  },
  {
    "name": "getnetent_r",
    "type": "CPP"
  },
  {
    "name": "getnetbyname_r",
    "type": "CPP"
  },
  {
    "name": "getprotobynumber",
    "type": "CPP"
  },
  {
    "name": "getprotobynumber_r",
    "type": "CPP"
  },
  {
    "name": "getprotoent",
    "type": "CPP"
  },
  {
    "name": "setprotoent",
    "type": "CPP"
  },
  {
    "name": "endprotoent",
    "type": "CPP"
  },
  {
    "name": "getprotoent_r",
    "type": "CPP"
  },
  {
    "name": "getprotobyname",
    "type": "CPP"
  },
  {
    "name": "getprotobyname_r",
    "type": "CPP"
  },
  {
    "name": "getservbyname",
    "type": "CPP"
  },
  {
    "name": "getservbyname_r",
    "type": "CPP"
  },
  {
    "name": "getservbyport",
    "type": "CPP"
  },
  {
    "name": "getservbyport_r",
    "type": "CPP"
  },
  {
    "name": "getservent",
    "type": "CPP"
  },
  {
    "name": "setservent",
    "type": "CPP"
  },
  {
    "name": "endservent",
    "type": "CPP"
  },
  {
    "name": "getservent_r",
    "type": "CPP"
  },
  {
    "name": "ether_aton",
    "type": "CPP"
  },
  {
    "name": "ether_aton_r",
    "type": "CPP"
  },
  {
    "name": "ether_hostton",
    "type": "CPP"
  },
  {
    "name": "ether_line",
    "type": "CPP"
  },
  {
    "name": "ether_ntoa",
    "type": "CPP"
  },
  {
    "name": "ether_ntoa_r",
    "type": "CPP"
  },
  {
    "name": "ether_ntohost",
    "type": "CPP"
  },
  {
    "name": "rresvport_af",
    "type": "CPP"
  },
  {
    "name": "rcmd_af",
    "type": "CPP"
  },
  {
    "name": "rcmd",
    "type": "CPP"
  },
  {
    "name": "rresvport",
    "type": "CPP"
  },
  {
    "name": "ruserok_af",
    "type": "CPP"
  },
  {
    "name": "ruserok",
    "type": "CPP"
  },
  {
    "name": "iruserok_af",
    "type": "CPP"
  },
  {
    "name": "iruserok",
    "type": "CPP"
  },
  {
    "name": "__ivaliduser",
    "type": "CPP"
  },
  {
    "name": "rexec_af",
    "type": "CPP"
  },
  {
    "name": "rexec",
    "type": "CPP"
  },
  {
    "name": "ruserpass",
    "type": "CPP"
  },
  {
    "name": "__internal_setnetgrent",
    "type": "CPP"
  },
  {
    "name": "setnetgrent",
    "type": "CPP"
  },
  {
    "name": "__internal_endnetgrent",
    "type": "CPP"
  },
  {
    "name": "endnetgrent",
    "type": "CPP"
  },
  {
    "name": "__internal_getnetgrent_r",
    "type": "CPP"
  },
  {
    "name": "getnetgrent_r",
    "type": "CPP"
  },
  {
    "name": "innetgr",
    "type": "CPP"
  },
  {
    "name": "getnetgrent",
    "type": "CPP"
  },
  {
    "name": "setaliasent",
    "type": "CPP"
  },
  {
    "name": "endaliasent",
    "type": "CPP"
  },
  {
    "name": "getaliasent_r",
    "type": "CPP"
  },
  {
    "name": "getaliasent",
    "type": "CPP"
  },
  {
    "name": "getaliasbyname",
    "type": "CPP"
  },
  {
    "name": "getaliasbyname_r",
    "type": "CPP"
  },
  {
    "name": "getnameinfo",
    "type": "CPP"
  },
  {
    "name": "if_nametoindex",
    "type": "CPP"
  },
  {
    "name": "if_freenameindex",
    "type": "CPP"
  },
  {
    "name": "if_nameindex",
    "type": "CPP"
  },
  {
    "name": "if_indextoname",
    "type": "CPP"
  },
  {
    "name": "getifaddrs",
    "type": "CPP"
  },
  {
    "name": "freeifaddrs",
    "type": "CPP"
  },
  {
    "name": "inet6_option_space",
    "type": "CPP"
  },
  {
    "name": "inet6_option_init",
    "type": "CPP"
  },
  {
    "name": "inet6_option_append",
    "type": "CPP"
  },
  {
    "name": "inet6_option_alloc",
    "type": "CPP"
  },
  {
    "name": "inet6_option_next",
    "type": "CPP"
  },
  {
    "name": "inet6_option_find",
    "type": "CPP"
  },
  {
    "name": "getipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "setipv4sourcefilter",
    "type": "CPP"
  },
  {
    "name": "getsourcefilter",
    "type": "CPP"
  },
  {
    "name": "setsourcefilter",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_init",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_append",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_finish",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_set_val",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_next",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_find",
    "type": "CPP"
  },
  {
    "name": "inet6_opt_get_val",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_space",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_init",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_add",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_reverse",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_segments",
    "type": "CPP"
  },
  {
    "name": "inet6_rth_getaddr",
    "type": "CPP"
  },
  {
    "name": "__inet6_scopeid_pton",
    "type": "CPP"
  },
  {
    "name": "__idna_to_dns_encoding",
    "type": "CPP"
  },
  {
    "name": "__idna_from_dns_encoding",
    "type": "CPP"
  },
  {
    "name": "__netlink_assert_response",
    "type": "CPP"
  },
  {
    "name": "herror",
    "type": "CPP"
  },
  {
    "name": "hstrerror",
    "type": "CPP"
  },
  {
    "name": "__inet_aton_exact",
    "type": "CPP"
  },
  {
    "name": "inet_aton",
    "type": "CPP"
  },
  {
    "name": "inet_addr",
    "type": "CPP"
  },
  {
    "name": "inet_ntop",
    "type": "CPP"
  },
  {
    "name": "__inet_pton_length",
    "type": "CPP"
  },
  {
    "name": "inet_pton",
    "type": "CPP"
  },
  {
    "name": "inet_nsap_addr",
    "type": "CPP"
  },
  {
    "name": "inet_nsap_ntoa",
    "type": "CPP"
  },
  {
    "name": "__res_ninit",
    "type": "CPP"
  },
  {
    "name": "__res_init",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__res_randomid",
    "type": "CPP"
  },
  {
    "name": "__res_iclose",
    "type": "CPP"
  },
  {
    "name": "__res_nclose",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get_preinit",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_get_override",
    "type": "CPP"
  },
  {
    "name": "__resolv_context_put",
    "type": "CPP"
  },
  {
    "name": "__gai_sigqueue",
    "type": "CPP"
  },
  {
    "name": "__nss_database_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_configure_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_lookup_function",
    "type": "CPP"
  },
  {
    "name": "__nss_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_next2",
    "type": "CPP"
  },
  {
    "name": "__nss_disable_nscd",
    "type": "CPP"
  },
  {
    "name": "__nss_hostname_digits_dots",
    "type": "CPP"
  },
  {
    "name": "__nss_services_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_hosts_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_group_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_passwd_lookup2",
    "type": "CPP"
  },
  {
    "name": "__nss_hash",
    "type": "CPP"
  },
  {
    "name": "authnone_create",
    "type": "CPP"
  },
  {
    "name": "xdr_authunix_parms",
    "type": "CPP"
  },
  {
    "name": "bindresvport",
    "type": "CPP"
  },
  {
    "name": "clntraw_create",
    "type": "CPP"
  },
  {
    "name": "callrpc",
    "type": "CPP"
  },
  {
    "name": "_rpc_dtablesize",
    "type": "CPP"
  },
  {
    "name": "getrpcport",
    "type": "CPP"
  },
  {
    "name": "pmap_set",
    "type": "CPP"
  },
  {
    "name": "pmap_unset",
    "type": "CPP"
  },
  {
    "name": "pmap_getmaps",
    "type": "CPP"
  },
  {
    "name": "xdr_pmap",
    "type": "CPP"
  },
  {
    "name": "xdr_pmaplist",
    "type": "CPP"
  },
  {
    "name": "xdr_rmtcallres",
    "type": "CPP"
  },
  {
    "name": "xdr_rmtcall_args",
    "type": "CPP"
  },
  {
    "name": "pmap_rmtcall",
    "type": "CPP"
  },
  {
    "name": "clnt_broadcast",
    "type": "CPP"
  },
  {
    "name": "xdr_rejected_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_accepted_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_opaque_auth",
    "type": "CPP"
  },
  {
    "name": "xdr_des_block",
    "type": "CPP"
  },
  {
    "name": "xdr_replymsg",
    "type": "CPP"
  },
  {
    "name": "xdr_callhdr",
    "type": "CPP"
  },
  {
    "name": "_seterr_reply",
    "type": "CPP"
  },
  {
    "name": "xdr_callmsg",
    "type": "CPP"
  },
  {
    "name": "_authenticate",
    "type": "CPP"
  },
  {
    "name": "svcraw_create",
    "type": "CPP"
  },
  {
    "name": "registerrpc",
    "type": "CPP"
  },
  {
    "name": "xdr_float",
    "type": "CPP"
  },
  {
    "name": "xdr_double",
    "type": "CPP"
  },
  {
    "name": "xdrrec_create",
    "type": "CPP"
  },
  {
    "name": "xdrrec_skiprecord",
    "type": "CPP"
  },
  {
    "name": "xdrrec_eof",
    "type": "CPP"
  },
  {
    "name": "xdrrec_endofrecord",
    "type": "CPP"
  },
  {
    "name": "getpublickey",
    "type": "CPP"
  },
  {
    "name": "getsecretkey",
    "type": "CPP"
  },
  {
    "name": "xdr_authdes_cred",
    "type": "CPP"
  },
  {
    "name": "xdr_authdes_verf",
    "type": "CPP"
  },
  {
    "name": "cbc_crypt",
    "type": "CPP"
  },
  {
    "name": "ecb_crypt",
    "type": "CPP"
  },
  {
    "name": "des_setparity",
    "type": "CPP"
  },
  {
    "name": "xdr_keystatus",
    "type": "CPP"
  },
  {
    "name": "xdr_keybuf",
    "type": "CPP"
  },
  {
    "name": "xdr_netnamestr",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyarg",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyarg2",
    "type": "CPP"
  },
  {
    "name": "xdr_cryptkeyres",
    "type": "CPP"
  },
  {
    "name": "xdr_unixcred",
    "type": "CPP"
  },
  {
    "name": "xdr_getcredres",
    "type": "CPP"
  },
  {
    "name": "xdr_key_netstarg",
    "type": "CPP"
  },
  {
    "name": "xdr_key_netstres",
    "type": "CPP"
  },
  {
    "name": "rtime",
    "type": "CPP"
  },
  {
    "name": "authdes_getucred",
    "type": "CPP"
  },
  {
    "name": "getrpcent",
    "type": "CPP"
  },
  {
    "name": "getrpcbyname",
    "type": "CPP"
  },
  {
    "name": "getrpcbynumber",
    "type": "CPP"
  },
  {
    "name": "setrpcent",
    "type": "CPP"
  },
  {
    "name": "endrpcent",
    "type": "CPP"
  },
  {
    "name": "getrpcent_r",
    "type": "CPP"
  },
  {
    "name": "getrpcbyname_r",
    "type": "CPP"
  },
  {
    "name": "getrpcbynumber_r",
    "type": "CPP"
  },
  {
    "name": "clntunix_create",
    "type": "CPP"
  },
  {
    "name": "svcunix_create",
    "type": "CPP"
  },
  {
    "name": "svcunixfd_create",
    "type": "CPP"
  },
  {
    "name": "authdes_pk_create",
    "type": "CPP"
  },
  {
    "name": "authdes_create",
    "type": "CPP"
  },
  {
    "name": "authunix_create",
    "type": "CPP"
  },
  {
    "name": "authunix_create_default",
    "type": "CPP"
  },
  {
    "name": "clnt_create",
    "type": "CPP"
  },
  {
    "name": "clnt_sperror",
    "type": "CPP"
  },
  {
    "name": "clnt_perror",
    "type": "CPP"
  },
  {
    "name": "clnt_sperrno",
    "type": "CPP"
  },
  {
    "name": "clnt_perrno",
    "type": "CPP"
  },
  {
    "name": "clnt_spcreateerror",
    "type": "CPP"
  },
  {
    "name": "clnt_pcreateerror",
    "type": "CPP"
  },
  {
    "name": "clnttcp_create",
    "type": "CPP"
  },
  {
    "name": "__libc_clntudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "clntudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "clntudp_create",
    "type": "CPP"
  },
  {
    "name": "get_myaddress",
    "type": "CPP"
  },
  {
    "name": "key_setsecret",
    "type": "CPP"
  },
  {
    "name": "key_secretkey_is_set",
    "type": "CPP"
  },
  {
    "name": "key_encryptsession",
    "type": "CPP"
  },
  {
    "name": "key_decryptsession",
    "type": "CPP"
  },
  {
    "name": "key_encryptsession_pk",
    "type": "CPP"
  },
  {
    "name": "key_decryptsession_pk",
    "type": "CPP"
  },
  {
    "name": "key_gendes",
    "type": "CPP"
  },
  {
    "name": "key_setnet",
    "type": "CPP"
  },
  {
    "name": "key_get_conv",
    "type": "CPP"
  },
  {
    "name": "user2netname",
    "type": "CPP"
  },
  {
    "name": "host2netname",
    "type": "CPP"
  },
  {
    "name": "getnetname",
    "type": "CPP"
  },
  {
    "name": "netname2user",
    "type": "CPP"
  },
  {
    "name": "netname2host",
    "type": "CPP"
  },
  {
    "name": "__libc_rpc_getport",
    "type": "CPP"
  },
  {
    "name": "pmap_getport",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_fdset",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_createerr",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_pollfd",
    "type": "CPP"
  },
  {
    "name": "__rpc_thread_svc_max_pollfd",
    "type": "CPP"
  },
  {
    "name": "xprt_register",
    "type": "CPP"
  },
  {
    "name": "xprt_unregister",
    "type": "CPP"
  },
  {
    "name": "svc_register",
    "type": "CPP"
  },
  {
    "name": "svc_unregister",
    "type": "CPP"
  },
  {
    "name": "svc_sendreply",
    "type": "CPP"
  },
  {
    "name": "svcerr_noproc",
    "type": "CPP"
  },
  {
    "name": "svcerr_decode",
    "type": "CPP"
  },
  {
    "name": "svcerr_systemerr",
    "type": "CPP"
  },
  {
    "name": "svcerr_auth",
    "type": "CPP"
  },
  {
    "name": "svcerr_weakauth",
    "type": "CPP"
  },
  {
    "name": "svcerr_noprog",
    "type": "CPP"
  },
  {
    "name": "svcerr_progvers",
    "type": "CPP"
  },
  {
    "name": "svc_getreq_common",
    "type": "CPP"
  },
  {
    "name": "svc_getreqset",
    "type": "CPP"
  },
  {
    "name": "svc_getreq_poll",
    "type": "CPP"
  },
  {
    "name": "svc_getreq",
    "type": "CPP"
  },
  {
    "name": "svctcp_create",
    "type": "CPP"
  },
  {
    "name": "svcfd_create",
    "type": "CPP"
  },
  {
    "name": "svcudp_bufcreate",
    "type": "CPP"
  },
  {
    "name": "svcudp_create",
    "type": "CPP"
  },
  {
    "name": "svcudp_enablecache",
    "type": "CPP"
  },
  {
    "name": "passwd2des",
    "type": "CPP"
  },
  {
    "name": "xencrypt",
    "type": "CPP"
  },
  {
    "name": "xdecrypt",
    "type": "CPP"
  },
  {
    "name": "xdr_array",
    "type": "CPP"
  },
  {
    "name": "xdr_vector",
    "type": "CPP"
  },
  {
    "name": "xdr_free",
    "type": "CPP"
  },
  {
    "name": "xdr_void",
    "type": "CPP"
  },
  {
    "name": "xdr_int",
    "type": "CPP"
  },
  {
    "name": "xdr_u_int",
    "type": "CPP"
  },
  {
    "name": "xdr_long",
    "type": "CPP"
  },
  {
    "name": "xdr_u_long",
    "type": "CPP"
  },
  {
    "name": "xdr_hyper",
    "type": "CPP"
  },
  {
    "name": "xdr_u_hyper",
    "type": "CPP"
  },
  {
    "name": "xdr_longlong_t",
    "type": "CPP"
  },
  {
    "name": "xdr_u_longlong_t",
    "type": "CPP"
  },
  {
    "name": "xdr_short",
    "type": "CPP"
  },
  {
    "name": "xdr_u_short",
    "type": "CPP"
  },
  {
    "name": "xdr_char",
    "type": "CPP"
  },
  {
    "name": "xdr_u_char",
    "type": "CPP"
  },
  {
    "name": "xdr_bool",
    "type": "CPP"
  },
  {
    "name": "xdr_enum",
    "type": "CPP"
  },
  {
    "name": "xdr_opaque",
    "type": "CPP"
  },
  {
    "name": "xdr_bytes",
    "type": "CPP"
  },
  {
    "name": "xdr_netobj",
    "type": "CPP"
  },
  {
    "name": "xdr_union",
    "type": "CPP"
  },
  {
    "name": "xdr_string",
    "type": "CPP"
  },
  {
    "name": "xdr_wrapstring",
    "type": "CPP"
  },
  {
    "name": "xdr_int64_t",
    "type": "CPP"
  },
  {
    "name": "xdr_quad_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint64_t",
    "type": "CPP"
  },
  {
    "name": "xdr_u_quad_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int32_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint32_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int16_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint16_t",
    "type": "CPP"
  },
  {
    "name": "xdr_int8_t",
    "type": "CPP"
  },
  {
    "name": "xdr_uint8_t",
    "type": "CPP"
  },
  {
    "name": "xdrmem_create",
    "type": "CPP"
  },
  {
    "name": "xdr_reference",
    "type": "CPP"
  },
  {
    "name": "xdr_pointer",
    "type": "CPP"
  },
  {
    "name": "xdr_sizeof",
    "type": "CPP"
  },
  {
    "name": "xdrstdio_create",
    "type": "CPP"
  },
  {
    "name": "svc_exit",
    "type": "CPP"
  },
  {
    "name": "svc_run",
    "type": "CPP"
  },
  {
    "name": "getlogin",
    "type": "CPP"
  },
  {
    "name": "getlogin_r",
    "type": "CPP"
  },
  {
    "name": "setlogin",
    "type": "CPP"
  },
  {
    "name": "__getlogin_r_chk",
    "type": "CPP"
  },
  {
    "name": "getutent",
    "type": "CPP"
  },
  {
    "name": "setutent",
    "type": "CPP"
  },
  {
    "name": "getutent_r",
    "type": "CPP"
  },
  {
    "name": "pututline",
    "type": "CPP"
  },
  {
    "name": "endutent",
    "type": "CPP"
  },
  {
    "name": "getutid",
    "type": "CPP"
  },
  {
    "name": "getutline",
    "type": "CPP"
  },
  {
    "name": "getutid_r",
    "type": "CPP"
  },
  {
    "name": "getutline_r",
    "type": "CPP"
  },
  {
    "name": "utmpname",
    "type": "CPP"
  },
  {
    "name": "updwtmp",
    "type": "CPP"
  },
  {
    "name": "posix_openpt",
    "type": "CPP"
  },
  {
    "name": "getpt",
    "type": "CPP"
  },
  {
    "name": "grantpt",
    "type": "CPP"
  },
  {
    "name": "unlockpt",
    "type": "CPP"
  },
  {
    "name": "ptsname",
    "type": "CPP"
  },
  {
    "name": "ptsname_r",
    "type": "CPP"
  },
  {
    "name": "__ptsname_r_chk",
    "type": "CPP"
  },
  {
    "name": "setutxent",
    "type": "CPP"
  },
  {
    "name": "getutxent",
    "type": "CPP"
  },
  {
    "name": "endutxent",
    "type": "CPP"
  },
  {
    "name": "getutxid",
    "type": "CPP"
  },
  {
    "name": "getutxline",
    "type": "CPP"
  },
  {
    "name": "pututxline",
    "type": "CPP"
  },
  {
    "name": "utmpxname",
    "type": "CPP"
  },
  {
    "name": "updwtmpx",
    "type": "CPP"
  },
  {
    "name": "getutmp",
    "type": "CPP"
  },
  {
    "name": "dl_iterate_phdr",
    "type": "CPP"
  },
  {
    "name": "_dl_addr",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount_wrapper",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount_wrapper_check",
    "type": "CPP"
  },
  {
    "name": "__libc_dlopen_mode",
    "type": "CPP"
  },
  {
    "name": "__libc_dlsym",
    "type": "CPP"
  },
  {
    "name": "__libc_dlvsym",
    "type": "CPP"
  },
  {
    "name": "__libc_dlclose",
    "type": "CPP"
  },
  {
    "name": "_dl_vsym",
    "type": "CPP"
  },
  {
    "name": "_dl_sym",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_error",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_error",
    "type": "CPP"
  },
  {
    "name": "__sigismember",
    "type": "CPP"
  },
  {
    "name": "__sigaddset",
    "type": "CPP"
  },
  {
    "name": "__sigdelset",
    "type": "CPP"
  },
  {
    "name": "quick_exit",
    "type": "CPP"
  },
  {
    "name": "realpath",
    "type": "CPP"
  },
  {
    "name": "_IO_vfscanf",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "malloc_get_state",
    "type": "CPP"
  },
  {
    "name": "malloc_set_state",
    "type": "CPP"
  },
  {
    "name": "stime",
    "type": "CPP"
  },
  {
    "name": "regexec",
    "type": "CPP"
  },
  {
    "name": "glob",
    "type": "CPP"
  },
  {
    "name": "sched_getaffinity",
    "type": "CPP"
  },
  {
    "name": "sched_setaffinity",
    "type": "CPP"
  },
  {
    "name": "posix_spawn",
    "type": "CPP"
  },
  {
    "name": "posix_spawnp",
    "type": "CPP"
  },
  {
    "name": "fattach",
    "type": "CPP"
  },
  {
    "name": "fdetach",
    "type": "CPP"
  },
  {
    "name": "getmsg",
    "type": "CPP"
  },
  {
    "name": "getpmsg",
    "type": "CPP"
  },
  {
    "name": "isastream",
    "type": "CPP"
  },
  {
    "name": "putmsg",
    "type": "CPP"
  },
  {
    "name": "putpmsg",
    "type": "CPP"
  },
  {
    "name": "nftw",
    "type": "CPP"
  },
  {
    "name": "step",
    "type": "CPP"
  },
  {
    "name": "advance",
    "type": "CPP"
  },
  {
    "name": "__nss_group_lookup",
    "type": "CPP"
  },
  {
    "name": "__nss_next",
    "type": "CPP"
  },
  {
    "name": "__nss_database_lookup",
    "type": "CPP"
  },
  {
    "name": "__libc_freeres",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libpthread-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "_init",
    "type": "CPP"
  },
  {
    "name": "free_stacks.cold",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid_error.cold",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid.cold",
    "type": "CPP"
  },
  {
    "name": "__pthread_create_2_1.cold",
    "type": "CPP"
  },
  {
    "name": "deregister_tm_clones",
    "type": "CPP"
  },
  {
    "name": "register_tm_clones",
    "type": "CPP"
  },
  {
    "name": "__do_global_dtors_aux",
    "type": "CPP"
  },
  {
    "name": "frame_dummy",
    "type": "CPP"
  },
  {
    "name": "__nptl_set_robust",
    "type": "CPP"
  },
  {
    "name": "sigcancel_handler",
    "type": "CPP"
  },
  {
    "name": "sighandler_setxid",
    "type": "CPP"
  },
  {
    "name": "__pthread_initialize_minimal",
    "type": "CPP"
  },
  {
    "name": "__pthread_get_minstack",
    "type": "CPP"
  },
  {
    "name": "__libpthread_freeres",
    "type": "CPP"
  },
  {
    "name": "__GI___nptl_create_event",
    "type": "CPP"
  },
  {
    "name": "__GI___nptl_death_event",
    "type": "CPP"
  },
  {
    "name": "__nptl_main",
    "type": "CPP"
  },
  {
    "name": "free_stacks",
    "type": "CPP"
  },
  {
    "name": "create_thread",
    "type": "CPP"
  },
  {
    "name": "setxid_mark_thread.isra.0",
    "type": "CPP"
  },
  {
    "name": "__nptl_deallocate_tsd.part.0",
    "type": "CPP"
  },
  {
    "name": "__nptl_stacks_freeres",
    "type": "CPP"
  },
  {
    "name": "__deallocate_stack",
    "type": "CPP"
  },
  {
    "name": "__make_stacks_executable",
    "type": "CPP"
  },
  {
    "name": "__reclaim_stacks",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid_error",
    "type": "CPP"
  },
  {
    "name": "__nptl_setxid",
    "type": "CPP"
  },
  {
    "name": "__pthread_init_static_tls",
    "type": "CPP"
  },
  {
    "name": "__wait_lookup_done",
    "type": "CPP"
  },
  {
    "name": "__find_in_stack_list",
    "type": "CPP"
  },
  {
    "name": "__nptl_deallocate_tsd",
    "type": "CPP"
  },
  {
    "name": "__free_tcb",
    "type": "CPP"
  },
  {
    "name": "start_thread",
    "type": "CPP"
  },
  {
    "name": "__pthread_create_2_1",
    "type": "CPP"
  },
  {
    "name": "__pthread_exit",
    "type": "CPP"
  },
  {
    "name": "__pthread_detach",
    "type": "CPP"
  },
  {
    "name": "__pthread_join",
    "type": "CPP"
  },
  {
    "name": "pthread_tryjoin_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_timedjoin_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_clockjoin_np",
    "type": "CPP"
  },
  {
    "name": "cleanup",
    "type": "CPP"
  },
  {
    "name": "__pthread_clockjoin_ex",
    "type": "CPP"
  },
  {
    "name": "pthread_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_getconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_setconcurrency",
    "type": "CPP"
  },
  {
    "name": "__pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "__pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedprio",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setguardsize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstackaddr",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstackaddr",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstacksize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstacksize",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getstack",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setstack",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_np",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_lock_full",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_trylock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_clocklock_common",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_clocklock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_timedlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock_full",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock_usercnt",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock_full",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_cond_lock_adjust",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutexattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_mutexattr_settype",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_destroy",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_rdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedrdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockrdlock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_wrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedwrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockwrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_tryrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_trywrlock",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_rwlock_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "__condvar_cancel_waiting",
    "type": "CPP"
  },
  {
    "name": "__condvar_cleanup_waiting",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_clockwait",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_init_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_destroy_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_wait_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_timedwait_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_signal_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_cond_broadcast_2_0",
    "type": "CPP"
  },
  {
    "name": "__pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getclock",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setclock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrier_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_key_create",
    "type": "CPP"
  },
  {
    "name": "__pthread_key_delete",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_getspecific",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_setspecific",
    "type": "CPP"
  },
  {
    "name": "pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "__pthread_kill",
    "type": "CPP"
  },
  {
    "name": "pthread_sigqueue",
    "type": "CPP"
  },
  {
    "name": "__pthread_cancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "__pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__pthread_once_slow",
    "type": "CPP"
  },
  {
    "name": "clear_once_control",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_once",
    "type": "CPP"
  },
  {
    "name": "__dyn_pthread_atfork",
    "type": "CPP"
  },
  {
    "name": "pthread_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "where_is_shmfs",
    "type": "CPP"
  },
  {
    "name": "__GI___shm_directory",
    "type": "CPP"
  },
  {
    "name": "__shm_directory_freeres",
    "type": "CPP"
  },
  {
    "name": "__new_sem_init",
    "type": "CPP"
  },
  {
    "name": "__new_sem_destroy",
    "type": "CPP"
  },
  {
    "name": "check_add_mapping",
    "type": "CPP"
  },
  {
    "name": "__sem_search",
    "type": "CPP"
  },
  {
    "name": "sem_open",
    "type": "CPP"
  },
  {
    "name": "walker",
    "type": "CPP"
  },
  {
    "name": "sem_close",
    "type": "CPP"
  },
  {
    "name": "sem_unlink",
    "type": "CPP"
  },
  {
    "name": "__new_sem_getvalue",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_trywait",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait.constprop.0",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow.constprop.0",
    "type": "CPP"
  },
  {
    "name": "sem_timedwait",
    "type": "CPP"
  },
  {
    "name": "__sem_wait_cleanup",
    "type": "CPP"
  },
  {
    "name": "do_futex_wait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_wait_slow",
    "type": "CPP"
  },
  {
    "name": "sem_clockwait",
    "type": "CPP"
  },
  {
    "name": "__new_sem_post",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_register_cancel",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unregister_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel_restore",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_push",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_pop",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_push_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_pop_restore",
    "type": "CPP"
  },
  {
    "name": "unwind_stop",
    "type": "CPP"
  },
  {
    "name": "unwind_cleanup",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unwind",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_unwind_next",
    "type": "CPP"
  },
  {
    "name": "longjmp_alias",
    "type": "CPP"
  },
  {
    "name": "__GI___pthread_cleanup_upto",
    "type": "CPP"
  },
  {
    "name": "__pthread_enable_asynccancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_disable_asynccancel",
    "type": "CPP"
  },
  {
    "name": "__lll_lock_wait_private",
    "type": "CPP"
  },
  {
    "name": "__lll_lock_wait",
    "type": "CPP"
  },
  {
    "name": "__lll_clocklock_wait",
    "type": "CPP"
  },
  {
    "name": "__fork_alias",
    "type": "CPP"
  },
  {
    "name": "__fcntl_alias",
    "type": "CPP"
  },
  {
    "name": "__libc_write",
    "type": "CPP"
  },
  {
    "name": "__libc_read",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "__libc_recv",
    "type": "CPP"
  },
  {
    "name": "__libc_recvfrom",
    "type": "CPP"
  },
  {
    "name": "__libc_send",
    "type": "CPP"
  },
  {
    "name": "__libc_sendto",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "__libc_lseek",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__libc_open",
    "type": "CPP"
  },
  {
    "name": "__libc_pause",
    "type": "CPP"
  },
  {
    "name": "__libc_pread",
    "type": "CPP"
  },
  {
    "name": "__libc_pwrite",
    "type": "CPP"
  },
  {
    "name": "__libc_tcdrain",
    "type": "CPP"
  },
  {
    "name": "__libc_msgrcv",
    "type": "CPP"
  },
  {
    "name": "__libc_msgsnd",
    "type": "CPP"
  },
  {
    "name": "__libc_sigwait",
    "type": "CPP"
  },
  {
    "name": "__libc_sigsuspend",
    "type": "CPP"
  },
  {
    "name": "__libc_recvmsg",
    "type": "CPP"
  },
  {
    "name": "__libc_sendmsg",
    "type": "CPP"
  },
  {
    "name": "gsignal",
    "type": "CPP"
  },
  {
    "name": "system_alias",
    "type": "CPP"
  },
  {
    "name": "__flockfile",
    "type": "CPP"
  },
  {
    "name": "__ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "__funlockfile",
    "type": "CPP"
  },
  {
    "name": "__restore_rt",
    "type": "CPP"
  },
  {
    "name": "__libc_sigaction",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "__pthread_kill_other_threads_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_getaffinity_new",
    "type": "CPP"
  },
  {
    "name": "pthread_getaffinity_np@GLIBC_2.3.3",
    "type": "CPP"
  },
  {
    "name": "__pthread_setaffinity_new",
    "type": "CPP"
  },
  {
    "name": "pthread_setaffinity_np@GLIBC_2.3.3",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_getaffinity_new",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getaffinity_np@GLIBC_2.3.3",
    "type": "CPP"
  },
  {
    "name": "__pthread_attr_setaffinity_new",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setaffinity_np@GLIBC_2.3.3",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_consistent",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_routine",
    "type": "CPP"
  },
  {
    "name": "pthread_cancel_init",
    "type": "CPP"
  },
  {
    "name": "__nptl_unwind_freeres",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume",
    "type": "CPP"
  },
  {
    "name": "__gcc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "_Unwind_ForcedUnwind",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetCFA",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "__init_sched_fifo_prio",
    "type": "CPP"
  },
  {
    "name": "__pthread_tpp_change_priority",
    "type": "CPP"
  },
  {
    "name": "__pthread_current_priority",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_setname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setattr_default_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_default_np",
    "type": "CPP"
  },
  {
    "name": "thrd_create",
    "type": "CPP"
  },
  {
    "name": "thrd_detach",
    "type": "CPP"
  },
  {
    "name": "thrd_exit",
    "type": "CPP"
  },
  {
    "name": "thrd_join",
    "type": "CPP"
  },
  {
    "name": "mtx_destroy",
    "type": "CPP"
  },
  {
    "name": "mtx_init",
    "type": "CPP"
  },
  {
    "name": "mtx_lock",
    "type": "CPP"
  },
  {
    "name": "mtx_timedlock",
    "type": "CPP"
  },
  {
    "name": "mtx_trylock",
    "type": "CPP"
  },
  {
    "name": "mtx_unlock",
    "type": "CPP"
  },
  {
    "name": "call_once",
    "type": "CPP"
  },
  {
    "name": "cnd_broadcast",
    "type": "CPP"
  },
  {
    "name": "cnd_destroy",
    "type": "CPP"
  },
  {
    "name": "cnd_init",
    "type": "CPP"
  },
  {
    "name": "cnd_signal",
    "type": "CPP"
  },
  {
    "name": "cnd_timedwait",
    "type": "CPP"
  },
  {
    "name": "cnd_wait",
    "type": "CPP"
  },
  {
    "name": "tss_create",
    "type": "CPP"
  },
  {
    "name": "tss_delete",
    "type": "CPP"
  },
  {
    "name": "tss_get",
    "type": "CPP"
  },
  {
    "name": "tss_set",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_mutex_spin_count",
    "type": "CPP"
  },
  {
    "name": "__pthread_tunables_init",
    "type": "CPP"
  },
  {
    "name": "__libpthread_version_placeholder",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_elision_skip_lock_busy",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_elision_skip_lock_internal_abort",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_elision_retry_try_xbegin",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_elision_skip_trylock_internal_abort",
    "type": "CPP"
  },
  {
    "name": "elision_init",
    "type": "CPP"
  },
  {
    "name": "_dl_tunable_set_elision_enable",
    "type": "CPP"
  },
  {
    "name": "__lll_lock_elision",
    "type": "CPP"
  },
  {
    "name": "__lll_unlock_elision",
    "type": "CPP"
  },
  {
    "name": "__lll_clocklock_elision",
    "type": "CPP"
  },
  {
    "name": "__lll_trylock_elision",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "__pthread_initialize_minimal",
    "type": "CPP"
  },
  {
    "name": "__pthread_get_minstack",
    "type": "CPP"
  },
  {
    "name": "__libpthread_freeres",
    "type": "CPP"
  },
  {
    "name": "pthread_create",
    "type": "CPP"
  },
  {
    "name": "pthread_exit",
    "type": "CPP"
  },
  {
    "name": "pthread_detach",
    "type": "CPP"
  },
  {
    "name": "pthread_join",
    "type": "CPP"
  },
  {
    "name": "pthread_tryjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_timedjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_clockjoin_np",
    "type": "CPP"
  },
  {
    "name": "pthread_yield",
    "type": "CPP"
  },
  {
    "name": "pthread_getconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_setconcurrency",
    "type": "CPP"
  },
  {
    "name": "pthread_getschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedparam",
    "type": "CPP"
  },
  {
    "name": "pthread_setschedprio",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setguardsize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setschedpolicy",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setscope",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstackaddr",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstackaddr",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstacksize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstacksize",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getstack",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setstack",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_lock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_clocklock",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_timedlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutex_unlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_mutexattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_rdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedrdlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_wrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_timedwrlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlock_clockwrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_tryrdlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_trywrlock",
    "type": "CPP"
  },
  {
    "name": "__pthread_rwlock_unlock",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_getkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_rwlockattr_setkind_np",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_clockwait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_init",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_timedwait",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_signal",
    "type": "CPP"
  },
  {
    "name": "pthread_cond_broadcast",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_getclock",
    "type": "CPP"
  },
  {
    "name": "pthread_condattr_setclock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_lock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_trylock",
    "type": "CPP"
  },
  {
    "name": "pthread_spin_init",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrier_destroy",
    "type": "CPP"
  },
  {
    "name": "__pthread_barrier_wait",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_init",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_destroy",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_getpshared",
    "type": "CPP"
  },
  {
    "name": "pthread_barrierattr_setpshared",
    "type": "CPP"
  },
  {
    "name": "__pthread_key_create",
    "type": "CPP"
  },
  {
    "name": "pthread_key_delete",
    "type": "CPP"
  },
  {
    "name": "__pthread_getspecific",
    "type": "CPP"
  },
  {
    "name": "__pthread_setspecific",
    "type": "CPP"
  },
  {
    "name": "pthread_sigmask",
    "type": "CPP"
  },
  {
    "name": "pthread_kill",
    "type": "CPP"
  },
  {
    "name": "pthread_sigqueue",
    "type": "CPP"
  },
  {
    "name": "pthread_cancel",
    "type": "CPP"
  },
  {
    "name": "pthread_testcancel",
    "type": "CPP"
  },
  {
    "name": "pthread_setcancelstate",
    "type": "CPP"
  },
  {
    "name": "pthread_setcanceltype",
    "type": "CPP"
  },
  {
    "name": "__pthread_once",
    "type": "CPP"
  },
  {
    "name": "pthread_atfork",
    "type": "CPP"
  },
  {
    "name": "pthread_getcpuclockid",
    "type": "CPP"
  },
  {
    "name": "__shm_directory",
    "type": "CPP"
  },
  {
    "name": "sem_init",
    "type": "CPP"
  },
  {
    "name": "sem_destroy",
    "type": "CPP"
  },
  {
    "name": "sem_open",
    "type": "CPP"
  },
  {
    "name": "sem_close",
    "type": "CPP"
  },
  {
    "name": "sem_unlink",
    "type": "CPP"
  },
  {
    "name": "sem_getvalue",
    "type": "CPP"
  },
  {
    "name": "sem_wait",
    "type": "CPP"
  },
  {
    "name": "sem_trywait",
    "type": "CPP"
  },
  {
    "name": "sem_timedwait",
    "type": "CPP"
  },
  {
    "name": "sem_clockwait",
    "type": "CPP"
  },
  {
    "name": "sem_post",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel",
    "type": "CPP"
  },
  {
    "name": "__pthread_register_cancel_defer",
    "type": "CPP"
  },
  {
    "name": "__pthread_unregister_cancel_restore",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_push",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_pop",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_push_defer",
    "type": "CPP"
  },
  {
    "name": "_pthread_cleanup_pop_restore",
    "type": "CPP"
  },
  {
    "name": "__pthread_unwind",
    "type": "CPP"
  },
  {
    "name": "__pthread_unwind_next",
    "type": "CPP"
  },
  {
    "name": "longjmp",
    "type": "CPP"
  },
  {
    "name": "__fork",
    "type": "CPP"
  },
  {
    "name": "__fcntl",
    "type": "CPP"
  },
  {
    "name": "__write",
    "type": "CPP"
  },
  {
    "name": "__read",
    "type": "CPP"
  },
  {
    "name": "__close",
    "type": "CPP"
  },
  {
    "name": "accept",
    "type": "CPP"
  },
  {
    "name": "__connect",
    "type": "CPP"
  },
  {
    "name": "recv",
    "type": "CPP"
  },
  {
    "name": "recvfrom",
    "type": "CPP"
  },
  {
    "name": "__send",
    "type": "CPP"
  },
  {
    "name": "sendto",
    "type": "CPP"
  },
  {
    "name": "fsync",
    "type": "CPP"
  },
  {
    "name": "__lseek",
    "type": "CPP"
  },
  {
    "name": "msync",
    "type": "CPP"
  },
  {
    "name": "__open",
    "type": "CPP"
  },
  {
    "name": "pause",
    "type": "CPP"
  },
  {
    "name": "pread",
    "type": "CPP"
  },
  {
    "name": "pwrite",
    "type": "CPP"
  },
  {
    "name": "tcdrain",
    "type": "CPP"
  },
  {
    "name": "sigwait",
    "type": "CPP"
  },
  {
    "name": "recvmsg",
    "type": "CPP"
  },
  {
    "name": "sendmsg",
    "type": "CPP"
  },
  {
    "name": "raise",
    "type": "CPP"
  },
  {
    "name": "system",
    "type": "CPP"
  },
  {
    "name": "flockfile",
    "type": "CPP"
  },
  {
    "name": "ftrylockfile",
    "type": "CPP"
  },
  {
    "name": "funlockfile",
    "type": "CPP"
  },
  {
    "name": "__sigaction",
    "type": "CPP"
  },
  {
    "name": "__h_errno_location",
    "type": "CPP"
  },
  {
    "name": "__res_state",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmin",
    "type": "CPP"
  },
  {
    "name": "__libc_current_sigrtmax",
    "type": "CPP"
  },
  {
    "name": "__libc_allocate_rtsig",
    "type": "CPP"
  },
  {
    "name": "pthread_kill_other_threads_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_getaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_attr_setaffinity_np",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setrobust",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_consistent",
    "type": "CPP"
  },
  {
    "name": "__pthread_cleanup_routine",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprotocol",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutexattr_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_getprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_mutex_setprioceiling",
    "type": "CPP"
  },
  {
    "name": "pthread_setname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getname_np",
    "type": "CPP"
  },
  {
    "name": "pthread_setattr_default_np",
    "type": "CPP"
  },
  {
    "name": "pthread_getattr_default_np",
    "type": "CPP"
  },
  {
    "name": "thrd_create",
    "type": "CPP"
  },
  {
    "name": "thrd_detach",
    "type": "CPP"
  },
  {
    "name": "thrd_exit",
    "type": "CPP"
  },
  {
    "name": "thrd_join",
    "type": "CPP"
  },
  {
    "name": "mtx_destroy",
    "type": "CPP"
  },
  {
    "name": "mtx_init",
    "type": "CPP"
  },
  {
    "name": "mtx_lock",
    "type": "CPP"
  },
  {
    "name": "mtx_timedlock",
    "type": "CPP"
  },
  {
    "name": "mtx_trylock",
    "type": "CPP"
  },
  {
    "name": "mtx_unlock",
    "type": "CPP"
  },
  {
    "name": "call_once",
    "type": "CPP"
  },
  {
    "name": "cnd_broadcast",
    "type": "CPP"
  },
  {
    "name": "cnd_destroy",
    "type": "CPP"
  },
  {
    "name": "cnd_init",
    "type": "CPP"
  },
  {
    "name": "cnd_signal",
    "type": "CPP"
  },
  {
    "name": "cnd_timedwait",
    "type": "CPP"
  },
  {
    "name": "cnd_wait",
    "type": "CPP"
  },
  {
    "name": "tss_create",
    "type": "CPP"
  },
  {
    "name": "tss_delete",
    "type": "CPP"
  },
  {
    "name": "tss_get",
    "type": "CPP"
  },
  {
    "name": "tss_set",
    "type": "CPP"
  },
  {
    "name": "__libpthread_version_placeholder",
    "type": "CPP"
  },
  {
    "name": "__errno_location",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libgcc_s.so.1",
    "type": "SHARED_LIB"
  },
  {
    "name": "__cpu_indicator_init",
    "type": "CPP"
  },
  {
    "name": "__multi3",
    "type": "CPP"
  },
  {
    "name": "__negti2",
    "type": "CPP"
  },
  {
    "name": "__lshrti3",
    "type": "CPP"
  },
  {
    "name": "__ashlti3",
    "type": "CPP"
  },
  {
    "name": "__ashrti3",
    "type": "CPP"
  },
  {
    "name": "__cmpti2",
    "type": "CPP"
  },
  {
    "name": "__ucmpti2",
    "type": "CPP"
  },
  {
    "name": "__clear_cache",
    "type": "CPP"
  },
  {
    "name": "__absvdi2",
    "type": "CPP"
  },
  {
    "name": "__absvsi2",
    "type": "CPP"
  },
  {
    "name": "__absvti2",
    "type": "CPP"
  },
  {
    "name": "__addvdi3",
    "type": "CPP"
  },
  {
    "name": "__addvsi3",
    "type": "CPP"
  },
  {
    "name": "__addvti3",
    "type": "CPP"
  },
  {
    "name": "__subvdi3",
    "type": "CPP"
  },
  {
    "name": "__subvsi3",
    "type": "CPP"
  },
  {
    "name": "__subvti3",
    "type": "CPP"
  },
  {
    "name": "__mulvdi3",
    "type": "CPP"
  },
  {
    "name": "__mulvsi3",
    "type": "CPP"
  },
  {
    "name": "__mulvti3",
    "type": "CPP"
  },
  {
    "name": "__negvdi2",
    "type": "CPP"
  },
  {
    "name": "__negvsi2",
    "type": "CPP"
  },
  {
    "name": "__negvti2",
    "type": "CPP"
  },
  {
    "name": "__ffsdi2",
    "type": "CPP"
  },
  {
    "name": "__ffsti2",
    "type": "CPP"
  },
  {
    "name": "__clzdi2",
    "type": "CPP"
  },
  {
    "name": "__clzti2",
    "type": "CPP"
  },
  {
    "name": "__ctzdi2",
    "type": "CPP"
  },
  {
    "name": "__ctzti2",
    "type": "CPP"
  },
  {
    "name": "__popcountdi2",
    "type": "CPP"
  },
  {
    "name": "__popcountti2",
    "type": "CPP"
  },
  {
    "name": "__paritydi2",
    "type": "CPP"
  },
  {
    "name": "__parityti2",
    "type": "CPP"
  },
  {
    "name": "__powisf2",
    "type": "CPP"
  },
  {
    "name": "__powidf2",
    "type": "CPP"
  },
  {
    "name": "__powixf2",
    "type": "CPP"
  },
  {
    "name": "__mulsc3",
    "type": "CPP"
  },
  {
    "name": "__muldc3",
    "type": "CPP"
  },
  {
    "name": "__mulxc3",
    "type": "CPP"
  },
  {
    "name": "__divsc3",
    "type": "CPP"
  },
  {
    "name": "__divdc3",
    "type": "CPP"
  },
  {
    "name": "__divxc3",
    "type": "CPP"
  },
  {
    "name": "__bswapsi2",
    "type": "CPP"
  },
  {
    "name": "__bswapdi2",
    "type": "CPP"
  },
  {
    "name": "__clrsbdi2",
    "type": "CPP"
  },
  {
    "name": "__clrsbti2",
    "type": "CPP"
  },
  {
    "name": "__fixunssfdi",
    "type": "CPP"
  },
  {
    "name": "__fixunsdfdi",
    "type": "CPP"
  },
  {
    "name": "__fixunsxfdi",
    "type": "CPP"
  },
  {
    "name": "__fixsfti",
    "type": "CPP"
  },
  {
    "name": "__fixdfti",
    "type": "CPP"
  },
  {
    "name": "__fixxfti",
    "type": "CPP"
  },
  {
    "name": "__fixunssfti",
    "type": "CPP"
  },
  {
    "name": "__fixunsdfti",
    "type": "CPP"
  },
  {
    "name": "__fixunsxfti",
    "type": "CPP"
  },
  {
    "name": "__floattisf",
    "type": "CPP"
  },
  {
    "name": "__floattidf",
    "type": "CPP"
  },
  {
    "name": "__floattixf",
    "type": "CPP"
  },
  {
    "name": "__floatuntisf",
    "type": "CPP"
  },
  {
    "name": "__floatuntidf",
    "type": "CPP"
  },
  {
    "name": "__floatuntixf",
    "type": "CPP"
  },
  {
    "name": "__divti3",
    "type": "CPP"
  },
  {
    "name": "__modti3",
    "type": "CPP"
  },
  {
    "name": "__divmodti4",
    "type": "CPP"
  },
  {
    "name": "__udivti3",
    "type": "CPP"
  },
  {
    "name": "__umodti3",
    "type": "CPP"
  },
  {
    "name": "__udivmodti4",
    "type": "CPP"
  },
  {
    "name": "__addtf3",
    "type": "CPP"
  },
  {
    "name": "__divtf3",
    "type": "CPP"
  },
  {
    "name": "__multf3",
    "type": "CPP"
  },
  {
    "name": "__negtf2",
    "type": "CPP"
  },
  {
    "name": "__subtf3",
    "type": "CPP"
  },
  {
    "name": "__unordtf2",
    "type": "CPP"
  },
  {
    "name": "__fixtfsi",
    "type": "CPP"
  },
  {
    "name": "__fixunstfsi",
    "type": "CPP"
  },
  {
    "name": "__floatsitf",
    "type": "CPP"
  },
  {
    "name": "__floatunsitf",
    "type": "CPP"
  },
  {
    "name": "__fixtfdi",
    "type": "CPP"
  },
  {
    "name": "__fixunstfdi",
    "type": "CPP"
  },
  {
    "name": "__floatditf",
    "type": "CPP"
  },
  {
    "name": "__floatunditf",
    "type": "CPP"
  },
  {
    "name": "__fixtfti",
    "type": "CPP"
  },
  {
    "name": "__fixunstfti",
    "type": "CPP"
  },
  {
    "name": "__floattitf",
    "type": "CPP"
  },
  {
    "name": "__floatuntitf",
    "type": "CPP"
  },
  {
    "name": "__extendsftf2",
    "type": "CPP"
  },
  {
    "name": "__extenddftf2",
    "type": "CPP"
  },
  {
    "name": "__extendxftf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfsf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfdf2",
    "type": "CPP"
  },
  {
    "name": "__trunctfxf2",
    "type": "CPP"
  },
  {
    "name": "__getf2",
    "type": "CPP"
  },
  {
    "name": "__letf2",
    "type": "CPP"
  },
  {
    "name": "__eqtf2",
    "type": "CPP"
  },
  {
    "name": "__divtc3",
    "type": "CPP"
  },
  {
    "name": "__multc3",
    "type": "CPP"
  },
  {
    "name": "__powitf2",
    "type": "CPP"
  },
  {
    "name": "__enable_execute_stack",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetGR",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetCFA",
    "type": "CPP"
  },
  {
    "name": "_Unwind_SetGR",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetIP",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetIPInfo",
    "type": "CPP"
  },
  {
    "name": "_Unwind_SetIP",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetLanguageSpecificData",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetRegionStart",
    "type": "CPP"
  },
  {
    "name": "_Unwind_FindEnclosingFunction",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetDataRelBase",
    "type": "CPP"
  },
  {
    "name": "_Unwind_GetTextRelBase",
    "type": "CPP"
  },
  {
    "name": "_Unwind_RaiseException",
    "type": "CPP"
  },
  {
    "name": "_Unwind_ForcedUnwind",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Resume_or_Rethrow",
    "type": "CPP"
  },
  {
    "name": "_Unwind_DeleteException",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Backtrace",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_bases",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info",
    "type": "CPP"
  },
  {
    "name": "__register_frame",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_table_bases",
    "type": "CPP"
  },
  {
    "name": "__register_frame_info_table",
    "type": "CPP"
  },
  {
    "name": "__register_frame_table",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame_info_bases",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame_info",
    "type": "CPP"
  },
  {
    "name": "__deregister_frame",
    "type": "CPP"
  },
  {
    "name": "_Unwind_Find_FDE",
    "type": "CPP"
  },
  {
    "name": "__gcc_personality_v0",
    "type": "CPP"
  },
  {
    "name": "__emutls_get_address",
    "type": "CPP"
  },
  {
    "name": "__emutls_register_common",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libm-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "matherr",
    "type": "CPP"
  },
  {
    "name": "feclearexcept",
    "type": "CPP"
  },
  {
    "name": "fegetexceptflag",
    "type": "CPP"
  },
  {
    "name": "feraiseexcept",
    "type": "CPP"
  },
  {
    "name": "fesetexceptflag",
    "type": "CPP"
  },
  {
    "name": "fetestexcept",
    "type": "CPP"
  },
  {
    "name": "fegetround",
    "type": "CPP"
  },
  {
    "name": "fesetround",
    "type": "CPP"
  },
  {
    "name": "fegetenv",
    "type": "CPP"
  },
  {
    "name": "feholdexcept",
    "type": "CPP"
  },
  {
    "name": "fesetenv",
    "type": "CPP"
  },
  {
    "name": "feupdateenv",
    "type": "CPP"
  },
  {
    "name": "fedisableexcept",
    "type": "CPP"
  },
  {
    "name": "feenableexcept",
    "type": "CPP"
  },
  {
    "name": "fegetexcept",
    "type": "CPP"
  },
  {
    "name": "fesetexcept",
    "type": "CPP"
  },
  {
    "name": "fetestexceptflag",
    "type": "CPP"
  },
  {
    "name": "fegetmode",
    "type": "CPP"
  },
  {
    "name": "fesetmode",
    "type": "CPP"
  },
  {
    "name": "acosf64x",
    "type": "CPP"
  },
  {
    "name": "acoshf64x",
    "type": "CPP"
  },
  {
    "name": "asinf64x",
    "type": "CPP"
  },
  {
    "name": "atan2f64x",
    "type": "CPP"
  },
  {
    "name": "atanhf64x",
    "type": "CPP"
  },
  {
    "name": "coshf64x",
    "type": "CPP"
  },
  {
    "name": "exp2f64x",
    "type": "CPP"
  },
  {
    "name": "exp10f64x",
    "type": "CPP"
  },
  {
    "name": "fmodf64x",
    "type": "CPP"
  },
  {
    "name": "hypotf64x",
    "type": "CPP"
  },
  {
    "name": "j0f64x",
    "type": "CPP"
  },
  {
    "name": "y0f64x",
    "type": "CPP"
  },
  {
    "name": "j1f64x",
    "type": "CPP"
  },
  {
    "name": "y1f64x",
    "type": "CPP"
  },
  {
    "name": "jnf64x",
    "type": "CPP"
  },
  {
    "name": "ynf64x",
    "type": "CPP"
  },
  {
    "name": "log2f64x",
    "type": "CPP"
  },
  {
    "name": "log10f64x",
    "type": "CPP"
  },
  {
    "name": "logf64x",
    "type": "CPP"
  },
  {
    "name": "powf64x",
    "type": "CPP"
  },
  {
    "name": "dreml",
    "type": "CPP"
  },
  {
    "name": "scalbl",
    "type": "CPP"
  },
  {
    "name": "sinhf64x",
    "type": "CPP"
  },
  {
    "name": "sqrtf64x",
    "type": "CPP"
  },
  {
    "name": "tgammaf64x",
    "type": "CPP"
  },
  {
    "name": "lgammaf64x_r",
    "type": "CPP"
  },
  {
    "name": "lgammaf64x",
    "type": "CPP"
  },
  {
    "name": "expf64x",
    "type": "CPP"
  },
  {
    "name": "gammal",
    "type": "CPP"
  },
  {
    "name": "acos",
    "type": "CPP"
  },
  {
    "name": "acosh",
    "type": "CPP"
  },
  {
    "name": "asin",
    "type": "CPP"
  },
  {
    "name": "atan2",
    "type": "CPP"
  },
  {
    "name": "atanh",
    "type": "CPP"
  },
  {
    "name": "cosh",
    "type": "CPP"
  },
  {
    "name": "exp2",
    "type": "CPP"
  },
  {
    "name": "exp10",
    "type": "CPP"
  },
  {
    "name": "fmod",
    "type": "CPP"
  },
  {
    "name": "hypot",
    "type": "CPP"
  },
  {
    "name": "j0",
    "type": "CPP"
  },
  {
    "name": "y0",
    "type": "CPP"
  },
  {
    "name": "j1",
    "type": "CPP"
  },
  {
    "name": "y1",
    "type": "CPP"
  },
  {
    "name": "jn",
    "type": "CPP"
  },
  {
    "name": "yn",
    "type": "CPP"
  },
  {
    "name": "log2",
    "type": "CPP"
  },
  {
    "name": "log10",
    "type": "CPP"
  },
  {
    "name": "log",
    "type": "CPP"
  },
  {
    "name": "pow",
    "type": "CPP"
  },
  {
    "name": "drem",
    "type": "CPP"
  },
  {
    "name": "scalb",
    "type": "CPP"
  },
  {
    "name": "sinh",
    "type": "CPP"
  },
  {
    "name": "sqrt",
    "type": "CPP"
  },
  {
    "name": "tgamma",
    "type": "CPP"
  },
  {
    "name": "lgammaf32x_r",
    "type": "CPP"
  },
  {
    "name": "lgamma",
    "type": "CPP"
  },
  {
    "name": "exp",
    "type": "CPP"
  },
  {
    "name": "gamma",
    "type": "CPP"
  },
  {
    "name": "acosf",
    "type": "CPP"
  },
  {
    "name": "acoshf",
    "type": "CPP"
  },
  {
    "name": "asinf",
    "type": "CPP"
  },
  {
    "name": "atan2f",
    "type": "CPP"
  },
  {
    "name": "atanhf",
    "type": "CPP"
  },
  {
    "name": "coshf",
    "type": "CPP"
  },
  {
    "name": "exp2f",
    "type": "CPP"
  },
  {
    "name": "exp10f",
    "type": "CPP"
  },
  {
    "name": "fmodf",
    "type": "CPP"
  },
  {
    "name": "hypotf",
    "type": "CPP"
  },
  {
    "name": "j0f",
    "type": "CPP"
  },
  {
    "name": "y0f",
    "type": "CPP"
  },
  {
    "name": "j1f",
    "type": "CPP"
  },
  {
    "name": "y1f",
    "type": "CPP"
  },
  {
    "name": "jnf",
    "type": "CPP"
  },
  {
    "name": "ynf",
    "type": "CPP"
  },
  {
    "name": "log2f",
    "type": "CPP"
  },
  {
    "name": "log10f",
    "type": "CPP"
  },
  {
    "name": "logf",
    "type": "CPP"
  },
  {
    "name": "powf",
    "type": "CPP"
  },
  {
    "name": "dremf",
    "type": "CPP"
  },
  {
    "name": "scalbf",
    "type": "CPP"
  },
  {
    "name": "sinhf",
    "type": "CPP"
  },
  {
    "name": "sqrtf",
    "type": "CPP"
  },
  {
    "name": "tgammaf",
    "type": "CPP"
  },
  {
    "name": "lgammaf32_r",
    "type": "CPP"
  },
  {
    "name": "lgammaf",
    "type": "CPP"
  },
  {
    "name": "expf",
    "type": "CPP"
  },
  {
    "name": "gammaf",
    "type": "CPP"
  },
  {
    "name": "__acosl_finite",
    "type": "CPP"
  },
  {
    "name": "__acoshl_finite",
    "type": "CPP"
  },
  {
    "name": "__asinl_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2l_finite",
    "type": "CPP"
  },
  {
    "name": "__atanhl_finite",
    "type": "CPP"
  },
  {
    "name": "__coshl_finite",
    "type": "CPP"
  },
  {
    "name": "__expl_finite",
    "type": "CPP"
  },
  {
    "name": "__fmodl_finite",
    "type": "CPP"
  },
  {
    "name": "__hypotl_finite",
    "type": "CPP"
  },
  {
    "name": "__j0l_finite",
    "type": "CPP"
  },
  {
    "name": "__y0l_finite",
    "type": "CPP"
  },
  {
    "name": "__j1l_finite",
    "type": "CPP"
  },
  {
    "name": "__y1l_finite",
    "type": "CPP"
  },
  {
    "name": "__jnl_finite",
    "type": "CPP"
  },
  {
    "name": "__ynl_finite",
    "type": "CPP"
  },
  {
    "name": "__lgammal_r_finite",
    "type": "CPP"
  },
  {
    "name": "__logl_finite",
    "type": "CPP"
  },
  {
    "name": "__log10l_finite",
    "type": "CPP"
  },
  {
    "name": "__powl_finite",
    "type": "CPP"
  },
  {
    "name": "__remainderl_finite",
    "type": "CPP"
  },
  {
    "name": "__scalbl_finite",
    "type": "CPP"
  },
  {
    "name": "__sinhl_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrtl_finite",
    "type": "CPP"
  },
  {
    "name": "__gammal_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinhf64x",
    "type": "CPP"
  },
  {
    "name": "atanf64x",
    "type": "CPP"
  },
  {
    "name": "cbrtf64x",
    "type": "CPP"
  },
  {
    "name": "ceilf64x",
    "type": "CPP"
  },
  {
    "name": "cosf64x",
    "type": "CPP"
  },
  {
    "name": "erff64x",
    "type": "CPP"
  },
  {
    "name": "erfcf64x",
    "type": "CPP"
  },
  {
    "name": "expm1f64x",
    "type": "CPP"
  },
  {
    "name": "fabsf64x",
    "type": "CPP"
  },
  {
    "name": "floorf64x",
    "type": "CPP"
  },
  {
    "name": "logbf64x",
    "type": "CPP"
  },
  {
    "name": "nextafterf64x",
    "type": "CPP"
  },
  {
    "name": "rintf64x",
    "type": "CPP"
  },
  {
    "name": "sinf64x",
    "type": "CPP"
  },
  {
    "name": "tanf64x",
    "type": "CPP"
  },
  {
    "name": "tanhf64x",
    "type": "CPP"
  },
  {
    "name": "__fpclassifyl",
    "type": "CPP"
  },
  {
    "name": "truncf64x",
    "type": "CPP"
  },
  {
    "name": "remquof64x",
    "type": "CPP"
  },
  {
    "name": "__log2l_finite",
    "type": "CPP"
  },
  {
    "name": "roundf64x",
    "type": "CPP"
  },
  {
    "name": "nearbyintf64x",
    "type": "CPP"
  },
  {
    "name": "sincosf64x",
    "type": "CPP"
  },
  {
    "name": "fmaf64x",
    "type": "CPP"
  },
  {
    "name": "llrintf64x",
    "type": "CPP"
  },
  {
    "name": "lroundf64x",
    "type": "CPP"
  },
  {
    "name": "llroundf64x",
    "type": "CPP"
  },
  {
    "name": "__exp10l_finite",
    "type": "CPP"
  },
  {
    "name": "__issignalingl",
    "type": "CPP"
  },
  {
    "name": "__finitel",
    "type": "CPP"
  },
  {
    "name": "copysignf64x",
    "type": "CPP"
  },
  {
    "name": "modff64x",
    "type": "CPP"
  },
  {
    "name": "frexpf64x",
    "type": "CPP"
  },
  {
    "name": "__signbitl",
    "type": "CPP"
  },
  {
    "name": "ldexpf64x",
    "type": "CPP"
  },
  {
    "name": "nextupf64x",
    "type": "CPP"
  },
  {
    "name": "totalorderf64x",
    "type": "CPP"
  },
  {
    "name": "totalorderf64x",
    "type": "CPP"
  },
  {
    "name": "totalordermagf64x",
    "type": "CPP"
  },
  {
    "name": "totalordermagf64x",
    "type": "CPP"
  },
  {
    "name": "getpayloadf64x",
    "type": "CPP"
  },
  {
    "name": "setpayloadf64x",
    "type": "CPP"
  },
  {
    "name": "setpayloadsigf64x",
    "type": "CPP"
  },
  {
    "name": "roundevenf64x",
    "type": "CPP"
  },
  {
    "name": "fromfpf64x",
    "type": "CPP"
  },
  {
    "name": "ufromfpf64x",
    "type": "CPP"
  },
  {
    "name": "fromfpxf64x",
    "type": "CPP"
  },
  {
    "name": "ufromfpxf64x",
    "type": "CPP"
  },
  {
    "name": "cargf64x",
    "type": "CPP"
  },
  {
    "name": "conjf64x",
    "type": "CPP"
  },
  {
    "name": "cimagf64x",
    "type": "CPP"
  },
  {
    "name": "crealf64x",
    "type": "CPP"
  },
  {
    "name": "cabsf64x",
    "type": "CPP"
  },
  {
    "name": "cacosf64x",
    "type": "CPP"
  },
  {
    "name": "cacoshf64x",
    "type": "CPP"
  },
  {
    "name": "ccosf64x",
    "type": "CPP"
  },
  {
    "name": "ccoshf64x",
    "type": "CPP"
  },
  {
    "name": "casinf64x",
    "type": "CPP"
  },
  {
    "name": "csinf64x",
    "type": "CPP"
  },
  {
    "name": "casinhf64x",
    "type": "CPP"
  },
  {
    "name": "csinhf64x",
    "type": "CPP"
  },
  {
    "name": "catanhf64x",
    "type": "CPP"
  },
  {
    "name": "catanf64x",
    "type": "CPP"
  },
  {
    "name": "ctanf64x",
    "type": "CPP"
  },
  {
    "name": "ctanhf64x",
    "type": "CPP"
  },
  {
    "name": "cexpf64x",
    "type": "CPP"
  },
  {
    "name": "clogf64x",
    "type": "CPP"
  },
  {
    "name": "cprojf64x",
    "type": "CPP"
  },
  {
    "name": "csqrtf64x",
    "type": "CPP"
  },
  {
    "name": "cpowf64x",
    "type": "CPP"
  },
  {
    "name": "clog10f64x",
    "type": "CPP"
  },
  {
    "name": "fdimf64x",
    "type": "CPP"
  },
  {
    "name": "nextdownf64x",
    "type": "CPP"
  },
  {
    "name": "fmaxf64x",
    "type": "CPP"
  },
  {
    "name": "fminf64x",
    "type": "CPP"
  },
  {
    "name": "nanf64x",
    "type": "CPP"
  },
  {
    "name": "__iseqsigl",
    "type": "CPP"
  },
  {
    "name": "canonicalizef64x",
    "type": "CPP"
  },
  {
    "name": "significandl",
    "type": "CPP"
  },
  {
    "name": "ilogbf64x",
    "type": "CPP"
  },
  {
    "name": "llogbf64x",
    "type": "CPP"
  },
  {
    "name": "log1pf64x",
    "type": "CPP"
  },
  {
    "name": "scalblnf64x",
    "type": "CPP"
  },
  {
    "name": "fmaxmagf64x",
    "type": "CPP"
  },
  {
    "name": "fminmagf64x",
    "type": "CPP"
  },
  {
    "name": "__exp2l_finite",
    "type": "CPP"
  },
  {
    "name": "__acosh_finite",
    "type": "CPP"
  },
  {
    "name": "__atanh_finite",
    "type": "CPP"
  },
  {
    "name": "__cosh_finite",
    "type": "CPP"
  },
  {
    "name": "__fmod_finite",
    "type": "CPP"
  },
  {
    "name": "__hypot_finite",
    "type": "CPP"
  },
  {
    "name": "__j0_finite",
    "type": "CPP"
  },
  {
    "name": "__y0_finite",
    "type": "CPP"
  },
  {
    "name": "__j1_finite",
    "type": "CPP"
  },
  {
    "name": "__y1_finite",
    "type": "CPP"
  },
  {
    "name": "__jn_finite",
    "type": "CPP"
  },
  {
    "name": "__yn_finite",
    "type": "CPP"
  },
  {
    "name": "__lgamma_r_finite",
    "type": "CPP"
  },
  {
    "name": "__log10_finite",
    "type": "CPP"
  },
  {
    "name": "__remainder_finite",
    "type": "CPP"
  },
  {
    "name": "__scalb_finite",
    "type": "CPP"
  },
  {
    "name": "__sinh_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrt_finite",
    "type": "CPP"
  },
  {
    "name": "__gamma_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinh",
    "type": "CPP"
  },
  {
    "name": "cbrt",
    "type": "CPP"
  },
  {
    "name": "erf",
    "type": "CPP"
  },
  {
    "name": "erfc",
    "type": "CPP"
  },
  {
    "name": "expm1",
    "type": "CPP"
  },
  {
    "name": "fabs",
    "type": "CPP"
  },
  {
    "name": "logb",
    "type": "CPP"
  },
  {
    "name": "nextafter",
    "type": "CPP"
  },
  {
    "name": "nexttoward",
    "type": "CPP"
  },
  {
    "name": "tanh",
    "type": "CPP"
  },
  {
    "name": "__fpclassify",
    "type": "CPP"
  },
  {
    "name": "remquo",
    "type": "CPP"
  },
  {
    "name": "log2",
    "type": "CPP"
  },
  {
    "name": "round",
    "type": "CPP"
  },
  {
    "name": "sincos",
    "type": "CPP"
  },
  {
    "name": "llrint",
    "type": "CPP"
  },
  {
    "name": "llround",
    "type": "CPP"
  },
  {
    "name": "__exp10_finite",
    "type": "CPP"
  },
  {
    "name": "__issignaling",
    "type": "CPP"
  },
  {
    "name": "__finite",
    "type": "CPP"
  },
  {
    "name": "copysign",
    "type": "CPP"
  },
  {
    "name": "modf",
    "type": "CPP"
  },
  {
    "name": "frexp",
    "type": "CPP"
  },
  {
    "name": "__signbit",
    "type": "CPP"
  },
  {
    "name": "ldexp",
    "type": "CPP"
  },
  {
    "name": "nextup",
    "type": "CPP"
  },
  {
    "name": "totalorder",
    "type": "CPP"
  },
  {
    "name": "totalorder",
    "type": "CPP"
  },
  {
    "name": "totalordermag",
    "type": "CPP"
  },
  {
    "name": "totalordermag",
    "type": "CPP"
  },
  {
    "name": "getpayload",
    "type": "CPP"
  },
  {
    "name": "setpayload",
    "type": "CPP"
  },
  {
    "name": "setpayloadsig",
    "type": "CPP"
  },
  {
    "name": "roundeven",
    "type": "CPP"
  },
  {
    "name": "fromfp",
    "type": "CPP"
  },
  {
    "name": "ufromfp",
    "type": "CPP"
  },
  {
    "name": "fromfpx",
    "type": "CPP"
  },
  {
    "name": "ufromfpx",
    "type": "CPP"
  },
  {
    "name": "carg",
    "type": "CPP"
  },
  {
    "name": "conj",
    "type": "CPP"
  },
  {
    "name": "cimag",
    "type": "CPP"
  },
  {
    "name": "creal",
    "type": "CPP"
  },
  {
    "name": "cabs",
    "type": "CPP"
  },
  {
    "name": "cacos",
    "type": "CPP"
  },
  {
    "name": "cacosh",
    "type": "CPP"
  },
  {
    "name": "ccos",
    "type": "CPP"
  },
  {
    "name": "ccosh",
    "type": "CPP"
  },
  {
    "name": "casin",
    "type": "CPP"
  },
  {
    "name": "csin",
    "type": "CPP"
  },
  {
    "name": "casinh",
    "type": "CPP"
  },
  {
    "name": "csinh",
    "type": "CPP"
  },
  {
    "name": "catanh",
    "type": "CPP"
  },
  {
    "name": "catan",
    "type": "CPP"
  },
  {
    "name": "ctan",
    "type": "CPP"
  },
  {
    "name": "ctanh",
    "type": "CPP"
  },
  {
    "name": "cexp",
    "type": "CPP"
  },
  {
    "name": "clog",
    "type": "CPP"
  },
  {
    "name": "cproj",
    "type": "CPP"
  },
  {
    "name": "csqrt",
    "type": "CPP"
  },
  {
    "name": "cpow",
    "type": "CPP"
  },
  {
    "name": "__clog10",
    "type": "CPP"
  },
  {
    "name": "fdim",
    "type": "CPP"
  },
  {
    "name": "nextdown",
    "type": "CPP"
  },
  {
    "name": "fmax",
    "type": "CPP"
  },
  {
    "name": "fmin",
    "type": "CPP"
  },
  {
    "name": "nan",
    "type": "CPP"
  },
  {
    "name": "__iseqsig",
    "type": "CPP"
  },
  {
    "name": "canonicalize",
    "type": "CPP"
  },
  {
    "name": "significand",
    "type": "CPP"
  },
  {
    "name": "ilogb",
    "type": "CPP"
  },
  {
    "name": "llogb",
    "type": "CPP"
  },
  {
    "name": "log1p",
    "type": "CPP"
  },
  {
    "name": "scalbln",
    "type": "CPP"
  },
  {
    "name": "fmaxmag",
    "type": "CPP"
  },
  {
    "name": "fminmag",
    "type": "CPP"
  },
  {
    "name": "log",
    "type": "CPP"
  },
  {
    "name": "pow",
    "type": "CPP"
  },
  {
    "name": "exp",
    "type": "CPP"
  },
  {
    "name": "exp2",
    "type": "CPP"
  },
  {
    "name": "__acosf_finite",
    "type": "CPP"
  },
  {
    "name": "__acoshf_finite",
    "type": "CPP"
  },
  {
    "name": "__asinf_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2f_finite",
    "type": "CPP"
  },
  {
    "name": "__atanhf_finite",
    "type": "CPP"
  },
  {
    "name": "__coshf_finite",
    "type": "CPP"
  },
  {
    "name": "__fmodf_finite",
    "type": "CPP"
  },
  {
    "name": "__hypotf_finite",
    "type": "CPP"
  },
  {
    "name": "__j0f_finite",
    "type": "CPP"
  },
  {
    "name": "__y0f_finite",
    "type": "CPP"
  },
  {
    "name": "__j1f_finite",
    "type": "CPP"
  },
  {
    "name": "__y1f_finite",
    "type": "CPP"
  },
  {
    "name": "__jnf_finite",
    "type": "CPP"
  },
  {
    "name": "__ynf_finite",
    "type": "CPP"
  },
  {
    "name": "__lgammaf_r_finite",
    "type": "CPP"
  },
  {
    "name": "__log10f_finite",
    "type": "CPP"
  },
  {
    "name": "__remainderf_finite",
    "type": "CPP"
  },
  {
    "name": "__scalbf_finite",
    "type": "CPP"
  },
  {
    "name": "__sinhf_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrtf_finite",
    "type": "CPP"
  },
  {
    "name": "__gammaf_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinhf",
    "type": "CPP"
  },
  {
    "name": "atanf",
    "type": "CPP"
  },
  {
    "name": "cbrtf",
    "type": "CPP"
  },
  {
    "name": "erff",
    "type": "CPP"
  },
  {
    "name": "erfcf",
    "type": "CPP"
  },
  {
    "name": "expm1f",
    "type": "CPP"
  },
  {
    "name": "fabsf",
    "type": "CPP"
  },
  {
    "name": "logbf",
    "type": "CPP"
  },
  {
    "name": "nextafterf",
    "type": "CPP"
  },
  {
    "name": "nexttowardf",
    "type": "CPP"
  },
  {
    "name": "tanf",
    "type": "CPP"
  },
  {
    "name": "tanhf",
    "type": "CPP"
  },
  {
    "name": "__fpclassifyf",
    "type": "CPP"
  },
  {
    "name": "remquof",
    "type": "CPP"
  },
  {
    "name": "roundf",
    "type": "CPP"
  },
  {
    "name": "llrintf",
    "type": "CPP"
  },
  {
    "name": "lroundf",
    "type": "CPP"
  },
  {
    "name": "llroundf",
    "type": "CPP"
  },
  {
    "name": "__exp10f_finite",
    "type": "CPP"
  },
  {
    "name": "__issignalingf",
    "type": "CPP"
  },
  {
    "name": "__finitef",
    "type": "CPP"
  },
  {
    "name": "copysignf",
    "type": "CPP"
  },
  {
    "name": "modff",
    "type": "CPP"
  },
  {
    "name": "frexpf",
    "type": "CPP"
  },
  {
    "name": "__signbitf",
    "type": "CPP"
  },
  {
    "name": "ldexpf",
    "type": "CPP"
  },
  {
    "name": "nextupf",
    "type": "CPP"
  },
  {
    "name": "totalorderf",
    "type": "CPP"
  },
  {
    "name": "totalorderf",
    "type": "CPP"
  },
  {
    "name": "totalordermagf",
    "type": "CPP"
  },
  {
    "name": "totalordermagf",
    "type": "CPP"
  },
  {
    "name": "getpayloadf",
    "type": "CPP"
  },
  {
    "name": "setpayloadf",
    "type": "CPP"
  },
  {
    "name": "setpayloadsigf",
    "type": "CPP"
  },
  {
    "name": "roundevenf",
    "type": "CPP"
  },
  {
    "name": "fromfpf",
    "type": "CPP"
  },
  {
    "name": "ufromfpf",
    "type": "CPP"
  },
  {
    "name": "fromfpxf",
    "type": "CPP"
  },
  {
    "name": "ufromfpxf",
    "type": "CPP"
  },
  {
    "name": "cargf",
    "type": "CPP"
  },
  {
    "name": "conjf",
    "type": "CPP"
  },
  {
    "name": "cimagf",
    "type": "CPP"
  },
  {
    "name": "crealf",
    "type": "CPP"
  },
  {
    "name": "cabsf",
    "type": "CPP"
  },
  {
    "name": "cacosf",
    "type": "CPP"
  },
  {
    "name": "cacoshf",
    "type": "CPP"
  },
  {
    "name": "ccosf",
    "type": "CPP"
  },
  {
    "name": "ccoshf",
    "type": "CPP"
  },
  {
    "name": "casinf",
    "type": "CPP"
  },
  {
    "name": "csinf",
    "type": "CPP"
  },
  {
    "name": "casinhf",
    "type": "CPP"
  },
  {
    "name": "csinhf",
    "type": "CPP"
  },
  {
    "name": "catanhf",
    "type": "CPP"
  },
  {
    "name": "catanf",
    "type": "CPP"
  },
  {
    "name": "ctanf",
    "type": "CPP"
  },
  {
    "name": "ctanhf",
    "type": "CPP"
  },
  {
    "name": "cexpf",
    "type": "CPP"
  },
  {
    "name": "clogf",
    "type": "CPP"
  },
  {
    "name": "cprojf",
    "type": "CPP"
  },
  {
    "name": "csqrtf",
    "type": "CPP"
  },
  {
    "name": "cpowf",
    "type": "CPP"
  },
  {
    "name": "__clog10f",
    "type": "CPP"
  },
  {
    "name": "fdimf",
    "type": "CPP"
  },
  {
    "name": "nextdownf",
    "type": "CPP"
  },
  {
    "name": "fmaxf",
    "type": "CPP"
  },
  {
    "name": "fminf",
    "type": "CPP"
  },
  {
    "name": "nanf",
    "type": "CPP"
  },
  {
    "name": "__iseqsigf",
    "type": "CPP"
  },
  {
    "name": "canonicalizef",
    "type": "CPP"
  },
  {
    "name": "significandf",
    "type": "CPP"
  },
  {
    "name": "ilogbf",
    "type": "CPP"
  },
  {
    "name": "llogbf",
    "type": "CPP"
  },
  {
    "name": "log1pf",
    "type": "CPP"
  },
  {
    "name": "scalblnf",
    "type": "CPP"
  },
  {
    "name": "fmaxmagf",
    "type": "CPP"
  },
  {
    "name": "fminmagf",
    "type": "CPP"
  },
  {
    "name": "__acosf128_finite",
    "type": "CPP"
  },
  {
    "name": "__acoshf128_finite",
    "type": "CPP"
  },
  {
    "name": "__asinf128_finite",
    "type": "CPP"
  },
  {
    "name": "__atan2f128_finite",
    "type": "CPP"
  },
  {
    "name": "__atanhf128_finite",
    "type": "CPP"
  },
  {
    "name": "__coshf128_finite",
    "type": "CPP"
  },
  {
    "name": "__expf128_finite",
    "type": "CPP"
  },
  {
    "name": "__fmodf128_finite",
    "type": "CPP"
  },
  {
    "name": "__hypotf128_finite",
    "type": "CPP"
  },
  {
    "name": "__j0f128_finite",
    "type": "CPP"
  },
  {
    "name": "__y0f128_finite",
    "type": "CPP"
  },
  {
    "name": "__j1f128_finite",
    "type": "CPP"
  },
  {
    "name": "__y1f128_finite",
    "type": "CPP"
  },
  {
    "name": "__jnf128_finite",
    "type": "CPP"
  },
  {
    "name": "__ynf128_finite",
    "type": "CPP"
  },
  {
    "name": "__lgammaf128_r_finite",
    "type": "CPP"
  },
  {
    "name": "__logf128_finite",
    "type": "CPP"
  },
  {
    "name": "__log10f128_finite",
    "type": "CPP"
  },
  {
    "name": "__powf128_finite",
    "type": "CPP"
  },
  {
    "name": "__remainderf128_finite",
    "type": "CPP"
  },
  {
    "name": "__sinhf128_finite",
    "type": "CPP"
  },
  {
    "name": "__sqrtf128_finite",
    "type": "CPP"
  },
  {
    "name": "__gammaf128_r_finite",
    "type": "CPP"
  },
  {
    "name": "asinhf128",
    "type": "CPP"
  },
  {
    "name": "atanf128",
    "type": "CPP"
  },
  {
    "name": "cbrtf128",
    "type": "CPP"
  },
  {
    "name": "ceilf128",
    "type": "CPP"
  },
  {
    "name": "cosf128",
    "type": "CPP"
  },
  {
    "name": "erfcf128",
    "type": "CPP"
  },
  {
    "name": "erff128",
    "type": "CPP"
  },
  {
    "name": "expm1f128",
    "type": "CPP"
  },
  {
    "name": "fabsf128",
    "type": "CPP"
  },
  {
    "name": "floorf128",
    "type": "CPP"
  },
  {
    "name": "logbf128",
    "type": "CPP"
  },
  {
    "name": "nextafterf128",
    "type": "CPP"
  },
  {
    "name": "rintf128",
    "type": "CPP"
  },
  {
    "name": "sinf128",
    "type": "CPP"
  },
  {
    "name": "tanf128",
    "type": "CPP"
  },
  {
    "name": "tanhf128",
    "type": "CPP"
  },
  {
    "name": "__fpclassifyf128",
    "type": "CPP"
  },
  {
    "name": "truncf128",
    "type": "CPP"
  },
  {
    "name": "remquof128",
    "type": "CPP"
  },
  {
    "name": "__log2f128_finite",
    "type": "CPP"
  },
  {
    "name": "roundf128",
    "type": "CPP"
  },
  {
    "name": "nearbyintf128",
    "type": "CPP"
  },
  {
    "name": "sincosf128",
    "type": "CPP"
  },
  {
    "name": "fmaf128",
    "type": "CPP"
  },
  {
    "name": "lrintf128",
    "type": "CPP"
  },
  {
    "name": "llrintf128",
    "type": "CPP"
  },
  {
    "name": "lroundf128",
    "type": "CPP"
  },
  {
    "name": "llroundf128",
    "type": "CPP"
  },
  {
    "name": "__exp10f128_finite",
    "type": "CPP"
  },
  {
    "name": "__issignalingf128",
    "type": "CPP"
  },
  {
    "name": "__isinff128",
    "type": "CPP"
  },
  {
    "name": "__isnanf128",
    "type": "CPP"
  },
  {
    "name": "__finitef128",
    "type": "CPP"
  },
  {
    "name": "copysignf128",
    "type": "CPP"
  },
  {
    "name": "modff128",
    "type": "CPP"
  },
  {
    "name": "frexpf128",
    "type": "CPP"
  },
  {
    "name": "__signbitf128",
    "type": "CPP"
  },
  {
    "name": "ldexpf128",
    "type": "CPP"
  },
  {
    "name": "nextupf128",
    "type": "CPP"
  },
  {
    "name": "totalorderf128",
    "type": "CPP"
  },
  {
    "name": "totalorderf128",
    "type": "CPP"
  },
  {
    "name": "totalordermagf128",
    "type": "CPP"
  },
  {
    "name": "totalordermagf128",
    "type": "CPP"
  },
  {
    "name": "getpayloadf128",
    "type": "CPP"
  },
  {
    "name": "setpayloadf128",
    "type": "CPP"
  },
  {
    "name": "setpayloadsigf128",
    "type": "CPP"
  },
  {
    "name": "roundevenf128",
    "type": "CPP"
  },
  {
    "name": "fromfpf128",
    "type": "CPP"
  },
  {
    "name": "ufromfpf128",
    "type": "CPP"
  },
  {
    "name": "fromfpxf128",
    "type": "CPP"
  },
  {
    "name": "ufromfpxf128",
    "type": "CPP"
  },
  {
    "name": "cargf128",
    "type": "CPP"
  },
  {
    "name": "conjf128",
    "type": "CPP"
  },
  {
    "name": "cimagf128",
    "type": "CPP"
  },
  {
    "name": "crealf128",
    "type": "CPP"
  },
  {
    "name": "cabsf128",
    "type": "CPP"
  },
  {
    "name": "cacosf128",
    "type": "CPP"
  },
  {
    "name": "cacoshf128",
    "type": "CPP"
  },
  {
    "name": "ccosf128",
    "type": "CPP"
  },
  {
    "name": "ccoshf128",
    "type": "CPP"
  },
  {
    "name": "casinf128",
    "type": "CPP"
  },
  {
    "name": "csinf128",
    "type": "CPP"
  },
  {
    "name": "casinhf128",
    "type": "CPP"
  },
  {
    "name": "csinhf128",
    "type": "CPP"
  },
  {
    "name": "catanhf128",
    "type": "CPP"
  },
  {
    "name": "catanf128",
    "type": "CPP"
  },
  {
    "name": "ctanf128",
    "type": "CPP"
  },
  {
    "name": "ctanhf128",
    "type": "CPP"
  },
  {
    "name": "cexpf128",
    "type": "CPP"
  },
  {
    "name": "clogf128",
    "type": "CPP"
  },
  {
    "name": "cprojf128",
    "type": "CPP"
  },
  {
    "name": "csqrtf128",
    "type": "CPP"
  },
  {
    "name": "cpowf128",
    "type": "CPP"
  },
  {
    "name": "clog10f128",
    "type": "CPP"
  },
  {
    "name": "fdimf128",
    "type": "CPP"
  },
  {
    "name": "nextdownf128",
    "type": "CPP"
  },
  {
    "name": "fmaxf128",
    "type": "CPP"
  },
  {
    "name": "fminf128",
    "type": "CPP"
  },
  {
    "name": "nanf128",
    "type": "CPP"
  },
  {
    "name": "__iseqsigf128",
    "type": "CPP"
  },
  {
    "name": "canonicalizef128",
    "type": "CPP"
  },
  {
    "name": "ilogbf128",
    "type": "CPP"
  },
  {
    "name": "llogbf128",
    "type": "CPP"
  },
  {
    "name": "log1pf128",
    "type": "CPP"
  },
  {
    "name": "scalblnf128",
    "type": "CPP"
  },
  {
    "name": "fmaxmagf128",
    "type": "CPP"
  },
  {
    "name": "fminmagf128",
    "type": "CPP"
  },
  {
    "name": "acosf128",
    "type": "CPP"
  },
  {
    "name": "acoshf128",
    "type": "CPP"
  },
  {
    "name": "asinf128",
    "type": "CPP"
  },
  {
    "name": "atan2f128",
    "type": "CPP"
  },
  {
    "name": "atanhf128",
    "type": "CPP"
  },
  {
    "name": "coshf128",
    "type": "CPP"
  },
  {
    "name": "exp10f128",
    "type": "CPP"
  },
  {
    "name": "exp2f128",
    "type": "CPP"
  },
  {
    "name": "fmodf128",
    "type": "CPP"
  },
  {
    "name": "hypotf128",
    "type": "CPP"
  },
  {
    "name": "j0f128",
    "type": "CPP"
  },
  {
    "name": "y0f128",
    "type": "CPP"
  },
  {
    "name": "j1f128",
    "type": "CPP"
  },
  {
    "name": "y1f128",
    "type": "CPP"
  },
  {
    "name": "jnf128",
    "type": "CPP"
  },
  {
    "name": "ynf128",
    "type": "CPP"
  },
  {
    "name": "logf128",
    "type": "CPP"
  },
  {
    "name": "log10f128",
    "type": "CPP"
  },
  {
    "name": "log2f128",
    "type": "CPP"
  },
  {
    "name": "powf128",
    "type": "CPP"
  },
  {
    "name": "remainderf128",
    "type": "CPP"
  },
  {
    "name": "sinhf128",
    "type": "CPP"
  },
  {
    "name": "sqrtf128",
    "type": "CPP"
  },
  {
    "name": "tgammaf128",
    "type": "CPP"
  },
  {
    "name": "lgammaf128",
    "type": "CPP"
  },
  {
    "name": "lgammaf128_r",
    "type": "CPP"
  },
  {
    "name": "expf128",
    "type": "CPP"
  },
  {
    "name": "__exp2f128_finite",
    "type": "CPP"
  },
  {
    "name": "__iscanonicall",
    "type": "CPP"
  },
  {
    "name": "f32addf32x",
    "type": "CPP"
  },
  {
    "name": "f32xaddf64",
    "type": "CPP"
  },
  {
    "name": "f32addf64x",
    "type": "CPP"
  },
  {
    "name": "daddl",
    "type": "CPP"
  },
  {
    "name": "f32addf128",
    "type": "CPP"
  },
  {
    "name": "f32xaddf128",
    "type": "CPP"
  },
  {
    "name": "f64xaddf128",
    "type": "CPP"
  },
  {
    "name": "f32divf32x",
    "type": "CPP"
  },
  {
    "name": "f32xdivf64",
    "type": "CPP"
  },
  {
    "name": "f32divf64x",
    "type": "CPP"
  },
  {
    "name": "ddivl",
    "type": "CPP"
  },
  {
    "name": "f32divf128",
    "type": "CPP"
  },
  {
    "name": "f32xdivf128",
    "type": "CPP"
  },
  {
    "name": "f64xdivf128",
    "type": "CPP"
  },
  {
    "name": "f32mulf32x",
    "type": "CPP"
  },
  {
    "name": "f32xmulf64",
    "type": "CPP"
  },
  {
    "name": "f32mulf64x",
    "type": "CPP"
  },
  {
    "name": "dmull",
    "type": "CPP"
  },
  {
    "name": "f32mulf128",
    "type": "CPP"
  },
  {
    "name": "f32xmulf128",
    "type": "CPP"
  },
  {
    "name": "f64xmulf128",
    "type": "CPP"
  },
  {
    "name": "f32subf32x",
    "type": "CPP"
  },
  {
    "name": "f32xsubf64",
    "type": "CPP"
  },
  {
    "name": "f32subf64x",
    "type": "CPP"
  },
  {
    "name": "dsubl",
    "type": "CPP"
  },
  {
    "name": "f32subf128",
    "type": "CPP"
  },
  {
    "name": "f32xsubf128",
    "type": "CPP"
  },
  {
    "name": "f64xsubf128",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28",
    "type": "SHARED_LIB"
  },
  {
    "name": "__cxa_throw_bad_array_length",
    "type": "CPP"
  },
  {
    "name": "__cxa_bad_cast",
    "type": "CPP"
  },
  {
    "name": "__cxa_bad_typeid",
    "type": "CPP"
  },
  {
    "name": "__cxa_throw_bad_array_new_length",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_exception()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::__throw_future_error(int)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_regex_error(std::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_system_error(int)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_ios_failure(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__throw_ios_failure(char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<char>::eq(char const&, char const&)",
    "type": "CPP"
  },
  {
    "name": "std::char_traits<wchar_t>::eq(wchar_t const&, wchar_t const&)",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> >::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_copy(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_move(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_assign(char*, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_disjunct(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_length_and_sharable(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore()",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_copy(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_move(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_assign(wchar_t*, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_disjunct(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_length_and_sharable(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::swap(__gnu_norm::_List_node_base&, __gnu_norm::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::transfer(__gnu_norm::_List_node_base*, __gnu_norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::hook(__gnu_norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_norm::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::swap(std::__norm::_List_node_base&, std::__norm::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::transfer(std::__norm::_List_node_base*, std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::hook(std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_transfer(std::__norm::_List_node_base*, std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_hook(std::__norm::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__norm::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::lock_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::string>::operator()(std::string) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::string const&>::operator()(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&>::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::hash<std::error_code>::operator()(std::error_code) const",
    "type": "CPP"
  },
  {
    "name": "std::error_category::error_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::system_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "std::error_category::equivalent(int, std::error_condition const&) const",
    "type": "CPP"
  },
  {
    "name": "std::generic_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_category::equivalent(std::error_code const&, int) const",
    "type": "CPP"
  },
  {
    "name": "std::__atomic0::atomic_flag::test_and_set(std::memory_order)",
    "type": "CPP"
  },
  {
    "name": "std::__atomic0::atomic_flag::clear(std::memory_order)",
    "type": "CPP"
  },
  {
    "name": "atomic_flag_test_and_set_explicit",
    "type": "CPP"
  },
  {
    "name": "atomic_flag_clear_explicit",
    "type": "CPP"
  },
  {
    "name": "__atomic_flag_wait_explicit",
    "type": "CPP"
  },
  {
    "name": "__atomic_flag_for_address",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_base::~_State_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_base::~_State_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Async_state_common::~_Async_state_common()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Async_state_common::~_Async_state_common()",
    "type": "CPP"
  },
  {
    "name": "std::chrono::system_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable_any::condition_variable_any()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable_any::~condition_variable_any()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__array_type_info::~__array_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxa_thread_atexit",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::bad_alloc::~bad_alloc()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::~bad_array_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_length::~bad_array_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_array_new_length::~bad_array_new_length()",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::bad_cast::~bad_cast()",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "std::bad_typeid::~bad_typeid()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::~__class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "__dynamic_cast",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__freeres()",
    "type": "CPP"
  },
  {
    "name": "__cxa_allocate_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_free_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_allocate_dependent_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_free_dependent_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_exception_ptr",
    "type": "CPP"
  },
  {
    "name": "__cxa_begin_catch",
    "type": "CPP"
  },
  {
    "name": "__cxa_end_catch",
    "type": "CPP"
  },
  {
    "name": "std::uncaught_exception()",
    "type": "CPP"
  },
  {
    "name": "std::uncaught_exceptions()",
    "type": "CPP"
  },
  {
    "name": "std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "std::exception::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::what() const",
    "type": "CPP"
  },
  {
    "name": "std::exception::~exception()",
    "type": "CPP"
  },
  {
    "name": "std::bad_exception::~bad_exception()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::exception::~exception() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::exception::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::bad_exception::~bad_exception() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::bad_exception::what() const",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_globals_fast",
    "type": "CPP"
  },
  {
    "name": "__cxa_get_globals",
    "type": "CPP"
  },
  {
    "name": "__gxx_personality_v0",
    "type": "CPP"
  },
  {
    "name": "__cxa_call_unexpected",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(void*)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::~exception_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::exception_ptr::__cxa_exception_type() const",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)",
    "type": "CPP"
  },
  {
    "name": "std::current_exception()",
    "type": "CPP"
  },
  {
    "name": "std::rethrow_exception(std::__exception_ptr::exception_ptr)",
    "type": "CPP"
  },
  {
    "name": "std::set_terminate(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_terminate()",
    "type": "CPP"
  },
  {
    "name": "std::terminate()",
    "type": "CPP"
  },
  {
    "name": "std::set_unexpected(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_unexpected()",
    "type": "CPP"
  },
  {
    "name": "std::unexpected()",
    "type": "CPP"
  },
  {
    "name": "__cxa_tm_cleanup",
    "type": "CPP"
  },
  {
    "name": "__cxa_init_primary_exception",
    "type": "CPP"
  },
  {
    "name": "__cxa_throw",
    "type": "CPP"
  },
  {
    "name": "__cxa_rethrow",
    "type": "CPP"
  },
  {
    "name": "__cxa_current_exception_type",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__enum_type_info::~__enum_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::__is_function_p() const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__function_type_info::~__function_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_acquire",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_abort",
    "type": "CPP"
  },
  {
    "name": "__cxa_guard_release",
    "type": "CPP"
  },
  {
    "name": "std::_Hash_bytes(void const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::_Fnv_hash_bytes(void const*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "std::nested_exception::~nested_exception()",
    "type": "CPP"
  },
  {
    "name": "std::set_new_handler(void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::get_new_handler()",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator new(unsigned long, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator new[](unsigned long, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete(void*, unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, std::align_val_t, std::nothrow_t const&)",
    "type": "CPP"
  },
  {
    "name": "operator delete[](void*, unsigned long, std::align_val_t)",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::~__pbase_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pbase_type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_to_member_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::__is_pointer_p() const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::~__pointer_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__pointer_type_info::__pointer_catch(__cxxabiv1::__pbase_type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxa_pure_virtual",
    "type": "CPP"
  },
  {
    "name": "__cxa_deleted_virtual",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::~__si_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__is_pointer_p() const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const",
    "type": "CPP"
  },
  {
    "name": "std::type_info::~type_info()",
    "type": "CPP"
  },
  {
    "name": "std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_cleanup",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_ctor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new2",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_new3",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_cctor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_dtor",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete2",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete",
    "type": "CPP"
  },
  {
    "name": "__cxa_vec_delete3",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__cxxabiv1::__vmi_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__verbose_terminate_handler()",
    "type": "CPP"
  },
  {
    "name": "__cxa_demangle",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::free_list::_M_clear()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::free_list::_M_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_get_free_list(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool_alloc_base::_M_refill(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_reclaim_block(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_reserve_block(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<false>::_M_initialize()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_destroy()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_reserve_block(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_initialize()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_get_thread_id()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_reclaim_block(char*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_destroy_thread_key(void*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__pool<true>::_M_initialize(void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t>::codecvt(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::codecvt(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><float, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<float>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><double, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><long double, char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::complex<long double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><float, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<float>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><double, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<double>&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><long double, wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::complex<long double>&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <float, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<float> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <double, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <long double, char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::complex<long double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <float, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<float> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <double, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <long double, wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::complex<long double> const&)",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<long double>::operator()(long double) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::string>::operator()(std::string) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::string const&>::operator()(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&>::operator()(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::what() const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure::failure(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::Init::Init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::Init::~Init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::sync_with_stdio(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_init()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator void*() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator void*() const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::swap(std::_List_node_base&, std::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::transfer(std::_List_node_base*, std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::hook(std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_transfer(std::_List_node_base*, std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_hook(std::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::swap(std::__cxx1998::_List_node_base&, std::__cxx1998::_List_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::transfer(std::__cxx1998::_List_node_base*, std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::hook(std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::unhook()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_transfer(std::__cxx1998::_List_node_base*, std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_reverse()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_hook(std::__cxx1998::_List_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx1998::_List_node_base::_M_unhook()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::~facet()",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale::_Impl*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::name[abi:cxx11]() const",
    "type": "CPP"
  },
  {
    "name": "std::locale::operator==(std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::locale::_S_normalize_category(int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_get_c_locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_get_c_name()",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::~_Impl()",
    "type": "CPP"
  },
  {
    "name": "std::locale::operator=(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::~locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(std::locale::_Impl const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::id::_M_id() const",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_facet(std::locale::_Impl const*, std::locale::id const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_category(std::locale::_Impl const*, std::locale::id const* const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_install_cache(std::locale::facet const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale()",
    "type": "CPP"
  },
  {
    "name": "std::locale::classic()",
    "type": "CPP"
  },
  {
    "name": "std::locale::global(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__num_base::_S_format_float(std::ios_base const&, char*, char)",
    "type": "CPP"
  },
  {
    "name": "std::__verify_grouping(char const*, unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_Impl(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_Impl::_M_replace_categories(std::locale::_Impl const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::_M_coalesce(std::locale const&, std::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&, std::locale const&, int)",
    "type": "CPP"
  },
  {
    "name": "std::locale::locale(std::locale const&, char const*, int)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::str()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_alloc(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(void* (*)(unsigned long), void (*)(void*))",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_free(char*)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::~strstreambuf()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::_M_setup(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(signed char*, long, signed char*)",
    "type": "CPP"
  },
  {
    "name": "std::strstreambuf::strstreambuf(signed char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::istrstream(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::~istrstream()",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::istrstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::ostrstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::~ostrstream()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::ostrstream::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::strstream(char*, int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::~strstream()",
    "type": "CPP"
  },
  {
    "name": "std::strstream::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::freeze(bool)",
    "type": "CPP"
  },
  {
    "name": "std::strstream::pcount() const",
    "type": "CPP"
  },
  {
    "name": "std::strstream::str()",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_increment(std::_Rb_tree_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_increment(std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_decrement(std::_Rb_tree_node_base*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)",
    "type": "CPP"
  },
  {
    "name": "std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)",
    "type": "CPP"
  },
  {
    "name": "std::istream::getline(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::ignore(long, int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::getline(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::ignore(long, unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs_eof<char, std::char_traits<char> >(std::basic_streambuf<char, std::char_traits<char> >*, std::basic_streambuf<char, std::char_traits<char> >*, bool&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs_eof<wchar_t, std::char_traits<wchar_t> >(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, bool&)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::valarray(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::valarray(std::valarray<unsigned long> const&)",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::~valarray()",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::size() const",
    "type": "CPP"
  },
  {
    "name": "std::valarray<unsigned long>::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::gslice::_Indexer::_Indexer(unsigned long, std::valarray<unsigned long> const&, std::valarray<unsigned long> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::_M_compare(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::_M_transform(char*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::_M_compare(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::_M_transform(wchar_t*, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::do_get(int, int, int, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::do_open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<wchar_t*>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::do_get(int, int, int, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::~__moneypunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::money_base::_S_construct_pattern(char, char, char)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::~__numpunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__exchange_and_add(int volatile*, int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::__atomic_add(int volatile*, int)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::_M_compare(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::_M_transform(char*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::_M_compare(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::_M_transform(wchar_t*, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::do_get(int, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::do_open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::do_get(int, int, int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::~moneypunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::~numpunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_put(char*, unsigned long, char const*, tm const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_put(wchar_t*, unsigned long, wchar_t const*, tm const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::__basic_file(pthread_mutex_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sys_open(_IO_FILE*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sys_open(int, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::open(char const*, std::_Ios_Openmode, int)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::fd()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::file()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::close()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::~__basic_file()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::xsputn_2(char const*, long, char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::seekoff(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::sync()",
    "type": "CPP"
  },
  {
    "name": "std::__basic_file<char>::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<double>(char const*, double&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__convert_to_v<long double>(char const*, long double&, std::_Ios_Iostate&, __locale_struct* const&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_destroy_c_locale(__locale_struct*&)",
    "type": "CPP"
  },
  {
    "name": "std::locale::facet::_S_clone_c_locale(__locale_struct*&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::allocator(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<char>::~allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::allocator()",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::allocator(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::allocator<wchar_t>::~allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__verify_grouping(char const*, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_parallel::_Settings::get()",
    "type": "CPP"
  },
  {
    "name": "__gnu_parallel::_Settings::set(__gnu_parallel::_Settings&)",
    "type": "CPP"
  },
  {
    "name": "std::chrono::_V2::system_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::chrono::_V2::steady_clock::now()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_encoding() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_always_noconv() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_unshift(__mbstate_t&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_unshift(__mbstate_t&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::~codecvt()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::~__codecvt_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_length(__mbstate_t&, char8_t const*, char8_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_in(__mbstate_t&, char8_t const*, char8_t const*, char8_t const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_length(__mbstate_t&, char8_t const*, char8_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char8_t, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char8_t*, char8_t*, char8_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char8_t, __mbstate_t>::do_in(__mbstate_t&, char8_t const*, char8_t const*, char8_t const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char32_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char16_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_base<char16_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::__codecvt_utf8_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::condition_variable()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::~condition_variable()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::wait(std::unique_lock<std::mutex>&)",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::notify_one()",
    "type": "CPP"
  },
  {
    "name": "std::condition_variable::notify_all()",
    "type": "CPP"
  },
  {
    "name": "std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::operator=(std::logic_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::logic_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::operator=(std::logic_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::operator=(std::runtime_error const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::runtime_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::operator=(std::runtime_error&&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::_M_message(int) const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::logic_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::~logic_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::logic_error::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::domain_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::domain_error::~domain_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::invalid_argument(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::invalid_argument::~invalid_argument()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::length_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::length_error::~length_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::out_of_range(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::out_of_range::~out_of_range()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::runtime_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::~runtime_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::runtime_error::what() const",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::range_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::range_error::~range_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::overflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::overflow_error::~overflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::underflow_error(char const*)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "transaction clone for std::underflow_error::~underflow_error()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_narrow(char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::~ctype()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_narrow(char const*, char const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_widen(char const*, char const*, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::_M_narrow_init() const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::_M_widen_init() const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::ctype(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::ctype(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_revalidate_singular()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_swap(__gnu_debug::_Safe_sequence_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_detach_all()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_detach_single()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_attach_single(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_detach()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_singular() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_sequence_base::_M_detach_singular()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_can_compare(__gnu_debug::_Safe_iterator_base const&) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_iterator_base::_M_get_mutex()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_unordered_container_base::_M_detach_all()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_unordered_container_base::_M_swap(__gnu_debug::_Safe_unordered_container_base&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_attach_single(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_detach()",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Safe_local_iterator_base::_M_attach(__gnu_debug::_Safe_sequence_base*, bool)",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_message(__gnu_debug::_Debug_msg_id) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_error() const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_Parameter::_M_print_field(__gnu_debug::_Error_formatter const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_Parameter::_M_print_description(__gnu_debug::_Error_formatter const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_print_word(char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_print_string(char const*) const",
    "type": "CPP"
  },
  {
    "name": "__gnu_debug::_Error_formatter::_M_get_max_length() const",
    "type": "CPP"
  },
  {
    "name": "std::__throw_out_of_range_fmt(char const*, ...)",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::~bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::bad_function_call::~bad_function_call()",
    "type": "CPP"
  },
  {
    "name": "std::__atomic_futex_unsigned_base::_M_futex_wait_until(unsigned int*, unsigned int, bool, std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)",
    "type": "CPP"
  },
  {
    "name": "std::__atomic_futex_unsigned_base::_M_futex_notify_all(unsigned int*)",
    "type": "CPP"
  },
  {
    "name": "std::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "std::future_error::~future_error()",
    "type": "CPP"
  },
  {
    "name": "std::future_category()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::~_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_Result_base::~_Result_base()",
    "type": "CPP"
  },
  {
    "name": "std::__future_base::_State_baseV2::_Make_ready::_M_set()",
    "type": "CPP"
  },
  {
    "name": "std::future_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::hash<long double>::operator()(long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::xalloc()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::register_callback(void (*)(std::ios_base::event, std::ios_base&, int), int)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_grow_words(int, bool)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_call_callbacks(std::ios_base::event)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_dispose_callbacks()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::~ios_base()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_move(std::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::_M_swap(std::ios_base&)",
    "type": "CPP"
  },
  {
    "name": "__once_proxy",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_fini()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getval()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getval_pretr1()",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_getentropy() const",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::~regex_error()",
    "type": "CPP"
  },
  {
    "name": "std::regex_error::regex_error(std::regex_constants::error_type)",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::what() const",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::bad_weak_ptr::~bad_weak_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::_Sp_locker(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::_Sp_locker(void const*, void const*)",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_locker::~_Sp_locker()",
    "type": "CPP"
  },
  {
    "name": "std::_Sp_make_shared_tag::_S_eq(std::type_info const&)",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::default_error_condition(int) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::equivalent(int, std::error_condition const&) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::equivalent(std::error_code const&, int) const",
    "type": "CPP"
  },
  {
    "name": "std::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "std::system_error::~system_error()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::_M_message[abi:cxx11](int) const",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::error_category::~error_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::system_category()",
    "type": "CPP"
  },
  {
    "name": "std::_V2::generic_category()",
    "type": "CPP"
  },
  {
    "name": "std::error_code::default_error_condition() const",
    "type": "CPP"
  },
  {
    "name": "std::thread::_State::~_State()",
    "type": "CPP"
  },
  {
    "name": "std::thread::_State::~_State()",
    "type": "CPP"
  },
  {
    "name": "std::thread::join()",
    "type": "CPP"
  },
  {
    "name": "std::thread::detach()",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::thread::hardware_concurrency()",
    "type": "CPP"
  },
  {
    "name": "std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())",
    "type": "CPP"
  },
  {
    "name": "std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)",
    "type": "CPP"
  },
  {
    "name": "std::locale::name() const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::tr1::hash<std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >::operator()(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >) const",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::~failure()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::what() const",
    "type": "CPP"
  },
  {
    "name": "std::iostream_category()",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "std::ios_base::failure[abi:cxx11]::failure(char const*, std::error_code const&)",
    "type": "CPP"
  },
  {
    "name": "std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::classic_table()",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::ctype(__locale_struct*, unsigned short const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::ctype(unsigned short const*, bool, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_toupper(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_toupper(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_tolower(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char>::do_tolower(char*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::~ctype_byname()",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_toupper(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_tolower(wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_is(unsigned short, wchar_t) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned short*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t>::_M_initialize_ctype()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_pbump(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::string const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_pbump(wchar_t*, wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_sync(wchar_t*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_data(char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_rep() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_ibegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_iend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_copy_chars(char*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::end() const",
    "type": "CPP"
  },
  {
    "name": "std::string::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::string::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::string::size() const",
    "type": "CPP"
  },
  {
    "name": "std::string::length() const",
    "type": "CPP"
  },
  {
    "name": "std::string::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::string::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::string::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::string::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::front() const",
    "type": "CPP"
  },
  {
    "name": "std::string::back() const",
    "type": "CPP"
  },
  {
    "name": "std::string::copy(char*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::swap(std::string&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string&&)",
    "type": "CPP"
  },
  {
    "name": "std::string::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::string::data() const",
    "type": "CPP"
  },
  {
    "name": "std::string::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::rfind(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_first_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(std::string const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::find_last_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_is_leaked() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_is_shared() const",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_leaked()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_set_sharable()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_refdata()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_construct(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_destroy(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_mutate(unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_leak_hard()",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_leak()",
    "type": "CPP"
  },
  {
    "name": "std::string::front()",
    "type": "CPP"
  },
  {
    "name": "std::string::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::begin()",
    "type": "CPP"
  },
  {
    "name": "std::string::rend()",
    "type": "CPP"
  },
  {
    "name": "std::string::end()",
    "type": "CPP"
  },
  {
    "name": "std::string::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::string::back()",
    "type": "CPP"
  },
  {
    "name": "std::string::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::insert(unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_dispose(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::string::clear()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_refcopy()",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::append(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::resize(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::string::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator+=(char)",
    "type": "CPP"
  },
  {
    "name": "std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::assign(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator=(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)",
    "type": "CPP"
  },
  {
    "name": "std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::random_device::_M_init_pretr1(std::string const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data(wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_rep() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_ibegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_iend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::copy(wchar_t*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_empty_rep()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_is_leaked() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_is_shared() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_leaked()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_set_sharable()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_refdata()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_create(unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct_aux_2(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_destroy(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_mutate(unsigned long, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak_hard()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_safe(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_dispose(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_refcopy()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_clone(std::allocator<wchar_t> const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::push_back(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_grab(std::allocator<wchar_t> const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t*>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "wchar_t* std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_construct<wchar_t const*>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::initializer_list<wchar_t>, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t const*>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(std::__moneypunct_cache<char, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(std::__moneypunct_cache<char, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, false>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<char, true>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<true>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<false>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<true>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<false>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(std::__numpunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<char>::numpunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_num(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_name(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_wday_or_month(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_via_format(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::get(int, int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::_M_convert_to_char(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<char>::messages_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char>::hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<char>::collate_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<char> const& std::use_facet<std::__cxx11::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<char> const& std::use_facet<std::__cxx11::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, true> const& std::use_facet<std::__cxx11::moneypunct<char, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<char, false> const& std::use_facet<std::__cxx11::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<char> const& std::use_facet<std::__cxx11::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(std::__moneypunct_cache<wchar_t, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(std::__moneypunct_cache<wchar_t, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, false>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct_byname<wchar_t, true>::moneypunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<true>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<false>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<true>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<false>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(std::__numpunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct_byname<wchar_t>::numpunct_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_num(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_name(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_wday_or_month(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_via_format(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::get(int, int, int, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::_M_convert_to_char(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages_byname<wchar_t>::messages_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t>::hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate_byname<wchar_t>::collate_byname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::collate<wchar_t> const& std::use_facet<std::__cxx11::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::numpunct<wchar_t> const& std::use_facet<std::__cxx11::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, true> const& std::use_facet<std::__cxx11::moneypunct<wchar_t, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::moneypunct<wchar_t, false> const& std::use_facet<std::__cxx11::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::messages<wchar_t> const& std::use_facet<std::__cxx11::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__cxx11::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::~stdio_sync_filebuf()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::stdio_sync_filebuf(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::stdio_sync_filebuf(__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::operator=(__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::file()",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::stdio_sync_filebuf(_IO_FILE*)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::stdio_sync_filebuf(__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::operator=(__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "__gnu_cxx::stdio_sync_filebuf<wchar_t, std::char_traits<wchar_t> >::file()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_create_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_destroy_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf(std::basic_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::swap(std::basic_filebuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_allocate_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_destroy_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_convert_to_external(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_get_ext_pos(__mbstate_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_terminate_output()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_seek(long, std::_Ios_Seekdir, __mbstate_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::_M_set_buffer(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::swap(std::basic_ifstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::swap(std::basic_ofstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::swap(std::basic_fstream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_create_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_destroy_pback()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::basic_filebuf(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::is_open() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_allocate_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_destroy_internal_buffer()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_convert_to_external(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_get_ext_pos(__mbstate_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_terminate_output()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_seek(long, std::_Ios_Seekdir, __mbstate_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::_M_set_buffer(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::is_open()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::operator=(std::basic_filebuf<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::operator=(std::basic_ifstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::operator=(std::basic_fstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::operator=(std::basic_ofstream<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<char, std::char_traits<char> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_fstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::open(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::basic_fstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(char const*, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::close()",
    "type": "CPP"
  },
  {
    "name": "std::basic_filebuf<wchar_t, std::char_traits<wchar_t> >::~basic_filebuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ofstream<wchar_t, std::char_traits<wchar_t> >::~basic_ofstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ifstream<wchar_t, std::char_traits<wchar_t> >::~basic_ifstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_fstream<wchar_t, std::char_traits<wchar_t> >::~basic_fstream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::~basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdstate() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::good() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::eof() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fail() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::bad() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::exceptions() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::exceptions(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::tie() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::tie(std::ostream*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::rdbuf(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fill() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::fill(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::narrow(char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::set_rdbuf(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::copyfmt(std::basic_ios<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::basic_ios(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::move(std::basic_ios<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::swap(std::basic_ios<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<char, std::char_traits<char> >::move(std::basic_ios<char, std::char_traits<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::operator!() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdstate() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::clear(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_setstate(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::good() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::eof() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fail() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::bad() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::exceptions() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::exceptions(std::_Ios_Iostate)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::tie() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::tie(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::rdbuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fill() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::fill(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::narrow(wchar_t, char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::widen(char) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::basic_ios()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::set_rdbuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::copyfmt(std::basic_ios<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::basic_ios(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::move(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::move(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<char, std::char_traits<char> >::basic_iostream(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::iostream::operator=(std::iostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::iostream::swap(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::~basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::basic_iostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_iostream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::istream& (*)(std::istream&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::basic_ios<char, std::char_traits<char> >& (*)(std::basic_ios<char, std::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::istream::gcount() const",
    "type": "CPP"
  },
  {
    "name": "std::istream::getline(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >::basic_istream(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator=(std::istream&&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::swap(std::istream&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::sentry::sentry(std::istream&, bool)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get()",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char*, long, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(std::basic_streambuf<char, std::char_traits<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::get(std::basic_streambuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::peek()",
    "type": "CPP"
  },
  {
    "name": "std::istream::read(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::readsome(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::istream::putback(char)",
    "type": "CPP"
  },
  {
    "name": "std::istream::unget()",
    "type": "CPP"
  },
  {
    "name": "std::istream::sync()",
    "type": "CPP"
  },
  {
    "name": "std::istream::tellg()",
    "type": "CPP"
  },
  {
    "name": "std::istream::seekg(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::istream::seekg(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::istream::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::ws<char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, unsigned char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, signed char&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, unsigned char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, signed char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setfill<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned short>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned int>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned long>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<bool>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long long>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<unsigned long long>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<float>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<double>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<long double>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::istream& std::istream::_M_extract<void*>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::istream::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::~basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_istream<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_ios<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::gcount() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::getline(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::basic_istream(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sentry::sentry(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t*, long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::get(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::peek()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::read(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::readsome(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::putback(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::unget()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::tellg()",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::seekg(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::seekg(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::ws<wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, wchar_t&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setfill<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned short>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned short&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned int>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned int&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned long>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<bool>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(bool&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long long>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<unsigned long long>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(unsigned long long&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<float>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(float&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<double>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<long double>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(long double&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::basic_istream<wchar_t, std::char_traits<wchar_t> >::_M_extract<void*>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >::operator>>(void*&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::do_transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(std::__moneypunct_cache<char, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(std::__moneypunct_cache<char, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, false>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<char, true>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::__numpunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(std::__numpunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<char>::numpunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::num_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::num_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::__timepunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_date_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_time_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_date_time_formats(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_am_pm_format(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_am_pm(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_days(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_days_abbreviated(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_months(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char>::_M_months_abbreviated(char const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<char>::__timepunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::time_put_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<char, std::istreambuf_iterator<char, std::char_traits<char> > >::time_get_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::open(std::string const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::get(int, int, int, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::_M_convert_to_char(std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<char>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<char>::messages_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<char>::ctype_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<char, char, __mbstate_t>::codecvt_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::compare(char const*, char const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::transform(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<char>::hash(char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<char>::collate_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_num(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_year(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<char, char, __mbstate_t> const& std::use_facet<std::codecvt<char, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::collate<char> const& std::use_facet<std::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<char> const& std::use_facet<std::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<char>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, true> const& std::use_facet<std::moneypunct<char, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, true>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<char, false> const& std::use_facet<std::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<char, false>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<char> const& std::use_facet<std::__timepunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::messages<char> const& std::use_facet<std::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::ctype<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::codecvt<char, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::collate<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::numpunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::moneypunct<char, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__timepunct<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::messages<char> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_float(char const*, unsigned long, char, char const*, char*, char*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_int(char const*, unsigned long, char, std::ios_base&, char*, char*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<true>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert<false>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, char, std::string const&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_pad(char, long, std::ios_base&, char*, char const*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<long double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_name(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_wday_or_month(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, int&, char const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_weekday(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_monthname(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_via_format(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_time(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get_date(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, tm*, char const*, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned short>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned int>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<unsigned long long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<true>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<char, std::char_traits<char> > std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract<false>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, bool, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::ostream& (*)(std::ostream&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::basic_ios<char, std::char_traits<char> >& (*)(std::basic_ios<char, std::char_traits<char> >&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::ostream::_M_write(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::flush()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::tellp()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::seekp(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::seekp(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::iostream&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >::basic_ostream(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator=(std::ostream&&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::swap(std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::sentry(std::ostream&)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::put(char)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::write(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::ends<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::flush<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setfill<char>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, unsigned char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, signed char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, unsigned char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, signed char const*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long>(long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<bool>(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long long>(long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<unsigned long long>(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<double>(double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<long double>(long double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "std::ostream& std::ostream::_M_insert<void const*>(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::~basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_ios<wchar_t, std::char_traits<wchar_t> >& (*)(std::basic_ios<wchar_t, std::char_traits<wchar_t> >&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::ios_base& (*)(std::ios_base&))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_write(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::flush()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::tellp()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::seekp(std::fpos<__mbstate_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::seekp(long, std::_Ios_Seekdir)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_iostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::basic_ostream(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::sentry(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::~sentry()",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::put(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::write(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::operator bool() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::endl<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::ends<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::flush<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setfill<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Resetiosflags)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setbase)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setprecision)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::_Setw)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::__ostream_insert<wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long>(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(short)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<unsigned long>(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned short)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<bool>(bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(bool)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long long>(long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<unsigned long long>(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(unsigned long long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<double>(double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(float)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<long double>(long double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(long double)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::_M_insert<void const*>(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(void const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "non-virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "virtual thunk to std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_pbump(char*, char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs::__xfer_bufptrs(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::__xfer_bufptrs::~__xfer_bufptrs()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::str(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_update_egptr()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_pbump(wchar_t*, wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_sync(wchar_t*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_stringbuf_init(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs::__xfer_bufptrs(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__xfer_bufptrs::~__xfer_bufptrs()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringbuf(std::__cxx11::basic_stringbuf<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_istringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_istringstream(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_istringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_ostringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_ostringstream(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_ostringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_stringstream()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_stringstream(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rdbuf() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::str(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbackfail(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::overflow(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::imbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::showmanyc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::underflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbackfail(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::overflow(unsigned int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::~basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::uflow()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::xsgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubimbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubsetbuf(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubseekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sgetn(char*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputbackc(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputc(char)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::sputn(char const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::eback() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::gptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::egptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setg(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbase() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::epptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::setp(char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::stossc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::__safe_gbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::__safe_pbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf(std::basic_streambuf<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::operator=(std::basic_streambuf<char, std::char_traits<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<char, std::char_traits<char> >::swap(std::basic_streambuf<char, std::char_traits<char> >&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs<char, std::char_traits<char> >(std::basic_streambuf<char, std::char_traits<char> >*, std::basic_streambuf<char, std::char_traits<char> >*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubimbue(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::getloc() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubsetbuf(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubseekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubseekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pubsync()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::in_avail()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::snextc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sbumpc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sgetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sgetn(wchar_t*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputbackc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sungetc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputc(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::sputn(wchar_t const*, long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::basic_streambuf()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::eback() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::gptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::egptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::gbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setg(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbase() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::epptr() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::pbump(int)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::setp(wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::stossc()",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::__safe_gbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::__safe_pbump(long)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::basic_streambuf(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::operator=(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >::swap(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "long std::__copy_streambufs<wchar_t, std::char_traits<wchar_t> >(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*, std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::~moneypunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_get()",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~money_put()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::~numpunct_byname()",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_get()",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~num_put()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::~__timepunct_cache()",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put()",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_put_byname()",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get()",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::~time_get_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::~__timepunct()",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::~messages()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::~messages_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::~codecvt_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::~collate()",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::~collate_byname()",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::do_negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::do_falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::__moneypunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(std::__moneypunct_cache<wchar_t, false>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(std::__moneypunct_cache<wchar_t, true>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::moneypunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::curr_symbol() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::positive_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::negative_sign() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::frac_digits() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::pos_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true>::neg_format() const",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, false>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::moneypunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct_byname<wchar_t, true>::moneypunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::money_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::__numpunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(std::__numpunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::numpunct(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::decimal_point() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::thousands_sep() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::grouping() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::truename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t>::falsename() const",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::numpunct_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct_byname<wchar_t>::numpunct_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::num_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::num_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::__timepunct(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_date_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_time_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_date_time_formats(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_am_pm_format(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_am_pm(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_days(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_days_abbreviated(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_months(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t>::_M_months_abbreviated(wchar_t const**) const",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct_cache<wchar_t>::__timepunct_cache(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_put_byname<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_put_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::date_order() const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::time_get_byname<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::time_get_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::messages(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::messages(__locale_struct*, char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::open(std::string const&, std::locale const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::open(std::string const&, std::locale const&, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::get(int, int, int, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::close(int) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::_M_convert_to_char(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t>::_M_convert_from_char(char*) const",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::messages_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::messages_byname<wchar_t>::messages_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype_byname<wchar_t>::ctype_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::codecvt_byname<wchar_t, char, __mbstate_t>::codecvt_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::collate(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::collate(__locale_struct*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::transform(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t>::hash(wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::collate_byname(char const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::collate_byname<wchar_t>::collate_byname(std::string const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_num(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, int, int, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_year(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::codecvt<wchar_t, char, __mbstate_t> const& std::use_facet<std::codecvt<wchar_t, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::collate<wchar_t> const& std::use_facet<std::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::numpunct<wchar_t> const& std::use_facet<std::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__numpunct_cache<wchar_t>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, true> const& std::use_facet<std::moneypunct<wchar_t, true> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, true>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::moneypunct<wchar_t, false> const& std::use_facet<std::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__moneypunct_cache<wchar_t, false>::_M_cache(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::__timepunct<wchar_t> const& std::use_facet<std::__timepunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, tm const*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::messages<wchar_t> const& std::use_facet<std::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::codecvt<wchar_t, char, __mbstate_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::collate<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::numpunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::moneypunct<wchar_t, false> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::__timepunct<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "bool std::has_facet<std::messages<wchar_t> >(std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_group_float(char const*, unsigned long, wchar_t, wchar_t const*, wchar_t*, wchar_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_group_int(char const*, unsigned long, wchar_t, std::ios_base&, wchar_t*, wchar_t*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<true>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert<false>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::money_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, wchar_t, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_pad(wchar_t, long, std::ios_base&, wchar_t*, wchar_t const*, int&) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, void const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<long long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_int<unsigned long long>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, unsigned long long) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_float<double>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char, double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, double) const",
    "type": "CPP"
  },
  {
    "name": "std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_insert_float<long double>(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, char, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, long double) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_name(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_wday_or_month(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, int&, wchar_t const**, unsigned long, std::ios_base&, std::_Ios_Iostate&) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_weekday(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_monthname(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_via_format(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_time(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get_date(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, char, char) const",
    "type": "CPP"
  },
  {
    "name": "std::time_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, tm*, wchar_t const*, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_float(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, float&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, double&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, bool&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned short>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned short&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned int>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned int&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, void*&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<long long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract_int<unsigned long long>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, unsigned long long&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<true>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::_M_extract<false>(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, long double&) const",
    "type": "CPP"
  },
  {
    "name": "std::money_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_get(std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, bool, std::ios_base&, std::_Ios_Iostate&, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&) const",
    "type": "CPP"
  },
  {
    "name": "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > >::do_put(std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> >, std::ios_base&, wchar_t, bool) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data(wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_local_data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_local_data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_capacity(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_set_length(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_is_local() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_create(unsigned long&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_dispose()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_destroy(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct_aux_2(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_get_allocator()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check(unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_check_length(unsigned long, unsigned long, char const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_limit(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_disjunct(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_move(wchar_t*, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_assign(wchar_t*, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_copy_chars(wchar_t*, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_compare(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_mutate(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(unsigned long, wchar_t, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::end() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::cend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crbegin() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::crend() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::length() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::max_size() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::capacity() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::reserve(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::shrink_to_fit()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::clear()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::empty() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator[](unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::at(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::front() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::back() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::push_back(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::erase(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::pop_back()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::assign(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t*, wchar_t*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, wchar_t const*, wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::insert(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(wchar_t const*)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator+=(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::append(std::initializer_list<wchar_t>)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::copy(wchar_t*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::swap(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::c_str() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::get_allocator() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::rfind(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_first_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::find_last_not_of(wchar_t, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::compare(unsigned long, unsigned long, wchar_t const*, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Alloc_hider::_Alloc_hider(wchar_t*, std::allocator<wchar_t>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(wchar_t, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, void>(__gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > >(__gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, __gnu_cxx::__normal_iterator<wchar_t const*, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<wchar_t*>(wchar_t*, wchar_t*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t*, void>(wchar_t*, wchar_t*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > std::operator+<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "void std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_construct<wchar_t const*>(wchar_t const*, wchar_t const*, std::forward_iterator_tag)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&, unsigned long, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, unsigned long, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::initializer_list<wchar_t>, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string<wchar_t const*, void>(wchar_t const*, wchar_t const*, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::substr(unsigned long, unsigned long) const",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::operator>><wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >& std::operator<< <wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_istream<wchar_t, std::char_traits<wchar_t> >& std::getline<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >(std::basic_istream<wchar_t, std::char_traits<wchar_t> >&, std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<std::filesystem::__cxx11::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::__cxx11::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::~recursive_directory_iterator()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::options() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::depth() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::recursion_pending() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator=(std::filesystem::__cxx11::recursive_directory_iterator const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator=(std::filesystem::__cxx11::recursive_directory_iterator&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::pop(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::disable_recursion_pending()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::pop()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::directory_iterator::directory_iterator(std::filesystem::__cxx11::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::recursive_directory_iterator(std::filesystem::__cxx11::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::recursive_directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::__cxx11::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::__cxx11::path const&, unsigned long, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::__cxx11::path const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::__cxx11::path const&, std::filesystem::perms, std::filesystem::perm_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::__cxx11::path const&, std::filesystem::perms, std::filesystem::perm_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path[abi:cxx11](std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path[abi:cxx11](std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path[abi:cxx11]()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_Impl_deleter::operator()(std::filesystem::__cxx11::path::_List::_Impl*) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_List()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::end() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::compare(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::compare(std::basic_string_view<char, std::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::has_filename() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_find_extension() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_split_cmpts()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::remove_filename()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::hash_value(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::path1() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::path2() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_concat(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_M_append(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_List::_List(std::filesystem::__cxx11::path::_List const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator/=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::replace_filename(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::operator+=(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::replace_extension(std::filesystem::__cxx11::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_relative(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_proximate(std::filesystem::__cxx11::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::lexically_normal() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::path::_S_convert_loc(char const*, char const*, std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::filesystem::__cxx11::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::__cxx11::filesystem_error::filesystem_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::filesystem::__cxx11::path const&, std::filesystem::__cxx11::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::memory_resource::~memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::memory_resource::~memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::new_delete_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::null_memory_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::set_default_resource(std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::get_default_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::_M_new_buffer(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::_M_release_buffers()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::monotonic_buffer_resource::~monotonic_buffer_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::release()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::~synchronized_pool_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::do_deallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::synchronized_pool_resource(std::pmr::pool_options const&, std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(std::pmr::pool_options const&, std::pmr::memory_resource*)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::release()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::~unsynchronized_pool_resource()",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::do_deallocate(void*, unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::synchronized_pool_resource::do_allocate(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::pmr::unsynchronized_pool_resource::do_allocate(unsigned long, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr()",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_ptr<std::filesystem::_Dir, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<std::filesystem::recursive_directory_iterator::_Dir_stack, (__gnu_cxx::_Lock_policy)2>&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::~recursive_directory_iterator()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::options() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::depth() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::recursion_pending() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator*() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator=(std::filesystem::recursive_directory_iterator const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator=(std::filesystem::recursive_directory_iterator&&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::pop(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::disable_recursion_pending()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::pop()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::directory_iterator::directory_iterator(std::filesystem::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::recursive_directory_iterator(std::filesystem::path const&, std::filesystem::directory_options, std::error_code*)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::increment(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::recursive_directory_iterator::operator++()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::path const&, unsigned long, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::path const&, std::filesystem::perms, std::filesystem::perm_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_file(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directory_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_hard_link(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::equivalent(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::file_size(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hard_link_count(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::is_empty(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::last_write_time(std::filesystem::path const&, std::chrono::time_point<std::filesystem::__file_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::permissions(std::filesystem::path const&, std::filesystem::perms, std::filesystem::perm_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::rename(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::resize_file(std::filesystem::path const&, unsigned long)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::space(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::status(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::symlink_status(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy_symlink(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::read_symlink(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::temp_directory_path()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path(std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::current_path()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::absolute(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::copy(std::filesystem::path const&, std::filesystem::path const&, std::filesystem::copy_options)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::remove_all(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::create_directories(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::canonical(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::path const&, std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::weakly_canonical(std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::proximate(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::relative(std::filesystem::path const&, std::filesystem::path const&, std::error_code&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::what() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::~filesystem_error()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_Impl_deleter::operator()(std::filesystem::path::_List::_Impl*) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_List()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::begin() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::end() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::compare(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::compare(std::basic_string_view<char, std::char_traits<char> >) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::has_filename() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_find_extension() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_split_cmpts()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::remove_filename()",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::hash_value(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::path1() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::path2() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_concat(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_M_append(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_List::_List(std::filesystem::path::_List const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator/=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::replace_filename(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::operator+=(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::replace_extension(std::filesystem::path const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_name() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_directory() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::root_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::relative_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::parent_path() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_relative(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_proximate(std::filesystem::path const&) const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::lexically_normal() const",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::path::_S_convert_loc(char const*, char const*, std::locale const&)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::filesystem::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::filesystem::filesystem_error::filesystem_error(std::string const&, std::filesystem::path const&, std::filesystem::path const&, std::error_code)",
    "type": "CPP"
  },
  {
    "name": "std::ostream::operator<<(decltype(nullptr))",
    "type": "CPP"
  },
  {
    "name": "std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::operator<<(decltype(nullptr))",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator std::basic_string_view<char, std::char_traits<char> >() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data()",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_to_string_view(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator std::basic_string_view<wchar_t, std::char_traits<wchar_t> >() const",
    "type": "CPP"
  },
  {
    "name": "std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string::__sv_wrapper, std::allocator<char> const&)",
    "type": "CPP"
  },
  {
    "name": "std::string::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::string::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >)",
    "type": "CPP"
  },
  {
    "name": "std::string::operator std::basic_string_view<char, std::char_traits<char> >() const",
    "type": "CPP"
  },
  {
    "name": "std::string::data()",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper, std::allocator<wchar_t> const&)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_S_to_string_view(std::basic_string_view<wchar_t, std::char_traits<wchar_t> >)",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::operator std::basic_string_view<wchar_t, std::char_traits<wchar_t> >() const",
    "type": "CPP"
  },
  {
    "name": "std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::data()",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/libdl-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "dlopen",
    "type": "CPP"
  },
  {
    "name": "dlclose",
    "type": "CPP"
  },
  {
    "name": "dlsym",
    "type": "CPP"
  },
  {
    "name": "dlvsym",
    "type": "CPP"
  },
  {
    "name": "dlerror",
    "type": "CPP"
  },
  {
    "name": "dladdr",
    "type": "CPP"
  },
  {
    "name": "dladdr1",
    "type": "CPP"
  },
  {
    "name": "dlinfo",
    "type": "CPP"
  },
  {
    "name": "dlmopen",
    "type": "CPP"
  },
  {
    "name": "__libdl_freeres",
    "type": "CPP"
  },
  {
    "name": "/usr/lib/x86_64-linux-gnu/ld-2.31.so",
    "type": "SHARED_LIB"
  },
  {
    "name": "_dl_rtld_di_serinfo",
    "type": "CPP"
  },
  {
    "name": "_dl_debug_state",
    "type": "CPP"
  },
  {
    "name": "_dl_mcount",
    "type": "CPP"
  },
  {
    "name": "_dl_get_tls_static_info",
    "type": "CPP"
  },
  {
    "name": "_dl_allocate_tls_init",
    "type": "CPP"
  },
  {
    "name": "_dl_allocate_tls",
    "type": "CPP"
  },
  {
    "name": "_dl_deallocate_tls",
    "type": "CPP"
  },
  {
    "name": "_dl_make_stack_executable",
    "type": "CPP"
  },
  {
    "name": "_dl_find_dso_for_object",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_create",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_create_format",
    "type": "CPP"
  },
  {
    "name": "_dl_exception_free",
    "type": "CPP"
  },
  {
    "name": "__tunable_get_val",
    "type": "CPP"
  },
  {
    "name": "__tls_get_addr",
    "type": "CPP"
  },
  {
    "name": "__get_cpu_features",
    "type": "CPP"
  },
  {
    "name": "malloc",
    "type": "CPP"
  },
  {
    "name": "calloc",
    "type": "CPP"
  },
  {
    "name": "free",
    "type": "CPP"
  },
  {
    "name": "realloc",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_signal_error",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_exception",
    "type": "CPP"
  },
  {
    "name": "_dl_catch_error",
    "type": "CPP"
  },
  {
    "name": "[vdso]",
    "type": "SHARED_LIB"
  },
  {
    "name": "DeoptimizationEntry_Eager",
    "timestamp": 6108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DeoptimizationEntry_Lazy",
    "timestamp": 6122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DeoptimizationEntry_Unused",
    "timestamp": 6127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RecordWriteEmitRememberedSetSaveFP",
    "timestamp": 6132,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RecordWriteOmitRememberedSetSaveFP",
    "timestamp": 6137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RecordWriteEmitRememberedSetIgnoreFP",
    "timestamp": 6143,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RecordWriteOmitRememberedSetIgnoreFP",
    "timestamp": 6148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EphemeronKeyBarrierSaveFP",
    "timestamp": 6154,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EphemeronKeyBarrierIgnoreFP",
    "timestamp": 6159,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AdaptorWithBuiltinExitFrame",
    "timestamp": 6164,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNullOrUndefined",
    "timestamp": 6170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsNotNullOrUndefined",
    "timestamp": 6175,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunction_ReceiverIsAny",
    "timestamp": 6180,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallBoundFunction",
    "timestamp": 6185,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWrappedFunction",
    "timestamp": 6190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined",
    "timestamp": 6195,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined",
    "timestamp": 6200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny",
    "timestamp": 6205,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined_Baseline_Compact",
    "timestamp": 6210,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined_Baseline",
    "timestamp": 6216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined_Baseline_Compact",
    "timestamp": 6221,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined_Baseline",
    "timestamp": 6227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny_Baseline_Compact",
    "timestamp": 6232,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny_Baseline",
    "timestamp": 6237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNullOrUndefined_WithFeedback",
    "timestamp": 6242,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsNotNullOrUndefined_WithFeedback",
    "timestamp": 6247,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Call_ReceiverIsAny_WithFeedback",
    "timestamp": 6253,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallProxy",
    "timestamp": 6258,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallVarargs",
    "timestamp": 6280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 6286,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithSpread_Baseline",
    "timestamp": 6294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithSpread_WithFeedback",
    "timestamp": 6299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithArrayLike",
    "timestamp": 6304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallWithArrayLike_WithFeedback",
    "timestamp": 6316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallForwardVarargs",
    "timestamp": 6322,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionForwardVarargs",
    "timestamp": 6327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccess",
    "timestamp": 6332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckCompatibleReceiver",
    "timestamp": 6337,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallFunctionTemplate_CheckAccessAndCompatibleReceiver",
    "timestamp": 6342,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunction",
    "timestamp": 6348,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructBoundFunction",
    "timestamp": 6352,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructedNonConstructable",
    "timestamp": 6357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Construct",
    "timestamp": 6362,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructVarargs",
    "timestamp": 6367,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 6372,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithSpread_Baseline",
    "timestamp": 6377,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithSpread_WithFeedback",
    "timestamp": 6382,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithArrayLike",
    "timestamp": 6387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructWithArrayLike_WithFeedback",
    "timestamp": 6391,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructForwardVarargs",
    "timestamp": 6396,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructFunctionForwardVarargs",
    "timestamp": 6401,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Construct_Baseline",
    "timestamp": 6406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Construct_WithFeedback",
    "timestamp": 6411,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructStubGeneric",
    "timestamp": 6416,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSBuiltinsConstructStub",
    "timestamp": 6421,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewObject",
    "timestamp": 6425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewClosure",
    "timestamp": 6430,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConstructProxy",
    "timestamp": 6434,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntry",
    "timestamp": 6439,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntry",
    "timestamp": 6444,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSRunMicrotasksEntry",
    "timestamp": 6449,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSEntryTrampoline",
    "timestamp": 6453,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSConstructEntryTrampoline",
    "timestamp": 6458,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResumeGeneratorTrampoline",
    "timestamp": 6463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePointAt",
    "timestamp": 6467,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringEqual",
    "timestamp": 6472,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThan",
    "timestamp": 6477,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringGreaterThanOrEqual",
    "timestamp": 6481,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThan",
    "timestamp": 6486,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringLessThanOrEqual",
    "timestamp": 6491,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringSubstring",
    "timestamp": 6496,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrderedHashTableHealIndex",
    "timestamp": 6500,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEntryTrampoline",
    "timestamp": 6506,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCall",
    "timestamp": 6511,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushUndefinedAndArgsThenCall",
    "timestamp": 6517,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenCallWithFinalSpread",
    "timestamp": 6522,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstruct",
    "timestamp": 6527,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructArrayFunction",
    "timestamp": 6532,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterPushArgsThenConstructWithFinalSpread",
    "timestamp": 6537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterAtBytecode",
    "timestamp": 6543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterEnterAtNextBytecode",
    "timestamp": 6548,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterOnStackReplacement",
    "timestamp": 6553,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BaselineOutOfLinePrologue",
    "timestamp": 6558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BaselineOnStackReplacement",
    "timestamp": 6563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BaselineLeaveFrame",
    "timestamp": 6568,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BaselineOrInterpreterEnterAtBytecode",
    "timestamp": 6573,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BaselineOrInterpreterEnterAtNextBytecode",
    "timestamp": 6578,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InterpreterOnStackReplacement_ToBaseline",
    "timestamp": 6584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazy",
    "timestamp": 6589,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CompileLazyDeoptimizedCode",
    "timestamp": 6593,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstantiateAsmJs",
    "timestamp": 6599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NotifyDeoptimized",
    "timestamp": 6603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltin",
    "timestamp": 6608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToCodeStubBuiltinWithResult",
    "timestamp": 6616,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltin",
    "timestamp": 6621,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ContinueToJavaScriptBuiltinWithResult",
    "timestamp": 6626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiCallback",
    "timestamp": 6631,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallApiGetter",
    "timestamp": 6636,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCall",
    "timestamp": 6641,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsFunction",
    "timestamp": 6646,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HandleApiCallAsConstructor",
    "timestamp": 6651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInYoungGeneration",
    "timestamp": 6658,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInYoungGeneration",
    "timestamp": 6663,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateInOldGeneration",
    "timestamp": 6668,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AllocateRegularInOldGeneration",
    "timestamp": 6672,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyFastSmiOrObjectElements",
    "timestamp": 6678,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastDoubleElements",
    "timestamp": 6682,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GrowFastSmiOrObjectElements",
    "timestamp": 6687,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DebugBreakTrampoline",
    "timestamp": 6692,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumber",
    "timestamp": 6697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumber_Baseline",
    "timestamp": 6702,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumeric_Baseline",
    "timestamp": 6706,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PlainPrimitiveToNumber",
    "timestamp": 6711,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumberConvertBigInt",
    "timestamp": 6716,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Typeof",
    "timestamp": 6720,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntToI64",
    "timestamp": 6725,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntToI32Pair",
    "timestamp": 6737,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "I64ToBigInt",
    "timestamp": 6741,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "I32PairToBigInt",
    "timestamp": 6746,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBooleanLazyDeoptContinuation",
    "timestamp": 6751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_PolymorphicName",
    "timestamp": 6757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_Megamorphic",
    "timestamp": 6764,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineKeyedOwnIC_Megamorphic",
    "timestamp": 6769,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC_NoFeedback",
    "timestamp": 6776,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_FunctionPrototype",
    "timestamp": 6783,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringLength",
    "timestamp": 6788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_StringWrapperLength",
    "timestamp": 6794,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_NoFeedback",
    "timestamp": 6801,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC_Slow",
    "timestamp": 6807,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC_NoFeedback",
    "timestamp": 6813,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineNamedOwnIC_NoFeedback",
    "timestamp": 6819,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_SloppyArguments",
    "timestamp": 6824,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIndexedInterceptorIC",
    "timestamp": 6830,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_Standard",
    "timestamp": 6836,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_GrowNoTransitionHandleCOW",
    "timestamp": 6843,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionIgnoreOOB",
    "timestamp": 6850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC_SloppyArguments_NoTransitionHandleCOW",
    "timestamp": 6857,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_Standard",
    "timestamp": 6863,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_GrowNoTransitionHandleCOW",
    "timestamp": 6869,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionIgnoreOOB",
    "timestamp": 6875,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreFastElementIC_NoTransitionHandleCOW",
    "timestamp": 6882,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_Standard",
    "timestamp": 6889,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_GrowNoTransitionHandleCOW",
    "timestamp": 6898,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionIgnoreOOB",
    "timestamp": 6905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ElementsTransitionAndStore_NoTransitionHandleCOW",
    "timestamp": 6911,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_PolymorphicName",
    "timestamp": 6917,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_SloppyArguments",
    "timestamp": 6923,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasIndexedInterceptorIC",
    "timestamp": 6929,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EnqueueMicrotask",
    "timestamp": 6935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasksTrampoline",
    "timestamp": 6941,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RunMicrotasks",
    "timestamp": 6947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "HasProperty",
    "timestamp": 6957,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DeleteProperty",
    "timestamp": 6962,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyDataProperties",
    "timestamp": 6968,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetDataProperties",
    "timestamp": 6974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyDataPropertiesWithExcludedPropertiesOnStack",
    "timestamp": 6979,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CopyDataPropertiesWithExcludedProperties",
    "timestamp": 6986,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Abort",
    "timestamp": 6992,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AbortCSADcheck",
    "timestamp": 6997,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "EmptyFunction",
    "timestamp": 7003,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Illegal",
    "timestamp": 7008,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictPoisonPillThrower",
    "timestamp": 7014,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "UnsupportedThrower",
    "timestamp": 7020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReturnReceiver",
    "timestamp": 7026,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructor",
    "timestamp": 7031,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConstructorImpl",
    "timestamp": 7037,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 7042,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 7049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 7055,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 7065,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 7070,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 7078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 7084,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNoArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 7092,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DontOverride",
    "timestamp": 7099,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DontOverride",
    "timestamp": 7106,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedSmi_DisableAllocationSites",
    "timestamp": 7113,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleySmi_DisableAllocationSites",
    "timestamp": 7120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Packed_DisableAllocationSites",
    "timestamp": 7126,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_Holey_DisableAllocationSites",
    "timestamp": 7133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_PackedDouble_DisableAllocationSites",
    "timestamp": 7140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySingleArgumentConstructor_HoleyDouble_DisableAllocationSites",
    "timestamp": 7149,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayNArgumentsConstructor",
    "timestamp": 7155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayConcat",
    "timestamp": 7160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFill",
    "timestamp": 7166,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesSmiOrObject",
    "timestamp": 7171,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesPackedDoubles",
    "timestamp": 7178,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludesHoleyDoubles",
    "timestamp": 7183,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIncludes",
    "timestamp": 7189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfSmiOrObject",
    "timestamp": 7195,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfPackedDoubles",
    "timestamp": 7201,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOfHoleyDoubles",
    "timestamp": 7206,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIndexOf",
    "timestamp": 7212,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPop",
    "timestamp": 7218,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePop",
    "timestamp": 7224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeGroupBy",
    "timestamp": 7229,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeGroupByToMap",
    "timestamp": 7235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPush",
    "timestamp": 7241,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypePush",
    "timestamp": 7246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayShift",
    "timestamp": 7252,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayUnshift",
    "timestamp": 7257,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArray",
    "timestamp": 7263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneFastJSArrayFillingHoles",
    "timestamp": 7269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExtractFastJSArray",
    "timestamp": 7275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeEntries",
    "timestamp": 7281,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeKeys",
    "timestamp": 7287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeValues",
    "timestamp": 7297,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIteratorPrototypeNext",
    "timestamp": 7302,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlattenIntoArray",
    "timestamp": 7308,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FlatMapIntoArray",
    "timestamp": 7314,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlat",
    "timestamp": 7320,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFlatMap",
    "timestamp": 7326,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor",
    "timestamp": 7331,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferConstructor_DoNotInitialize",
    "timestamp": 7337,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeSlice",
    "timestamp": 7344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeResize",
    "timestamp": 7349,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionEnter",
    "timestamp": 7355,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionReject",
    "timestamp": 7361,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionResolve",
    "timestamp": 7366,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionLazyDeoptContinuation",
    "timestamp": 7373,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitCaught",
    "timestamp": 7379,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitUncaught",
    "timestamp": 7385,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitRejectClosure",
    "timestamp": 7391,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionAwaitResolveClosure",
    "timestamp": 7398,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntConstructor",
    "timestamp": 7404,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsUintN",
    "timestamp": 7409,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAsIntN",
    "timestamp": 7414,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToLocaleString",
    "timestamp": 7420,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeToString",
    "timestamp": 7426,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntPrototypeValueOf",
    "timestamp": 7431,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetColumnNumber",
    "timestamp": 7438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEnclosingColumnNumber",
    "timestamp": 7444,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEnclosingLineNumber",
    "timestamp": 7450,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetEvalOrigin",
    "timestamp": 7457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFileName",
    "timestamp": 7463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunction",
    "timestamp": 7469,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetFunctionName",
    "timestamp": 7475,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetLineNumber",
    "timestamp": 7481,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetMethodName",
    "timestamp": 7486,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPosition",
    "timestamp": 7493,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetPromiseIndex",
    "timestamp": 7499,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetScriptNameOrSourceURL",
    "timestamp": 7505,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetThis",
    "timestamp": 7511,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeGetTypeName",
    "timestamp": 7517,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsAsync",
    "timestamp": 7523,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsConstructor",
    "timestamp": 7529,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsEval",
    "timestamp": 7535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsNative",
    "timestamp": 7541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsPromiseAll",
    "timestamp": 7547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeIsToplevel",
    "timestamp": 7553,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallSitePrototypeToString",
    "timestamp": 7559,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDebug",
    "timestamp": 7565,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleError",
    "timestamp": 7571,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleInfo",
    "timestamp": 7576,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleLog",
    "timestamp": 7582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleWarn",
    "timestamp": 7587,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDir",
    "timestamp": 7592,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleDirXml",
    "timestamp": 7598,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTable",
    "timestamp": 7603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTrace",
    "timestamp": 7609,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroup",
    "timestamp": 7615,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupCollapsed",
    "timestamp": 7621,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleGroupEnd",
    "timestamp": 7629,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleClear",
    "timestamp": 7634,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCount",
    "timestamp": 7640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleCountReset",
    "timestamp": 7646,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleAssert",
    "timestamp": 7651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfile",
    "timestamp": 7657,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleProfileEnd",
    "timestamp": 7662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTime",
    "timestamp": 7672,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeLog",
    "timestamp": 7677,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeEnd",
    "timestamp": 7682,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleTimeStamp",
    "timestamp": 7687,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConsoleContext",
    "timestamp": 7693,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewConstructor",
    "timestamp": 7698,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateConstructor",
    "timestamp": 7704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDate",
    "timestamp": 7710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetDay",
    "timestamp": 7716,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetFullYear",
    "timestamp": 7722,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetHours",
    "timestamp": 7728,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMilliseconds",
    "timestamp": 7734,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMinutes",
    "timestamp": 7740,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetMonth",
    "timestamp": 7746,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetSeconds",
    "timestamp": 7751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTime",
    "timestamp": 7757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetTimezoneOffset",
    "timestamp": 7763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDate",
    "timestamp": 7769,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCDay",
    "timestamp": 7774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCFullYear",
    "timestamp": 7780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCHours",
    "timestamp": 7786,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMilliseconds",
    "timestamp": 7792,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMinutes",
    "timestamp": 7798,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCMonth",
    "timestamp": 7804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetUTCSeconds",
    "timestamp": 7814,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeValueOf",
    "timestamp": 7820,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToPrimitive",
    "timestamp": 7826,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeGetYear",
    "timestamp": 7832,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetYear",
    "timestamp": 7839,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateNow",
    "timestamp": 7845,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateParse",
    "timestamp": 7850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetDate",
    "timestamp": 7855,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetFullYear",
    "timestamp": 7861,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetHours",
    "timestamp": 7868,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMilliseconds",
    "timestamp": 7873,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMinutes",
    "timestamp": 7879,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetMonth",
    "timestamp": 7884,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetSeconds",
    "timestamp": 7890,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetTime",
    "timestamp": 7896,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCDate",
    "timestamp": 7901,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCFullYear",
    "timestamp": 7907,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCHours",
    "timestamp": 7913,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMilliseconds",
    "timestamp": 7919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMinutes",
    "timestamp": 7925,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCMonth",
    "timestamp": 7931,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeSetUTCSeconds",
    "timestamp": 7937,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToDateString",
    "timestamp": 7943,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToISOString",
    "timestamp": 7948,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToUTCString",
    "timestamp": 7954,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToString",
    "timestamp": 7961,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToTimeString",
    "timestamp": 7966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToJson",
    "timestamp": 7972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateUTC",
    "timestamp": 7978,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorConstructor",
    "timestamp": 7983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorCaptureStackTrace",
    "timestamp": 7989,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ErrorPrototypeToString",
    "timestamp": 7994,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionConstructor",
    "timestamp": 8000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeApply",
    "timestamp": 8006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeBind",
    "timestamp": 8012,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeCall",
    "timestamp": 8017,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeToString",
    "timestamp": 8023,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateIterResultObject",
    "timestamp": 8029,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateGeneratorObject",
    "timestamp": 8035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorFunctionConstructor",
    "timestamp": 8044,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeNext",
    "timestamp": 8050,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeReturn",
    "timestamp": 8057,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GeneratorPrototypeThrow",
    "timestamp": 8063,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFunctionConstructor",
    "timestamp": 8069,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SuspendGeneratorBaseline",
    "timestamp": 8074,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResumeGeneratorBaseline",
    "timestamp": 8080,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetIteratorWithFeedbackLazyDeoptContinuation",
    "timestamp": 8086,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURI",
    "timestamp": 8092,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalDecodeURIComponent",
    "timestamp": 8098,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURI",
    "timestamp": 8105,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEncodeURIComponent",
    "timestamp": 8111,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEscape",
    "timestamp": 8117,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalUnescape",
    "timestamp": 8122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalEval",
    "timestamp": 8127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsFinite",
    "timestamp": 8133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GlobalIsNaN",
    "timestamp": 8139,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonParse",
    "timestamp": 8144,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JsonStringify",
    "timestamp": 8149,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC",
    "timestamp": 8155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Megamorphic",
    "timestamp": 8161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadIC_Noninlined",
    "timestamp": 8168,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline",
    "timestamp": 8174,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICBaseline",
    "timestamp": 8179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadICTrampoline_Megamorphic",
    "timestamp": 8184,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadSuperIC",
    "timestamp": 8190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadSuperICBaseline",
    "timestamp": 8196,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC",
    "timestamp": 8202,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadIC_Megamorphic",
    "timestamp": 8207,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline",
    "timestamp": 8214,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICBaseline",
    "timestamp": 8220,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedLoadICTrampoline_Megamorphic",
    "timestamp": 8226,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalIC",
    "timestamp": 8232,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalICTrampoline",
    "timestamp": 8238,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreGlobalICBaseline",
    "timestamp": 8243,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreIC",
    "timestamp": 8249,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreICTrampoline",
    "timestamp": 8255,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreICBaseline",
    "timestamp": 8261,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineNamedOwnIC",
    "timestamp": 8267,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineNamedOwnICTrampoline",
    "timestamp": 8272,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineNamedOwnICBaseline",
    "timestamp": 8278,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreIC",
    "timestamp": 8284,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreICTrampoline",
    "timestamp": 8290,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedStoreICBaseline",
    "timestamp": 8295,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineKeyedOwnIC",
    "timestamp": 8301,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineKeyedOwnICTrampoline",
    "timestamp": 8307,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DefineKeyedOwnICBaseline",
    "timestamp": 8313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralIC",
    "timestamp": 8319,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreInArrayLiteralICBaseline",
    "timestamp": 8326,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LookupContextBaseline",
    "timestamp": 8332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LookupContextInsideTypeofBaseline",
    "timestamp": 8339,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalIC",
    "timestamp": 8347,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeof",
    "timestamp": 8353,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICTrampoline",
    "timestamp": 8359,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICBaseline",
    "timestamp": 8366,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeofTrampoline",
    "timestamp": 8373,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadGlobalICInsideTypeofBaseline",
    "timestamp": 8379,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LookupGlobalICBaseline",
    "timestamp": 8386,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LookupGlobalICInsideTypeofBaseline",
    "timestamp": 8393,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC",
    "timestamp": 8402,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectICBaseline",
    "timestamp": 8409,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CloneObjectIC_Slow",
    "timestamp": 8415,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC",
    "timestamp": 8421,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasICBaseline",
    "timestamp": 8426,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "KeyedHasIC_Megamorphic",
    "timestamp": 8436,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToList",
    "timestamp": 8441,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArray",
    "timestamp": 8448,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListWithSymbolLookup",
    "timestamp": 8453,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArrayWithSymbolLookupSlow",
    "timestamp": 8460,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToListMayPreserveHoles",
    "timestamp": 8466,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IterableToFixedArrayForWasm",
    "timestamp": 8472,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringListFromIterable",
    "timestamp": 8480,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FindOrderedHashMapEntry",
    "timestamp": 8485,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapConstructor",
    "timestamp": 8491,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeSet",
    "timestamp": 8497,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeDelete",
    "timestamp": 8502,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGet",
    "timestamp": 8508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeHas",
    "timestamp": 8513,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeClear",
    "timestamp": 8519,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeEntries",
    "timestamp": 8525,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeGetSize",
    "timestamp": 8531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeForEach",
    "timestamp": 8537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeKeys",
    "timestamp": 8543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapPrototypeValues",
    "timestamp": 8548,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorPrototypeNext",
    "timestamp": 8554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MapIteratorToList",
    "timestamp": 8560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToExponential",
    "timestamp": 8565,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToFixed",
    "timestamp": 8571,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToLocaleString",
    "timestamp": 8577,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToPrecision",
    "timestamp": 8583,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValue",
    "timestamp": 8590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SameValueNumbersOnly",
    "timestamp": 8599,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Add_Baseline",
    "timestamp": 8604,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AddSmi_Baseline",
    "timestamp": 8611,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Subtract_Baseline",
    "timestamp": 8617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SubtractSmi_Baseline",
    "timestamp": 8623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Multiply_Baseline",
    "timestamp": 8629,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MultiplySmi_Baseline",
    "timestamp": 8634,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Divide_Baseline",
    "timestamp": 8639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DivideSmi_Baseline",
    "timestamp": 8645,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Modulus_Baseline",
    "timestamp": 8651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ModulusSmi_Baseline",
    "timestamp": 8657,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Exponentiate_Baseline",
    "timestamp": 8663,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ExponentiateSmi_Baseline",
    "timestamp": 8668,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAnd_Baseline",
    "timestamp": 8674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAndSmi_Baseline",
    "timestamp": 8680,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOr_Baseline",
    "timestamp": 8685,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOrSmi_Baseline",
    "timestamp": 8691,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXor_Baseline",
    "timestamp": 8697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXorSmi_Baseline",
    "timestamp": 8703,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeft_Baseline",
    "timestamp": 8709,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeftSmi_Baseline",
    "timestamp": 8715,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRight_Baseline",
    "timestamp": 8721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightSmi_Baseline",
    "timestamp": 8727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogical_Baseline",
    "timestamp": 8732,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogicalSmi_Baseline",
    "timestamp": 8738,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Add_WithFeedback",
    "timestamp": 8744,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Subtract_WithFeedback",
    "timestamp": 8750,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Multiply_WithFeedback",
    "timestamp": 8756,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Divide_WithFeedback",
    "timestamp": 8762,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Modulus_WithFeedback",
    "timestamp": 8767,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Exponentiate_WithFeedback",
    "timestamp": 8773,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAnd_WithFeedback",
    "timestamp": 8779,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOr_WithFeedback",
    "timestamp": 8785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXor_WithFeedback",
    "timestamp": 8791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeft_WithFeedback",
    "timestamp": 8797,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRight_WithFeedback",
    "timestamp": 8803,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogical_WithFeedback",
    "timestamp": 8809,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Equal_Baseline",
    "timestamp": 8818,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictEqual_Baseline",
    "timestamp": 8823,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThan_Baseline",
    "timestamp": 8830,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThan_Baseline",
    "timestamp": 8836,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThanOrEqual_Baseline",
    "timestamp": 8842,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThanOrEqual_Baseline",
    "timestamp": 8848,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Equal_WithFeedback",
    "timestamp": 8853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictEqual_WithFeedback",
    "timestamp": 8859,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThan_WithFeedback",
    "timestamp": 8865,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThan_WithFeedback",
    "timestamp": 8870,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThanOrEqual_WithFeedback",
    "timestamp": 8876,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThanOrEqual_WithFeedback",
    "timestamp": 8886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseNot_Baseline",
    "timestamp": 8893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Decrement_Baseline",
    "timestamp": 8898,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Increment_Baseline",
    "timestamp": 8904,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Negate_Baseline",
    "timestamp": 8910,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseNot_WithFeedback",
    "timestamp": 8916,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Decrement_WithFeedback",
    "timestamp": 8922,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Increment_WithFeedback",
    "timestamp": 8927,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Negate_WithFeedback",
    "timestamp": 8933,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectAssign",
    "timestamp": 8939,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectCreate",
    "timestamp": 8944,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineGetter",
    "timestamp": 8949,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperties",
    "timestamp": 8955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineProperty",
    "timestamp": 8961,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectDefineSetter",
    "timestamp": 8966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectEntries",
    "timestamp": 8972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFreeze",
    "timestamp": 8978,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptor",
    "timestamp": 8983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyDescriptors",
    "timestamp": 8989,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertyNames",
    "timestamp": 8995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetOwnPropertySymbols",
    "timestamp": 9001,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectHasOwn",
    "timestamp": 9007,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIs",
    "timestamp": 9013,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsFrozen",
    "timestamp": 9018,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsSealed",
    "timestamp": 9024,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectKeys",
    "timestamp": 9029,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupGetter",
    "timestamp": 9035,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectLookupSetter",
    "timestamp": 9040,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeHasOwnProperty",
    "timestamp": 9046,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeIsPrototypeOf",
    "timestamp": 9051,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypePropertyIsEnumerable",
    "timestamp": 9058,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeGetProto",
    "timestamp": 9064,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeSetProto",
    "timestamp": 9071,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSeal",
    "timestamp": 9077,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectToString",
    "timestamp": 9082,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectValues",
    "timestamp": 9087,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryHasInstance",
    "timestamp": 9093,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstanceOf",
    "timestamp": 9099,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstanceOf_WithFeedback",
    "timestamp": 9104,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "InstanceOf_Baseline",
    "timestamp": 9110,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 9115,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInPrepare",
    "timestamp": 9121,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInFilter",
    "timestamp": 9127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectApply",
    "timestamp": 9133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectConstruct",
    "timestamp": 9138,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDefineProperty",
    "timestamp": 9144,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetOwnPropertyDescriptor",
    "timestamp": 9150,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectOwnKeys",
    "timestamp": 9156,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSet",
    "timestamp": 9161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture1Getter",
    "timestamp": 9167,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture2Getter",
    "timestamp": 9173,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture3Getter",
    "timestamp": 9179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture4Getter",
    "timestamp": 9184,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture5Getter",
    "timestamp": 9190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture6Getter",
    "timestamp": 9200,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture7Getter",
    "timestamp": 9205,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture8Getter",
    "timestamp": 9211,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpCapture9Getter",
    "timestamp": 9217,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpConstructor",
    "timestamp": 9222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputGetter",
    "timestamp": 9228,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInputSetter",
    "timestamp": 9235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastMatchGetter",
    "timestamp": 9240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLastParenGetter",
    "timestamp": 9246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpLeftContextGetter",
    "timestamp": 9252,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeCompile",
    "timestamp": 9258,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeToString",
    "timestamp": 9264,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpRightContextGetter",
    "timestamp": 9270,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecAtom",
    "timestamp": 9275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExecInternal",
    "timestamp": 9282,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpInterpreterTrampoline",
    "timestamp": 9287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpExperimentalTrampoline",
    "timestamp": 9293,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetConstructor",
    "timestamp": 9299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeHas",
    "timestamp": 9306,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeAdd",
    "timestamp": 9311,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeDelete",
    "timestamp": 9317,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeClear",
    "timestamp": 9322,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeEntries",
    "timestamp": 9327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeGetSize",
    "timestamp": 9334,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeForEach",
    "timestamp": 9339,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetPrototypeValues",
    "timestamp": 9345,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetIteratorPrototypeNext",
    "timestamp": 9351,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetOrSetIteratorToList",
    "timestamp": 9357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShadowRealmConstructor",
    "timestamp": 9364,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShadowRealmGetWrappedValue",
    "timestamp": 9370,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShadowRealmPrototypeEvaluate",
    "timestamp": 9375,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShadowRealmPrototypeImportValue",
    "timestamp": 9381,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGetByteLength",
    "timestamp": 9388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeSlice",
    "timestamp": 9393,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGrow",
    "timestamp": 9399,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsLoad",
    "timestamp": 9406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsStore",
    "timestamp": 9412,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsExchange",
    "timestamp": 9417,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsCompareExchange",
    "timestamp": 9423,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAdd",
    "timestamp": 9429,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsSub",
    "timestamp": 9435,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsAnd",
    "timestamp": 9440,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsOr",
    "timestamp": 9445,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsXor",
    "timestamp": 9451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsNotify",
    "timestamp": 9457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsIsLockFree",
    "timestamp": 9462,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWait",
    "timestamp": 9467,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AtomicsWaitAsync",
    "timestamp": 9473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCodePoint",
    "timestamp": 9479,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFromCharCode",
    "timestamp": 9484,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLastIndexOf",
    "timestamp": 9490,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatchAll",
    "timestamp": 9496,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLocaleCompare",
    "timestamp": 9501,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeReplace",
    "timestamp": 9508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSplit",
    "timestamp": 9513,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRaw",
    "timestamp": 9519,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolConstructor",
    "timestamp": 9525,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolFor",
    "timestamp": 9531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolKeyFor",
    "timestamp": 9538,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayBaseConstructor",
    "timestamp": 9543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayConstructor",
    "timestamp": 9549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeBuffer",
    "timestamp": 9554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteLength",
    "timestamp": 9560,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeByteOffset",
    "timestamp": 9566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLength",
    "timestamp": 9576,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeCopyWithin",
    "timestamp": 9582,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFill",
    "timestamp": 9590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIncludes",
    "timestamp": 9597,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeIndexOf",
    "timestamp": 9603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeLastIndexOf",
    "timestamp": 9609,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReverse",
    "timestamp": 9615,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToStringTag",
    "timestamp": 9621,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeMap",
    "timestamp": 9627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericJSToWasmWrapper",
    "timestamp": 9633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmReturnPromiseOnSuspend",
    "timestamp": 9639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmSuspend",
    "timestamp": 9646,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmResume",
    "timestamp": 9651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmCompileLazy",
    "timestamp": 9656,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmDebugBreak",
    "timestamp": 9662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmOnStackReplace",
    "timestamp": 9668,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmFloat32ToNumber",
    "timestamp": 9674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmFloat64ToNumber",
    "timestamp": 9680,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI32AtomicWait32",
    "timestamp": 9686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64AtomicWait32",
    "timestamp": 9692,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JSToWasmLazyDeoptContinuation",
    "timestamp": 9697,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapConstructor",
    "timestamp": 9704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapLookupHashIndex",
    "timestamp": 9710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapGet",
    "timestamp": 9716,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeHas",
    "timestamp": 9721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeSet",
    "timestamp": 9727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakMapPrototypeDelete",
    "timestamp": 9734,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetConstructor",
    "timestamp": 9739,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeHas",
    "timestamp": 9745,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeAdd",
    "timestamp": 9751,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakSetPrototypeDelete",
    "timestamp": 9758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionDelete",
    "timestamp": 9763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakCollectionSet",
    "timestamp": 9769,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedStructTypeConstructor",
    "timestamp": 9775,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedStructConstructor",
    "timestamp": 9782,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResolve",
    "timestamp": 9788,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReject",
    "timestamp": 9793,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYield",
    "timestamp": 9799,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturn",
    "timestamp": 9804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorResumeNext",
    "timestamp": 9810,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorFunctionConstructor",
    "timestamp": 9816,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeNext",
    "timestamp": 9821,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeReturn",
    "timestamp": 9827,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorPrototypeThrow",
    "timestamp": 9833,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitCaught",
    "timestamp": 9838,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitUncaught",
    "timestamp": 9844,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitResolveClosure",
    "timestamp": 9850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorAwaitRejectClosure",
    "timestamp": 9856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorYieldResolveClosure",
    "timestamp": 9862,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedResolveClosure",
    "timestamp": 9868,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnClosedRejectClosure",
    "timestamp": 9874,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncGeneratorReturnResolveClosure",
    "timestamp": 9881,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeNext",
    "timestamp": 9887,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeThrow",
    "timestamp": 9893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncFromSyncIteratorPrototypeReturn",
    "timestamp": 9899,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncIteratorValueUnwrap",
    "timestamp": 9905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 9910,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 9917,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 9924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 9934,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return1_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 9940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 9947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 9958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_DontSaveFPRegs_ArgvInRegister_NoBuiltinExit",
    "timestamp": 9964,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_NoBuiltinExit",
    "timestamp": 9971,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CEntry_Return2_SaveFPRegs_ArgvOnStack_BuiltinExit",
    "timestamp": 9977,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DirectCEntry",
    "timestamp": 9983,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAdd_CheckNone",
    "timestamp": 9989,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SubString",
    "timestamp": 9995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StackCheck",
    "timestamp": 10000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DoubleToI",
    "timestamp": 10006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetProperty",
    "timestamp": 10014,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetPropertyWithReceiver",
    "timestamp": 10020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SetProperty",
    "timestamp": 10025,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateDataProperty",
    "timestamp": 10031,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemCopyUint8Uint8",
    "timestamp": 10037,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MemMove",
    "timestamp": 10043,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IsTraceCategoryEnabled",
    "timestamp": 10048,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Trace",
    "timestamp": 10055,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryUnregister",
    "timestamp": 10060,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AsyncModuleEvaluate",
    "timestamp": 10066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallAsyncModuleFulfilled",
    "timestamp": 10071,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallAsyncModuleRejected",
    "timestamp": 10077,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowTimeZone",
    "timestamp": 10083,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowInstant",
    "timestamp": 10089,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowPlainDateTime",
    "timestamp": 10095,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowPlainDateTimeISO",
    "timestamp": 10101,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowZonedDateTime",
    "timestamp": 10107,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowZonedDateTimeISO",
    "timestamp": 10112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowPlainDate",
    "timestamp": 10118,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowPlainDateISO",
    "timestamp": 10124,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalNowPlainTimeISO",
    "timestamp": 10130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateConstructor",
    "timestamp": 10137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateFrom",
    "timestamp": 10143,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateCompare",
    "timestamp": 10148,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeCalendar",
    "timestamp": 10154,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeYear",
    "timestamp": 10160,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeMonth",
    "timestamp": 10166,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeMonthCode",
    "timestamp": 10172,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDay",
    "timestamp": 10179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDayOfWeek",
    "timestamp": 10184,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDayOfYear",
    "timestamp": 10190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeWeekOfYear",
    "timestamp": 10196,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDaysInWeek",
    "timestamp": 10202,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDaysInMonth",
    "timestamp": 10208,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeDaysInYear",
    "timestamp": 10215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeMonthsInYear",
    "timestamp": 10221,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeInLeapYear",
    "timestamp": 10227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToPlainYearMonth",
    "timestamp": 10234,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToPlainMonthDay",
    "timestamp": 10240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeGetISOFields",
    "timestamp": 10245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeAdd",
    "timestamp": 10252,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeSubtract",
    "timestamp": 10258,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeWith",
    "timestamp": 10273,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeWithCalendar",
    "timestamp": 10280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeUntil",
    "timestamp": 10289,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeSince",
    "timestamp": 10294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeEquals",
    "timestamp": 10299,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToPlainDateTime",
    "timestamp": 10304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToZonedDateTime",
    "timestamp": 10310,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToString",
    "timestamp": 10316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToJSON",
    "timestamp": 10322,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeValueOf",
    "timestamp": 10327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimeConstructor",
    "timestamp": 10333,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimeFrom",
    "timestamp": 10338,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimeCompare",
    "timestamp": 10344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeCalendar",
    "timestamp": 10349,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeHour",
    "timestamp": 10355,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeMinute",
    "timestamp": 10360,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeSecond",
    "timestamp": 10367,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeMillisecond",
    "timestamp": 10372,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeMicrosecond",
    "timestamp": 10378,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeNanosecond",
    "timestamp": 10384,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeAdd",
    "timestamp": 10390,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeSubtract",
    "timestamp": 10395,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeWith",
    "timestamp": 10401,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeUntil",
    "timestamp": 10407,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeSince",
    "timestamp": 10413,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeRound",
    "timestamp": 10419,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeEquals",
    "timestamp": 10425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeToPlainDateTime",
    "timestamp": 10432,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeToZonedDateTime",
    "timestamp": 10438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeGetISOFields",
    "timestamp": 10446,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeToString",
    "timestamp": 10451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeToJSON",
    "timestamp": 10457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeValueOf",
    "timestamp": 10463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimeConstructor",
    "timestamp": 10469,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimeFrom",
    "timestamp": 10475,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimeCompare",
    "timestamp": 10482,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeCalendar",
    "timestamp": 10488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeYear",
    "timestamp": 10494,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMonth",
    "timestamp": 10501,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMonthCode",
    "timestamp": 10508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDay",
    "timestamp": 10514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeHour",
    "timestamp": 10520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMinute",
    "timestamp": 10529,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeSecond",
    "timestamp": 10535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMillisecond",
    "timestamp": 10541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMicrosecond",
    "timestamp": 10547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeNanosecond",
    "timestamp": 10553,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDayOfWeek",
    "timestamp": 10559,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDayOfYear",
    "timestamp": 10566,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeWeekOfYear",
    "timestamp": 10572,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDaysInWeek",
    "timestamp": 10579,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDaysInMonth",
    "timestamp": 10585,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeDaysInYear",
    "timestamp": 10592,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeMonthsInYear",
    "timestamp": 10598,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeInLeapYear",
    "timestamp": 10608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeWith",
    "timestamp": 10614,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeWithPlainTime",
    "timestamp": 10620,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeWithPlainDate",
    "timestamp": 10626,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeWithCalendar",
    "timestamp": 10633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeAdd",
    "timestamp": 10639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeSubtract",
    "timestamp": 10645,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeUntil",
    "timestamp": 10651,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeSince",
    "timestamp": 10657,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeRound",
    "timestamp": 10664,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeEquals",
    "timestamp": 10670,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToString",
    "timestamp": 10676,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToJSON",
    "timestamp": 10682,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeValueOf",
    "timestamp": 10688,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToZonedDateTime",
    "timestamp": 10695,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToPlainDate",
    "timestamp": 10701,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToPlainYearMonth",
    "timestamp": 10708,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToPlainMonthDay",
    "timestamp": 10715,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToPlainTime",
    "timestamp": 10721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeGetISOFields",
    "timestamp": 10727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimeConstructor",
    "timestamp": 10734,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimeFrom",
    "timestamp": 10740,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimeCompare",
    "timestamp": 10746,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeCalendar",
    "timestamp": 10752,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeTimeZone",
    "timestamp": 10758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeYear",
    "timestamp": 10765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMonth",
    "timestamp": 10772,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMonthCode",
    "timestamp": 10779,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDay",
    "timestamp": 10786,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeHour",
    "timestamp": 10792,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMinute",
    "timestamp": 10797,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeSecond",
    "timestamp": 10803,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMillisecond",
    "timestamp": 10809,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMicrosecond",
    "timestamp": 10815,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeNanosecond",
    "timestamp": 10822,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEpochSeconds",
    "timestamp": 10828,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEpochMilliseconds",
    "timestamp": 10835,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEpochMicroseconds",
    "timestamp": 10842,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEpochNanoseconds",
    "timestamp": 10848,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDayOfWeek",
    "timestamp": 10854,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDayOfYear",
    "timestamp": 10861,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWeekOfYear",
    "timestamp": 10867,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeHoursInDay",
    "timestamp": 10873,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDaysInWeek",
    "timestamp": 10880,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDaysInMonth",
    "timestamp": 10886,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeDaysInYear",
    "timestamp": 10892,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeMonthsInYear",
    "timestamp": 10899,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeInLeapYear",
    "timestamp": 10905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeOffsetNanoseconds",
    "timestamp": 10911,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeOffset",
    "timestamp": 10918,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWith",
    "timestamp": 10928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWithPlainTime",
    "timestamp": 10935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWithPlainDate",
    "timestamp": 10941,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWithTimeZone",
    "timestamp": 10949,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeWithCalendar",
    "timestamp": 10955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeAdd",
    "timestamp": 10961,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeSubtract",
    "timestamp": 10968,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeUntil",
    "timestamp": 10974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeSince",
    "timestamp": 10980,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeRound",
    "timestamp": 10986,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEquals",
    "timestamp": 10992,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToString",
    "timestamp": 10998,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToJSON",
    "timestamp": 11004,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeValueOf",
    "timestamp": 11010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeStartOfDay",
    "timestamp": 11020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToInstant",
    "timestamp": 11027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToPlainDate",
    "timestamp": 11033,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToPlainTime",
    "timestamp": 11039,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToPlainDateTime",
    "timestamp": 11046,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToPlainYearMonth",
    "timestamp": 11053,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToPlainMonthDay",
    "timestamp": 11060,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeGetISOFields",
    "timestamp": 11066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationConstructor",
    "timestamp": 11072,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationFrom",
    "timestamp": 11078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationCompare",
    "timestamp": 11084,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeYears",
    "timestamp": 11090,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeMonths",
    "timestamp": 11096,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeWeeks",
    "timestamp": 11102,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeDays",
    "timestamp": 11108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeHours",
    "timestamp": 11114,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeMinutes",
    "timestamp": 11120,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeSeconds",
    "timestamp": 11127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeMilliseconds",
    "timestamp": 11133,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeMicroseconds",
    "timestamp": 11140,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeNanoseconds",
    "timestamp": 11146,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeSign",
    "timestamp": 11152,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeBlank",
    "timestamp": 11158,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeWith",
    "timestamp": 11165,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeNegated",
    "timestamp": 11171,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeAbs",
    "timestamp": 11177,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeAdd",
    "timestamp": 11183,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeSubtract",
    "timestamp": 11189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeRound",
    "timestamp": 11196,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeTotal",
    "timestamp": 11202,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeToString",
    "timestamp": 11209,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeToJSON",
    "timestamp": 11217,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeValueOf",
    "timestamp": 11223,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantConstructor",
    "timestamp": 11230,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFrom",
    "timestamp": 11236,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFromEpochSeconds",
    "timestamp": 11243,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFromEpochMilliseconds",
    "timestamp": 11251,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFromEpochMicroseconds",
    "timestamp": 11257,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFromEpochNanoseconds",
    "timestamp": 11269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantCompare",
    "timestamp": 11275,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeEpochSeconds",
    "timestamp": 11281,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeEpochMilliseconds",
    "timestamp": 11287,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeEpochMicroseconds",
    "timestamp": 11294,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeEpochNanoseconds",
    "timestamp": 11301,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeAdd",
    "timestamp": 11307,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeSubtract",
    "timestamp": 11314,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeUntil",
    "timestamp": 11320,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeSince",
    "timestamp": 11326,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeRound",
    "timestamp": 11332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeEquals",
    "timestamp": 11338,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeToString",
    "timestamp": 11344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeToJSON",
    "timestamp": 11350,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeValueOf",
    "timestamp": 11356,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeToZonedDateTime",
    "timestamp": 11362,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeToZonedDateTimeISO",
    "timestamp": 11368,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthConstructor",
    "timestamp": 11375,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthFrom",
    "timestamp": 11381,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthCompare",
    "timestamp": 11387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeCalendar",
    "timestamp": 11393,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeYear",
    "timestamp": 11399,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeMonth",
    "timestamp": 11406,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeMonthCode",
    "timestamp": 11412,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeDaysInYear",
    "timestamp": 11418,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeDaysInMonth",
    "timestamp": 11425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeMonthsInYear",
    "timestamp": 11431,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeInLeapYear",
    "timestamp": 11438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeWith",
    "timestamp": 11444,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeAdd",
    "timestamp": 11451,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeSubtract",
    "timestamp": 11457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeUntil",
    "timestamp": 11463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeSince",
    "timestamp": 11469,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeEquals",
    "timestamp": 11475,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeToString",
    "timestamp": 11482,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeToJSON",
    "timestamp": 11489,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeValueOf",
    "timestamp": 11495,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeToPlainDate",
    "timestamp": 11501,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeGetISOFields",
    "timestamp": 11508,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayConstructor",
    "timestamp": 11514,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayFrom",
    "timestamp": 11520,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeCalendar",
    "timestamp": 11526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeMonthCode",
    "timestamp": 11532,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeDay",
    "timestamp": 11538,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeWith",
    "timestamp": 11545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeEquals",
    "timestamp": 11551,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeToString",
    "timestamp": 11557,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeToJSON",
    "timestamp": 11564,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeValueOf",
    "timestamp": 11572,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeToPlainDate",
    "timestamp": 11578,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeGetISOFields",
    "timestamp": 11584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZoneConstructor",
    "timestamp": 11591,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZoneFrom",
    "timestamp": 11600,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeId",
    "timestamp": 11606,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetOffsetNanosecondsFor",
    "timestamp": 11612,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetOffsetStringFor",
    "timestamp": 11619,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetPlainDateTimeFor",
    "timestamp": 11625,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetInstantFor",
    "timestamp": 11632,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetPossibleInstantsFor",
    "timestamp": 11639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetNextTransition",
    "timestamp": 11645,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeGetPreviousTransition",
    "timestamp": 11652,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeToString",
    "timestamp": 11659,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalTimeZonePrototypeToJSON",
    "timestamp": 11665,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarConstructor",
    "timestamp": 11671,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarFrom",
    "timestamp": 11677,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeId",
    "timestamp": 11683,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDateFromFields",
    "timestamp": 11689,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeYearMonthFromFields",
    "timestamp": 11696,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeMonthDayFromFields",
    "timestamp": 11702,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDateAdd",
    "timestamp": 11708,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDateUntil",
    "timestamp": 11714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeYear",
    "timestamp": 11721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeMonth",
    "timestamp": 11727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeMonthCode",
    "timestamp": 11733,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDay",
    "timestamp": 11740,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDayOfWeek",
    "timestamp": 11746,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDayOfYear",
    "timestamp": 11752,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeWeekOfYear",
    "timestamp": 11758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDaysInWeek",
    "timestamp": 11764,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDaysInMonth",
    "timestamp": 11772,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeDaysInYear",
    "timestamp": 11778,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeMonthsInYear",
    "timestamp": 11785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeInLeapYear",
    "timestamp": 11791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeFields",
    "timestamp": 11798,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeMergeFields",
    "timestamp": 11804,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeToString",
    "timestamp": 11810,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeToJSON",
    "timestamp": 11816,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFixedArrayFromIterable",
    "timestamp": 11822,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantFixedArrayFromIterable",
    "timestamp": 11829,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "AggregateErrorConstructor",
    "timestamp": 11835,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeAt",
    "timestamp": 11841,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeConcat",
    "timestamp": 11847,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeCopyWithin",
    "timestamp": 11853,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopEagerDeoptContinuation",
    "timestamp": 11858,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopLazyDeoptContinuation",
    "timestamp": 11864,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEveryLoopContinuation",
    "timestamp": 11871,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayEvery",
    "timestamp": 11876,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopEagerDeoptContinuation",
    "timestamp": 11882,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopLazyDeoptContinuation",
    "timestamp": 11889,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilterLoopContinuation",
    "timestamp": 11895,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFilter",
    "timestamp": 11901,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopEagerDeoptContinuation",
    "timestamp": 11907,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopLazyDeoptContinuation",
    "timestamp": 11913,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 11919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLoopContinuation",
    "timestamp": 11925,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFind",
    "timestamp": 11935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopEagerDeoptContinuation",
    "timestamp": 11940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopLazyDeoptContinuation",
    "timestamp": 11947,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopAfterCallbackLazyDeoptContinuation",
    "timestamp": 11953,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindIndexLoopContinuation",
    "timestamp": 11960,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFindIndex",
    "timestamp": 11966,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLastLoopContinuation",
    "timestamp": 11972,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFindLast",
    "timestamp": 11978,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFindLastIndexLoopContinuation",
    "timestamp": 11984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeFindLastIndex",
    "timestamp": 11991,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopEagerDeoptContinuation",
    "timestamp": 11996,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopLazyDeoptContinuation",
    "timestamp": 12002,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEachLoopContinuation",
    "timestamp": 12008,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayForEach",
    "timestamp": 12015,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayFrom",
    "timestamp": 12020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayIsArray",
    "timestamp": 12026,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_DictionaryElements_0",
    "timestamp": 12031,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_FastSmiOrObjectElements_0",
    "timestamp": 12038,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_FastDoubleElements_0",
    "timestamp": 12044,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ConvertToLocaleString",
    "timestamp": 12050,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPush",
    "timestamp": 12056,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "JoinStackPop",
    "timestamp": 12061,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeJoin",
    "timestamp": 12067,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToLocaleString",
    "timestamp": 12074,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeToString",
    "timestamp": 12080,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeJoin",
    "timestamp": 12088,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeToLocaleString",
    "timestamp": 12095,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeLastIndexOf",
    "timestamp": 12101,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapPreLoopLazyDeoptContinuation",
    "timestamp": 12106,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopEagerDeoptContinuation",
    "timestamp": 12112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopLazyDeoptContinuation",
    "timestamp": 12119,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMapLoopContinuation",
    "timestamp": 12125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayMap",
    "timestamp": 12130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayOf",
    "timestamp": 12136,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightPreLoopEagerDeoptContinuation",
    "timestamp": 12142,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopEagerDeoptContinuation",
    "timestamp": 12149,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopLazyDeoptContinuation",
    "timestamp": 12155,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRightLoopContinuation",
    "timestamp": 12161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceRight",
    "timestamp": 12167,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReducePreLoopEagerDeoptContinuation",
    "timestamp": 12173,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopEagerDeoptContinuation",
    "timestamp": 12179,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopLazyDeoptContinuation",
    "timestamp": 12186,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduceLoopContinuation",
    "timestamp": 12192,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayReduce",
    "timestamp": 12198,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeReverse",
    "timestamp": 12204,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeShift",
    "timestamp": 12210,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSlice",
    "timestamp": 12215,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopEagerDeoptContinuation",
    "timestamp": 12221,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopLazyDeoptContinuation",
    "timestamp": 12227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySomeLoopContinuation",
    "timestamp": 12234,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArraySome",
    "timestamp": 12240,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSplice",
    "timestamp": 12245,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeUnshift",
    "timestamp": 12251,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeGetByteLength",
    "timestamp": 12257,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeGetMaxByteLength",
    "timestamp": 12263,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferPrototypeGetResizable",
    "timestamp": 12269,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGetMaxByteLength",
    "timestamp": 12279,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SharedArrayBufferPrototypeGetGrowable",
    "timestamp": 12285,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayBufferIsView",
    "timestamp": 12291,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToInteger",
    "timestamp": 12297,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastCreateDataProperty",
    "timestamp": 12303,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CheckSameObject",
    "timestamp": 12309,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanConstructor",
    "timestamp": 12315,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeToString",
    "timestamp": 12321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BooleanPrototypeValueOf",
    "timestamp": 12328,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAddNoThrow",
    "timestamp": 12334,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntAdd",
    "timestamp": 12340,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntSubtractNoThrow",
    "timestamp": 12345,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntSubtract",
    "timestamp": 12352,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BigIntUnaryMinus",
    "timestamp": 12357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToString",
    "timestamp": 12363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToString",
    "timestamp": 12368,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeValueOf",
    "timestamp": 12374,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToList",
    "timestamp": 12380,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharAt",
    "timestamp": 12385,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCharCodeAt",
    "timestamp": 12391,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeCodePointAt",
    "timestamp": 12397,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeConcat",
    "timestamp": 12403,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringConstructor",
    "timestamp": 12409,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAddConvertLeft",
    "timestamp": 12415,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringAddConvertRight",
    "timestamp": 12421,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringCharAt",
    "timestamp": 12428,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewClosureBaseline",
    "timestamp": 12435,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextEval",
    "timestamp": 12441,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewFunctionContextFunction",
    "timestamp": 12448,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 12455,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowArrayLiteral",
    "timestamp": 12461,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 12468,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateShallowObjectLiteral",
    "timestamp": 12474,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectConstructor",
    "timestamp": 12480,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateEmptyLiteralObject",
    "timestamp": 12486,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberConstructor",
    "timestamp": 12491,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericLazyDeoptContinuation",
    "timestamp": 12497,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToNumber",
    "timestamp": 12503,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumber",
    "timestamp": 12509,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonNumberToNumeric",
    "timestamp": 12515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToNumeric",
    "timestamp": 12521,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberToString",
    "timestamp": 12526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBoolean",
    "timestamp": 12531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToBooleanForBaselineJump",
    "timestamp": 12537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToLength",
    "timestamp": 12543,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToName",
    "timestamp": 12549,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ToObject",
    "timestamp": 12556,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Default",
    "timestamp": 12561,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_Number",
    "timestamp": 12567,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NonPrimitiveToPrimitive_String",
    "timestamp": 12574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_Number",
    "timestamp": 12580,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "OrdinaryToPrimitive_String",
    "timestamp": 12586,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastConsoleAssert",
    "timestamp": 12593,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBuffer",
    "timestamp": 12598,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteLength",
    "timestamp": 12604,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetByteOffset",
    "timestamp": 12610,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint8",
    "timestamp": 12617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt8",
    "timestamp": 12623,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint16",
    "timestamp": 12628,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt16",
    "timestamp": 12634,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetUint32",
    "timestamp": 12640,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetInt32",
    "timestamp": 12646,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat32",
    "timestamp": 12656,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetFloat64",
    "timestamp": 12662,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigUint64",
    "timestamp": 12668,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeGetBigInt64",
    "timestamp": 12674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint8",
    "timestamp": 12680,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt8",
    "timestamp": 12686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint16",
    "timestamp": 12692,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt16",
    "timestamp": 12698,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetUint32",
    "timestamp": 12704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetInt32",
    "timestamp": 12710,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat32",
    "timestamp": 12716,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetFloat64",
    "timestamp": 12721,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigUint64",
    "timestamp": 12727,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DataViewPrototypeSetBigInt64",
    "timestamp": 12733,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryConstructor",
    "timestamp": 12739,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryRegister",
    "timestamp": 12744,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FinalizationRegistryPrototypeCleanupSome",
    "timestamp": 12750,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FunctionPrototypeHasInstance",
    "timestamp": 12757,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastFunctionPrototypeBind",
    "timestamp": 12763,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 12768,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetTemplateObject",
    "timestamp": 12774,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ForInNext",
    "timestamp": 12780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetImportMetaObjectBaseline",
    "timestamp": 12785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetIteratorWithFeedback",
    "timestamp": 12791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GetIteratorBaseline",
    "timestamp": 12796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateAsyncFromSyncIteratorBaseline",
    "timestamp": 12802,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallIteratorWithFeedback",
    "timestamp": 12913,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAbs",
    "timestamp": 12920,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCeil",
    "timestamp": 12924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFloor",
    "timestamp": 12928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRound",
    "timestamp": 12932,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTrunc",
    "timestamp": 12936,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathPow",
    "timestamp": 12940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMax",
    "timestamp": 12945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathMin",
    "timestamp": 12949,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcos",
    "timestamp": 12954,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAcosh",
    "timestamp": 12958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsin",
    "timestamp": 12962,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAsinh",
    "timestamp": 12967,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan",
    "timestamp": 12971,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtan2",
    "timestamp": 12975,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathAtanh",
    "timestamp": 12979,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCbrt",
    "timestamp": 12984,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathClz32",
    "timestamp": 12988,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCos",
    "timestamp": 12993,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathCosh",
    "timestamp": 12997,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExp",
    "timestamp": 13001,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathExpm1",
    "timestamp": 13005,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathFround",
    "timestamp": 13010,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathImul",
    "timestamp": 13015,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog",
    "timestamp": 13019,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog1p",
    "timestamp": 13023,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog10",
    "timestamp": 13027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathLog2",
    "timestamp": 13032,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSin",
    "timestamp": 13036,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSign",
    "timestamp": 13041,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSinh",
    "timestamp": 13045,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathSqrt",
    "timestamp": 13049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTan",
    "timestamp": 13053,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathTanh",
    "timestamp": 13057,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathHypot",
    "timestamp": 13062,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MathRandom",
    "timestamp": 13066,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeToString",
    "timestamp": 13071,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsFinite",
    "timestamp": 13076,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsInteger",
    "timestamp": 13084,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsNaN",
    "timestamp": 13089,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberIsSafeInteger",
    "timestamp": 13093,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberPrototypeValueOf",
    "timestamp": 13098,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseFloat",
    "timestamp": 13103,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ParseInt",
    "timestamp": 13108,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberParseInt",
    "timestamp": 13112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Add",
    "timestamp": 13117,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Subtract",
    "timestamp": 13121,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Multiply",
    "timestamp": 13125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Divide",
    "timestamp": 13130,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Modulus",
    "timestamp": 13134,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Exponentiate",
    "timestamp": 13138,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Negate",
    "timestamp": 13142,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 13152,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Decrement",
    "timestamp": 13158,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Increment",
    "timestamp": 13163,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 13169,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRight",
    "timestamp": 13173,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 13178,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 13184,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 13190,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 13195,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThan",
    "timestamp": 13201,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LessThanOrEqual",
    "timestamp": 13206,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThan",
    "timestamp": 13211,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GreaterThanOrEqual",
    "timestamp": 13216,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Equal",
    "timestamp": 13222,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StrictEqual",
    "timestamp": 13227,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectFromEntries",
    "timestamp": 13232,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateObjectWithoutProperties",
    "timestamp": 13237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectIsExtensible",
    "timestamp": 13243,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPreventExtensions",
    "timestamp": 13265,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectGetPrototypeOf",
    "timestamp": 13270,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectSetPrototypeOf",
    "timestamp": 13274,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToString",
    "timestamp": 13279,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeValueOf",
    "timestamp": 13283,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ObjectPrototypeToLocaleString",
    "timestamp": 13288,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FulfillPromise",
    "timestamp": 13293,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RejectPromise",
    "timestamp": 13297,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewPromiseCapability",
    "timestamp": 13301,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultReject",
    "timestamp": 13306,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCapabilityDefaultResolve",
    "timestamp": 13311,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PerformPromiseThen",
    "timestamp": 13316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseReject",
    "timestamp": 13320,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseGetCapabilitiesExecutor",
    "timestamp": 13326,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructorLazyDeoptContinuation",
    "timestamp": 13330,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAll",
    "timestamp": 13335,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettled",
    "timestamp": 13340,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllResolveElementClosure",
    "timestamp": 13345,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledResolveElementClosure",
    "timestamp": 13350,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAllSettledRejectElementClosure",
    "timestamp": 13355,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAnyRejectElementClosure",
    "timestamp": 13360,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseAny",
    "timestamp": 13365,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseConstructor",
    "timestamp": 13369,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeCatch",
    "timestamp": 13373,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseValueThunkFinally",
    "timestamp": 13378,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThrowerFinally",
    "timestamp": 13383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseCatchFinally",
    "timestamp": 13388,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseThenFinally",
    "timestamp": 13392,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeFinally",
    "timestamp": 13397,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRace",
    "timestamp": 13402,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseFulfillReactionJob",
    "timestamp": 13407,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseRejectReactionJob",
    "timestamp": 13411,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveTrampoline",
    "timestamp": 13416,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolve",
    "timestamp": 13425,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ResolvePromise",
    "timestamp": 13429,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromisePrototypeThen",
    "timestamp": 13433,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PromiseResolveThenableJob",
    "timestamp": 13438,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyConstructor",
    "timestamp": 13443,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyDeleteProperty",
    "timestamp": 13448,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetProperty",
    "timestamp": 13452,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyGetPrototypeOf",
    "timestamp": 13457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyHasProperty",
    "timestamp": 13462,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyIsExtensible",
    "timestamp": 13467,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyPreventExtensions",
    "timestamp": 13471,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevocable",
    "timestamp": 13477,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxyRevoke",
    "timestamp": 13481,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetProperty",
    "timestamp": 13486,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ProxySetPrototypeOf",
    "timestamp": 13490,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectIsExtensible",
    "timestamp": 13495,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectPreventExtensions",
    "timestamp": 13500,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGetPrototypeOf",
    "timestamp": 13505,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectSetPrototypeOf",
    "timestamp": 13510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectGet",
    "timestamp": 13515,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectDeleteProperty",
    "timestamp": 13521,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReflectHas",
    "timestamp": 13526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExecSlow",
    "timestamp": 13530,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeExec",
    "timestamp": 13535,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatchAll",
    "timestamp": 13540,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpStringIteratorPrototypeNext",
    "timestamp": 13545,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpMatchFast",
    "timestamp": 13550,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMatch",
    "timestamp": 13554,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpReplace",
    "timestamp": 13559,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeReplace",
    "timestamp": 13564,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSearchFast",
    "timestamp": 13569,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSearch",
    "timestamp": 13574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSourceGetter",
    "timestamp": 13578,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpSplit",
    "timestamp": 13584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeSplit",
    "timestamp": 13588,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTest",
    "timestamp": 13593,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeTestFast",
    "timestamp": 13598,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeGlobalGetter",
    "timestamp": 13603,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeIgnoreCaseGetter",
    "timestamp": 13608,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeMultilineGetter",
    "timestamp": 13614,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeHasIndicesGetter",
    "timestamp": 13619,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeLinearGetter",
    "timestamp": 13624,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeDotAllGetter",
    "timestamp": 13629,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeStickyGetter",
    "timestamp": 13634,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeUnicodeGetter",
    "timestamp": 13639,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RegExpPrototypeFlagsGetter",
    "timestamp": 13645,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeAt",
    "timestamp": 13650,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeEndsWith",
    "timestamp": 13654,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateHTML",
    "timestamp": 13659,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeAnchor",
    "timestamp": 13664,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBig",
    "timestamp": 13669,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBlink",
    "timestamp": 13674,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeBold",
    "timestamp": 13679,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontcolor",
    "timestamp": 13684,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFontsize",
    "timestamp": 13689,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeFixed",
    "timestamp": 13694,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeItalics",
    "timestamp": 13699,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeLink",
    "timestamp": 13704,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSmall",
    "timestamp": 13709,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStrike",
    "timestamp": 13714,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSub",
    "timestamp": 13718,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSup",
    "timestamp": 13724,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIncludes",
    "timestamp": 13732,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIndexOf",
    "timestamp": 13736,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeIterator",
    "timestamp": 13742,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIteratorPrototypeNext",
    "timestamp": 13747,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeMatch",
    "timestamp": 13753,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSearch",
    "timestamp": 13758,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadStart",
    "timestamp": 13764,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypePadEnd",
    "timestamp": 13769,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringRepeat",
    "timestamp": 13775,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeRepeat",
    "timestamp": 13780,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeReplaceAll",
    "timestamp": 13785,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSlice",
    "timestamp": 13791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeStartsWith",
    "timestamp": 13796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstr",
    "timestamp": 13801,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeSubstring",
    "timestamp": 13806,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrim",
    "timestamp": 13811,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimStart",
    "timestamp": 13816,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeTrimEnd",
    "timestamp": 13820,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeDescriptionGetter",
    "timestamp": 13825,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToPrimitive",
    "timestamp": 13831,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeToString",
    "timestamp": 13836,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SymbolPrototypeValueOf",
    "timestamp": 13841,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeAt",
    "timestamp": 13845,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CreateTypedArray",
    "timestamp": 13850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEvery",
    "timestamp": 13855,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeEntries",
    "timestamp": 13860,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFilter",
    "timestamp": 13864,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFind",
    "timestamp": 13869,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFindIndex",
    "timestamp": 13875,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFindLast",
    "timestamp": 13880,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeFindLastIndex",
    "timestamp": 13885,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeForEach",
    "timestamp": 13890,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayFrom",
    "timestamp": 13895,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeKeys",
    "timestamp": 13899,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayOf",
    "timestamp": 13905,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduce",
    "timestamp": 13909,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeReduceRight",
    "timestamp": 13914,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSet",
    "timestamp": 13919,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSlice",
    "timestamp": 13924,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSome",
    "timestamp": 13929,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayMergeSort",
    "timestamp": 13935,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSort",
    "timestamp": 13940,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeSubArray",
    "timestamp": 13945,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TypedArrayPrototypeValues",
    "timestamp": 13950,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefConstructor",
    "timestamp": 13955,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WeakRefDeref",
    "timestamp": 13960,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewSloppyArgumentsElements",
    "timestamp": 13964,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewStrictArgumentsElements",
    "timestamp": 13969,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewRestArgumentsElements",
    "timestamp": 13974,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewSloppyArguments",
    "timestamp": 13980,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewStrictArguments",
    "timestamp": 13985,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "FastNewRestArguments",
    "timestamp": 13990,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringSlowFlatten",
    "timestamp": 13995,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringIndexOf",
    "timestamp": 14000,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestTurbofanType",
    "timestamp": 14006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CheckTurbofanType",
    "timestamp": 14011,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest_JSAny_0",
    "timestamp": 14015,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus1",
    "timestamp": 14020,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TestHelperPlus2",
    "timestamp": 14025,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NewSmiBox",
    "timestamp": 14030,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ReturnTwoValues",
    "timestamp": 14034,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastSmiElements_0",
    "timestamp": 14043,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastObjectElements_0",
    "timestamp": 14048,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_FastDoubleElements_0",
    "timestamp": 14052,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastSmiElements_0",
    "timestamp": 14057,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastObjectElements_0",
    "timestamp": 14063,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_FastDoubleElements_0",
    "timestamp": 14068,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastSmiElements_0",
    "timestamp": 14073,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastObjectElements_0",
    "timestamp": 14078,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_FastDoubleElements_0",
    "timestamp": 14083,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareDefault",
    "timestamp": 14088,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SortCompareUserFn",
    "timestamp": 14093,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_GenericElementsAccessor_0",
    "timestamp": 14097,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Copy",
    "timestamp": 14103,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "MergeAt",
    "timestamp": 14107,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopLeft",
    "timestamp": 14112,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GallopRight",
    "timestamp": 14116,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayTimSort",
    "timestamp": 14121,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ArrayPrototypeSort",
    "timestamp": 14125,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringFastLocaleCompare",
    "timestamp": 14131,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmInt32ToHeapNumber",
    "timestamp": 14137,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmFuncRefToJS",
    "timestamp": 14142,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTaggedNonSmiToInt32",
    "timestamp": 14146,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTaggedToFloat64",
    "timestamp": 14151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmMemoryGrow",
    "timestamp": 14156,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableInit",
    "timestamp": 14161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableCopy",
    "timestamp": 14166,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableFill",
    "timestamp": 14170,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableGrow",
    "timestamp": 14175,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableGet",
    "timestamp": 14180,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTableSet",
    "timestamp": 14184,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRefFunc",
    "timestamp": 14189,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateFixedArray",
    "timestamp": 14194,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmThrow",
    "timestamp": 14199,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRethrow",
    "timestamp": 14203,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmRethrowExplicitContext",
    "timestamp": 14212,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTriggerTierUp",
    "timestamp": 14220,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackGuard",
    "timestamp": 14226,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmStackOverflow",
    "timestamp": 14231,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTraceMemory",
    "timestamp": 14237,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTraceEnter",
    "timestamp": 14242,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTraceExit",
    "timestamp": 14248,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateJSArray",
    "timestamp": 14253,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateStructWithRtt",
    "timestamp": 14259,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateArray_Uninitialized",
    "timestamp": 14267,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateArray_InitZero",
    "timestamp": 14274,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateArray_InitNull",
    "timestamp": 14280,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmArrayInitFromData",
    "timestamp": 14286,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmArrayCopyWithChecks",
    "timestamp": 14293,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmArrayCopy",
    "timestamp": 14298,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAllocateObjectWrapper",
    "timestamp": 14304,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmSubtypeCheck",
    "timestamp": 14310,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmInt32ToNumber",
    "timestamp": 14316,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmUint32ToNumber",
    "timestamp": 14321,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "UintPtr53ToNumber",
    "timestamp": 14327,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmAtomicNotify",
    "timestamp": 14332,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI32AtomicWait64",
    "timestamp": 14357,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmI64AtomicWait64",
    "timestamp": 14363,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CallRefIC",
    "timestamp": 14367,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmGetOwnProperty",
    "timestamp": 14372,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "WasmTrap",
    "timestamp": 14377,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnreachable",
    "timestamp": 14383,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapMemOutOfBounds",
    "timestamp": 14387,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapUnalignedAccess",
    "timestamp": 14393,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivByZero",
    "timestamp": 14398,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDivUnrepresentable",
    "timestamp": 14403,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapRemByZero",
    "timestamp": 14411,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFloatUnrepresentable",
    "timestamp": 14416,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapFuncSigMismatch",
    "timestamp": 14422,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapDataSegmentOutOfBounds",
    "timestamp": 14427,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapElemSegmentDropped",
    "timestamp": 14432,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapTableOutOfBounds",
    "timestamp": 14437,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapRethrowNull",
    "timestamp": 14442,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapNullDereference",
    "timestamp": 14447,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapIllegalCast",
    "timestamp": 14452,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapArrayOutOfBounds",
    "timestamp": 14457,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ThrowWasmTrapArrayTooLarge",
    "timestamp": 14463,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinElement_GenericElementsAccessor_0",
    "timestamp": 14468,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int32Elements_0",
    "timestamp": 14473,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Float32Elements_0",
    "timestamp": 14478,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Float64Elements_0",
    "timestamp": 14483,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint8ClampedElements_0",
    "timestamp": 14488,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_BigUint64Elements_0",
    "timestamp": 14494,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_BigInt64Elements_0",
    "timestamp": 14500,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint8Elements_0",
    "timestamp": 14505,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int8Elements_0",
    "timestamp": 14510,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint16Elements_0",
    "timestamp": 14516,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Int16Elements_0",
    "timestamp": 14521,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadJoinTypedElement_Uint32Elements_0",
    "timestamp": 14526,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "GenericBuiltinTest_Smi_0",
    "timestamp": 14531,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastDoubleElements_0",
    "timestamp": 14537,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastSmiElements_0",
    "timestamp": 14541,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CanUseSameAccessor_FastObjectElements_0",
    "timestamp": 14547,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Load_GenericElementsAccessor_0",
    "timestamp": 14552,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Store_GenericElementsAccessor_0",
    "timestamp": 14558,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Delete_GenericElementsAccessor_0",
    "timestamp": 14563,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int32Elements_0",
    "timestamp": 14568,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int32Elements_0",
    "timestamp": 14574,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int32Elements_0",
    "timestamp": 14579,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Float32Elements_0",
    "timestamp": 14584,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Float32Elements_0",
    "timestamp": 14590,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Float32Elements_0",
    "timestamp": 14596,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Float64Elements_0",
    "timestamp": 14601,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Float64Elements_0",
    "timestamp": 14606,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Float64Elements_0",
    "timestamp": 14612,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint8ClampedElements_0",
    "timestamp": 14617,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint8ClampedElements_0",
    "timestamp": 14622,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint8ClampedElements_0",
    "timestamp": 14627,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_BigUint64Elements_0",
    "timestamp": 14633,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_BigUint64Elements_0",
    "timestamp": 14638,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_BigUint64Elements_0",
    "timestamp": 14643,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_BigInt64Elements_0",
    "timestamp": 14649,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_BigInt64Elements_0",
    "timestamp": 14654,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_BigInt64Elements_0",
    "timestamp": 14659,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint8Elements_0",
    "timestamp": 14665,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint8Elements_0",
    "timestamp": 14670,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint8Elements_0",
    "timestamp": 14676,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int8Elements_0",
    "timestamp": 14686,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int8Elements_0",
    "timestamp": 14691,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int8Elements_0",
    "timestamp": 14696,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint16Elements_0",
    "timestamp": 14701,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint16Elements_0",
    "timestamp": 14707,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint16Elements_0",
    "timestamp": 14712,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Int16Elements_0",
    "timestamp": 14718,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Int16Elements_0",
    "timestamp": 14723,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Int16Elements_0",
    "timestamp": 14729,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LoadTypedElement_Uint32Elements_0",
    "timestamp": 14734,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementNumeric_Uint32Elements_0",
    "timestamp": 14739,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StoreTypedElementJSAny_Uint32Elements_0",
    "timestamp": 14745,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorConstructor",
    "timestamp": 14750,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorInternalCompare",
    "timestamp": 14755,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeCompare",
    "timestamp": 14760,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorSupportedLocalesOf",
    "timestamp": 14765,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "CollatorPrototypeResolvedOptions",
    "timestamp": 14770,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleDateString",
    "timestamp": 14776,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleString",
    "timestamp": 14781,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DatePrototypeToLocaleTimeString",
    "timestamp": 14786,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatConstructor",
    "timestamp": 14791,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatInternalFormat",
    "timestamp": 14796,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormat",
    "timestamp": 14801,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRange",
    "timestamp": 14806,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatRangeToParts",
    "timestamp": 14812,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeFormatToParts",
    "timestamp": 14818,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatPrototypeResolvedOptions",
    "timestamp": 14823,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DateTimeFormatSupportedLocalesOf",
    "timestamp": 14828,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesConstructor",
    "timestamp": 14834,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesPrototypeOf",
    "timestamp": 14838,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesPrototypeResolvedOptions",
    "timestamp": 14845,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "DisplayNamesSupportedLocalesOf",
    "timestamp": 14850,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IntlGetCanonicalLocales",
    "timestamp": 14856,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "IntlSupportedValuesOf",
    "timestamp": 14861,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatConstructor",
    "timestamp": 14866,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormat",
    "timestamp": 14872,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeFormatToParts",
    "timestamp": 14878,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatPrototypeResolvedOptions",
    "timestamp": 14883,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "ListFormatSupportedLocalesOf",
    "timestamp": 14888,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocaleConstructor",
    "timestamp": 14893,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeBaseName",
    "timestamp": 14898,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCalendar",
    "timestamp": 14903,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCalendars",
    "timestamp": 14908,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCaseFirst",
    "timestamp": 14914,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCollation",
    "timestamp": 14918,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeCollations",
    "timestamp": 14923,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeHourCycle",
    "timestamp": 14928,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeHourCycles",
    "timestamp": 14934,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeLanguage",
    "timestamp": 14938,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMaximize",
    "timestamp": 14943,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeMinimize",
    "timestamp": 14948,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumeric",
    "timestamp": 14953,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumberingSystem",
    "timestamp": 14958,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeNumberingSystems",
    "timestamp": 14963,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeRegion",
    "timestamp": 14968,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeScript",
    "timestamp": 14973,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeTextInfo",
    "timestamp": 14982,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeTimeZones",
    "timestamp": 14986,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeToString",
    "timestamp": 14991,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "LocalePrototypeWeekInfo",
    "timestamp": 14996,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatConstructor",
    "timestamp": 15001,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatInternalFormatNumber",
    "timestamp": 15006,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatNumber",
    "timestamp": 15011,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatRange",
    "timestamp": 15017,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatRangeToParts",
    "timestamp": 15021,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeFormatToParts",
    "timestamp": 15027,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatPrototypeResolvedOptions",
    "timestamp": 15033,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "NumberFormatSupportedLocalesOf",
    "timestamp": 15039,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesConstructor",
    "timestamp": 15044,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeResolvedOptions",
    "timestamp": 15049,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeSelect",
    "timestamp": 15054,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesPrototypeSelectRange",
    "timestamp": 15059,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "PluralRulesSupportedLocalesOf",
    "timestamp": 15064,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatConstructor",
    "timestamp": 15070,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormat",
    "timestamp": 15075,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeFormatToParts",
    "timestamp": 15080,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatPrototypeResolvedOptions",
    "timestamp": 15086,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "RelativeTimeFormatSupportedLocalesOf",
    "timestamp": 15091,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterConstructor",
    "timestamp": 15096,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeResolvedOptions",
    "timestamp": 15101,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterPrototypeSegment",
    "timestamp": 15106,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmenterSupportedLocalesOf",
    "timestamp": 15111,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentIteratorPrototypeNext",
    "timestamp": 15116,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentsPrototypeContaining",
    "timestamp": 15122,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "SegmentsPrototypeIterator",
    "timestamp": 15127,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeNormalizeIntl",
    "timestamp": 15131,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleLowerCase",
    "timestamp": 15136,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLocaleUpperCase",
    "timestamp": 15141,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToLowerCaseIntl",
    "timestamp": 15146,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringPrototypeToUpperCaseIntl",
    "timestamp": 15151,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "StringToLowerCaseIntl",
    "timestamp": 15156,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeEra",
    "timestamp": 15161,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalCalendarPrototypeEraYear",
    "timestamp": 15166,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalDurationPrototypeToLocaleString",
    "timestamp": 15172,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalInstantPrototypeToLocaleString",
    "timestamp": 15178,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeEra",
    "timestamp": 15182,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeEraYear",
    "timestamp": 15187,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDatePrototypeToLocaleString",
    "timestamp": 15193,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeEra",
    "timestamp": 15198,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeEraYear",
    "timestamp": 15203,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainDateTimePrototypeToLocaleString",
    "timestamp": 15208,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainMonthDayPrototypeToLocaleString",
    "timestamp": 15214,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainTimePrototypeToLocaleString",
    "timestamp": 15219,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeEra",
    "timestamp": 15224,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeEraYear",
    "timestamp": 15230,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalPlainYearMonthPrototypeToLocaleString",
    "timestamp": 15235,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEra",
    "timestamp": 15241,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeEraYear",
    "timestamp": 15246,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "TemporalZonedDateTimePrototypeToLocaleString",
    "timestamp": 15251,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorConstructor",
    "timestamp": 15257,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalAdoptText",
    "timestamp": 15266,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalBreakType",
    "timestamp": 15278,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalCurrent",
    "timestamp": 15284,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalFirst",
    "timestamp": 15290,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorInternalNext",
    "timestamp": 15313,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeAdoptText",
    "timestamp": 15319,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeBreakType",
    "timestamp": 15324,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeCurrent",
    "timestamp": 15329,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeFirst",
    "timestamp": 15334,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeNext",
    "timestamp": 15339,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorPrototypeResolvedOptions",
    "timestamp": 15344,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "V8BreakIteratorSupportedLocalesOf",
    "timestamp": 15349,
    "type": "CODE",
    "kind": "Builtin"
  },
  {
    "name": "Wide",
    "timestamp": 15355,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExtraWide",
    "timestamp": 15360,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakWide",
    "timestamp": 15365,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreakExtraWide",
    "timestamp": 15370,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak0",
    "timestamp": 15375,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1",
    "timestamp": 15380,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2",
    "timestamp": 15386,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3",
    "timestamp": 15391,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4",
    "timestamp": 15396,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5",
    "timestamp": 15401,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6",
    "timestamp": 15405,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar",
    "timestamp": 15411,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaZero",
    "timestamp": 15416,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi",
    "timestamp": 15420,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaUndefined",
    "timestamp": 15425,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaNull",
    "timestamp": 15429,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTheHole",
    "timestamp": 15434,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaTrue",
    "timestamp": 15439,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaFalse",
    "timestamp": 15443,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant",
    "timestamp": 15448,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot",
    "timestamp": 15453,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot",
    "timestamp": 15458,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot",
    "timestamp": 15463,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot",
    "timestamp": 15469,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star",
    "timestamp": 15474,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov",
    "timestamp": 15479,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext",
    "timestamp": 15484,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext",
    "timestamp": 15488,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual",
    "timestamp": 15493,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndetectable",
    "timestamp": 15498,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestNull",
    "timestamp": 15503,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestUndefined",
    "timestamp": 15507,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestTypeOf",
    "timestamp": 15512,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal",
    "timestamp": 15517,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof",
    "timestamp": 15522,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal",
    "timestamp": 15527,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot",
    "timestamp": 15532,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot",
    "timestamp": 15537,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot",
    "timestamp": 15542,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot",
    "timestamp": 15548,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot",
    "timestamp": 15552,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof",
    "timestamp": 15558,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof",
    "timestamp": 15563,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof",
    "timestamp": 15568,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot",
    "timestamp": 15573,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedProperty",
    "timestamp": 15578,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedPropertyFromSuper",
    "timestamp": 15583,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetKeyedProperty",
    "timestamp": 15592,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable",
    "timestamp": 15597,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable",
    "timestamp": 15603,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetNamedProperty",
    "timestamp": 15608,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineNamedOwnProperty",
    "timestamp": 15613,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetKeyedProperty",
    "timestamp": 15618,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnProperty",
    "timestamp": 15623,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral",
    "timestamp": 15628,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnPropertyInLiteral",
    "timestamp": 15633,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile",
    "timestamp": 15638,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add",
    "timestamp": 15643,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub",
    "timestamp": 15648,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul",
    "timestamp": 15653,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div",
    "timestamp": 15658,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod",
    "timestamp": 15662,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp",
    "timestamp": 15667,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr",
    "timestamp": 15672,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor",
    "timestamp": 15677,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd",
    "timestamp": 15681,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft",
    "timestamp": 15686,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight",
    "timestamp": 15691,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical",
    "timestamp": 15696,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi",
    "timestamp": 15700,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi",
    "timestamp": 15705,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi",
    "timestamp": 15711,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi",
    "timestamp": 15715,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi",
    "timestamp": 15720,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi",
    "timestamp": 15725,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi",
    "timestamp": 15729,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi",
    "timestamp": 15734,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi",
    "timestamp": 15739,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi",
    "timestamp": 15744,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi",
    "timestamp": 15749,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi",
    "timestamp": 15754,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc",
    "timestamp": 15759,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec",
    "timestamp": 15764,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate",
    "timestamp": 15769,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot",
    "timestamp": 15774,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToBooleanLogicalNot",
    "timestamp": 15779,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LogicalNot",
    "timestamp": 15784,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TypeOf",
    "timestamp": 15788,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict",
    "timestamp": 15793,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy",
    "timestamp": 15799,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor",
    "timestamp": 15804,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver",
    "timestamp": 15809,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty",
    "timestamp": 15814,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0",
    "timestamp": 15819,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1",
    "timestamp": 15824,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2",
    "timestamp": 15828,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver",
    "timestamp": 15833,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0",
    "timestamp": 15838,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1",
    "timestamp": 15843,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2",
    "timestamp": 15849,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread",
    "timestamp": 15854,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime",
    "timestamp": 15859,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair",
    "timestamp": 15864,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime",
    "timestamp": 15869,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic",
    "timestamp": 15874,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct",
    "timestamp": 15879,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread",
    "timestamp": 15883,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual",
    "timestamp": 15889,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict",
    "timestamp": 15894,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan",
    "timestamp": 15902,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan",
    "timestamp": 15907,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual",
    "timestamp": 15912,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual",
    "timestamp": 15918,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf",
    "timestamp": 15924,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn",
    "timestamp": 15929,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName",
    "timestamp": 15936,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber",
    "timestamp": 15941,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric",
    "timestamp": 15946,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject",
    "timestamp": 15951,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToString",
    "timestamp": 15956,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral",
    "timestamp": 15961,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral",
    "timestamp": 15966,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayFromIterable",
    "timestamp": 15970,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral",
    "timestamp": 15975,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral",
    "timestamp": 15981,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyObjectLiteral",
    "timestamp": 15986,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject",
    "timestamp": 15992,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject",
    "timestamp": 15996,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure",
    "timestamp": 16001,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext",
    "timestamp": 16006,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext",
    "timestamp": 16011,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext",
    "timestamp": 16016,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext",
    "timestamp": 16021,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext",
    "timestamp": 16026,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateMappedArguments",
    "timestamp": 16032,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateUnmappedArguments",
    "timestamp": 16037,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRestParameter",
    "timestamp": 16043,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop",
    "timestamp": 16048,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump",
    "timestamp": 16052,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant",
    "timestamp": 16057,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant",
    "timestamp": 16062,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant",
    "timestamp": 16067,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant",
    "timestamp": 16072,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant",
    "timestamp": 16077,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant",
    "timestamp": 16082,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant",
    "timestamp": 16088,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant",
    "timestamp": 16092,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant",
    "timestamp": 16098,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant",
    "timestamp": 16103,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant",
    "timestamp": 16108,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue",
    "timestamp": 16113,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse",
    "timestamp": 16118,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue",
    "timestamp": 16123,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse",
    "timestamp": 16128,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull",
    "timestamp": 16133,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull",
    "timestamp": 16137,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined",
    "timestamp": 16143,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined",
    "timestamp": 16148,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull",
    "timestamp": 16153,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver",
    "timestamp": 16157,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback",
    "timestamp": 16162,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate",
    "timestamp": 16167,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare",
    "timestamp": 16172,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue",
    "timestamp": 16177,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext",
    "timestamp": 16182,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep",
    "timestamp": 16186,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetPendingMessage",
    "timestamp": 16191,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Throw",
    "timestamp": 16196,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ReThrow",
    "timestamp": 16201,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Return",
    "timestamp": 16210,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole",
    "timestamp": 16215,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperNotCalledIfHole",
    "timestamp": 16220,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowSuperAlreadyCalledIfNotHole",
    "timestamp": 16226,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowIfNotSuperConstructor",
    "timestamp": 16231,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState",
    "timestamp": 16237,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator",
    "timestamp": 16242,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator",
    "timestamp": 16246,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator",
    "timestamp": 16251,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Debugger",
    "timestamp": 16256,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter",
    "timestamp": 16261,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort",
    "timestamp": 16265,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star0",
    "timestamp": 16270,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Illegal",
    "timestamp": 16275,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.Wide",
    "timestamp": 16280,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.Wide",
    "timestamp": 16285,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.Wide",
    "timestamp": 16290,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.Wide",
    "timestamp": 16295,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.Wide",
    "timestamp": 16300,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.Wide",
    "timestamp": 16305,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.Wide",
    "timestamp": 16315,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.Wide",
    "timestamp": 16320,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.Wide",
    "timestamp": 16324,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.Wide",
    "timestamp": 16334,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.Wide",
    "timestamp": 16341,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.Wide",
    "timestamp": 16348,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.Wide",
    "timestamp": 16354,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.Wide",
    "timestamp": 16361,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.Wide",
    "timestamp": 16368,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.Wide",
    "timestamp": 16373,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.Wide",
    "timestamp": 16379,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.Wide",
    "timestamp": 16385,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.Wide",
    "timestamp": 16391,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.Wide",
    "timestamp": 16428,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.Wide",
    "timestamp": 16435,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.Wide",
    "timestamp": 16439,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.Wide",
    "timestamp": 16444,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.Wide",
    "timestamp": 16450,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.Wide",
    "timestamp": 16455,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.Wide",
    "timestamp": 16461,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.Wide",
    "timestamp": 16466,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.Wide",
    "timestamp": 16471,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.Wide",
    "timestamp": 16477,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.Wide",
    "timestamp": 16482,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedProperty.Wide",
    "timestamp": 16487,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedPropertyFromSuper.Wide",
    "timestamp": 16492,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetKeyedProperty.Wide",
    "timestamp": 16497,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.Wide",
    "timestamp": 16502,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.Wide",
    "timestamp": 16508,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetNamedProperty.Wide",
    "timestamp": 16513,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineNamedOwnProperty.Wide",
    "timestamp": 16518,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetKeyedProperty.Wide",
    "timestamp": 16523,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnProperty.Wide",
    "timestamp": 16528,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.Wide",
    "timestamp": 16534,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnPropertyInLiteral.Wide",
    "timestamp": 16539,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.Wide",
    "timestamp": 16544,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.Wide",
    "timestamp": 16554,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.Wide",
    "timestamp": 16558,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.Wide",
    "timestamp": 16564,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.Wide",
    "timestamp": 16569,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.Wide",
    "timestamp": 16574,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.Wide",
    "timestamp": 16578,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.Wide",
    "timestamp": 16583,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.Wide",
    "timestamp": 16588,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.Wide",
    "timestamp": 16593,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.Wide",
    "timestamp": 16597,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.Wide",
    "timestamp": 16603,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.Wide",
    "timestamp": 16608,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.Wide",
    "timestamp": 16613,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.Wide",
    "timestamp": 16619,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.Wide",
    "timestamp": 16623,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.Wide",
    "timestamp": 16628,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.Wide",
    "timestamp": 16633,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.Wide",
    "timestamp": 16638,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.Wide",
    "timestamp": 16643,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.Wide",
    "timestamp": 16649,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.Wide",
    "timestamp": 16654,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.Wide",
    "timestamp": 16659,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.Wide",
    "timestamp": 16664,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.Wide",
    "timestamp": 16668,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.Wide",
    "timestamp": 16674,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.Wide",
    "timestamp": 16678,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.Wide",
    "timestamp": 16683,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.Wide",
    "timestamp": 16688,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.Wide",
    "timestamp": 16693,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.Wide",
    "timestamp": 16699,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.Wide",
    "timestamp": 16704,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.Wide",
    "timestamp": 16709,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.Wide",
    "timestamp": 16714,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.Wide",
    "timestamp": 16719,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.Wide",
    "timestamp": 16724,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.Wide",
    "timestamp": 16729,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.Wide",
    "timestamp": 16734,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.Wide",
    "timestamp": 16740,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.Wide",
    "timestamp": 16746,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.Wide",
    "timestamp": 16751,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.Wide",
    "timestamp": 16757,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.Wide",
    "timestamp": 16762,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.Wide",
    "timestamp": 16767,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.Wide",
    "timestamp": 16772,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.Wide",
    "timestamp": 16777,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.Wide",
    "timestamp": 16782,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.Wide",
    "timestamp": 16787,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.Wide",
    "timestamp": 16792,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.Wide",
    "timestamp": 16797,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.Wide",
    "timestamp": 16803,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.Wide",
    "timestamp": 16808,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.Wide",
    "timestamp": 16813,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.Wide",
    "timestamp": 16818,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.Wide",
    "timestamp": 16823,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.Wide",
    "timestamp": 16831,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.Wide",
    "timestamp": 16835,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.Wide",
    "timestamp": 16840,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.Wide",
    "timestamp": 16845,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.Wide",
    "timestamp": 16854,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.Wide",
    "timestamp": 16858,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.Wide",
    "timestamp": 16863,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.Wide",
    "timestamp": 16869,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.Wide",
    "timestamp": 16874,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.Wide",
    "timestamp": 16879,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.Wide",
    "timestamp": 16884,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.Wide",
    "timestamp": 16889,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.Wide",
    "timestamp": 16895,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.Wide",
    "timestamp": 16900,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.Wide",
    "timestamp": 16905,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.Wide",
    "timestamp": 16911,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.Wide",
    "timestamp": 16916,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.Wide",
    "timestamp": 16921,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.Wide",
    "timestamp": 16926,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.Wide",
    "timestamp": 16930,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.Wide",
    "timestamp": 16935,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.Wide",
    "timestamp": 16940,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.Wide",
    "timestamp": 16945,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.Wide",
    "timestamp": 16951,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant.Wide",
    "timestamp": 16956,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.Wide",
    "timestamp": 16961,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.Wide",
    "timestamp": 16967,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.Wide",
    "timestamp": 16972,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.Wide",
    "timestamp": 16977,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.Wide",
    "timestamp": 16983,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.Wide",
    "timestamp": 16988,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.Wide",
    "timestamp": 16993,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.Wide",
    "timestamp": 16998,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.Wide",
    "timestamp": 17003,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.Wide",
    "timestamp": 17008,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.Wide",
    "timestamp": 17013,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.Wide",
    "timestamp": 17018,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.Wide",
    "timestamp": 17023,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull.Wide",
    "timestamp": 17029,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.Wide",
    "timestamp": 17034,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.Wide",
    "timestamp": 17040,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.Wide",
    "timestamp": 17045,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.Wide",
    "timestamp": 17050,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.Wide",
    "timestamp": 17055,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.Wide",
    "timestamp": 17060,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.Wide",
    "timestamp": 17065,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.Wide",
    "timestamp": 17070,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowIfNotSuperConstructor.Wide",
    "timestamp": 17075,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.Wide",
    "timestamp": 17081,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.Wide",
    "timestamp": 17086,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.Wide",
    "timestamp": 17091,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator.Wide",
    "timestamp": 17096,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.Wide",
    "timestamp": 17101,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.Wide",
    "timestamp": 17106,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak1.ExtraWide",
    "timestamp": 17111,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak2.ExtraWide",
    "timestamp": 17117,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak3.ExtraWide",
    "timestamp": 17122,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak4.ExtraWide",
    "timestamp": 17128,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak5.ExtraWide",
    "timestamp": 17133,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DebugBreak6.ExtraWide",
    "timestamp": 17141,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Ldar.ExtraWide",
    "timestamp": 17146,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaSmi.ExtraWide",
    "timestamp": 17151,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaConstant.ExtraWide",
    "timestamp": 17156,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaContextSlot.ExtraWide",
    "timestamp": 17161,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableContextSlot.ExtraWide",
    "timestamp": 17166,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaCurrentContextSlot.ExtraWide",
    "timestamp": 17172,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaImmutableCurrentContextSlot.ExtraWide",
    "timestamp": 17177,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Star.ExtraWide",
    "timestamp": 17183,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mov.ExtraWide",
    "timestamp": 17188,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PushContext.ExtraWide",
    "timestamp": 17193,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "PopContext.ExtraWide",
    "timestamp": 17199,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestReferenceEqual.ExtraWide",
    "timestamp": 17204,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobal.ExtraWide",
    "timestamp": 17211,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaGlobalInsideTypeof.ExtraWide",
    "timestamp": 17218,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaGlobal.ExtraWide",
    "timestamp": 17223,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaContextSlot.ExtraWide",
    "timestamp": 17229,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaCurrentContextSlot.ExtraWide",
    "timestamp": 17236,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlot.ExtraWide",
    "timestamp": 17241,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlot.ExtraWide",
    "timestamp": 17246,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlot.ExtraWide",
    "timestamp": 17252,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupSlotInsideTypeof.ExtraWide",
    "timestamp": 17264,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupContextSlotInsideTypeof.ExtraWide",
    "timestamp": 17270,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaLookupGlobalSlotInsideTypeof.ExtraWide",
    "timestamp": 17275,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaLookupSlot.ExtraWide",
    "timestamp": 17280,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedProperty.ExtraWide",
    "timestamp": 17286,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetNamedPropertyFromSuper.ExtraWide",
    "timestamp": 17291,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetKeyedProperty.ExtraWide",
    "timestamp": 17296,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "LdaModuleVariable.ExtraWide",
    "timestamp": 17302,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaModuleVariable.ExtraWide",
    "timestamp": 17307,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetNamedProperty.ExtraWide",
    "timestamp": 17312,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineNamedOwnProperty.ExtraWide",
    "timestamp": 17317,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SetKeyedProperty.ExtraWide",
    "timestamp": 17322,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnProperty.ExtraWide",
    "timestamp": 17327,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "StaInArrayLiteral.ExtraWide",
    "timestamp": 17333,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DefineKeyedOwnPropertyInLiteral.ExtraWide",
    "timestamp": 17339,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CollectTypeProfile.ExtraWide",
    "timestamp": 17344,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Add.ExtraWide",
    "timestamp": 17349,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Sub.ExtraWide",
    "timestamp": 17354,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mul.ExtraWide",
    "timestamp": 17359,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Div.ExtraWide",
    "timestamp": 17364,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Mod.ExtraWide",
    "timestamp": 17369,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Exp.ExtraWide",
    "timestamp": 17373,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOr.ExtraWide",
    "timestamp": 17378,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXor.ExtraWide",
    "timestamp": 17384,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAnd.ExtraWide",
    "timestamp": 17396,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeft.ExtraWide",
    "timestamp": 17402,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRight.ExtraWide",
    "timestamp": 17409,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogical.ExtraWide",
    "timestamp": 17415,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "AddSmi.ExtraWide",
    "timestamp": 17421,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SubSmi.ExtraWide",
    "timestamp": 17427,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "MulSmi.ExtraWide",
    "timestamp": 17433,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DivSmi.ExtraWide",
    "timestamp": 17442,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ModSmi.ExtraWide",
    "timestamp": 17448,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ExpSmi.ExtraWide",
    "timestamp": 17458,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseOrSmi.ExtraWide",
    "timestamp": 17464,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseXorSmi.ExtraWide",
    "timestamp": 17471,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseAndSmi.ExtraWide",
    "timestamp": 17477,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftLeftSmi.ExtraWide",
    "timestamp": 17484,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightSmi.ExtraWide",
    "timestamp": 17490,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ShiftRightLogicalSmi.ExtraWide",
    "timestamp": 17496,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Inc.ExtraWide",
    "timestamp": 17503,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Dec.ExtraWide",
    "timestamp": 17511,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Negate.ExtraWide",
    "timestamp": 17516,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "BitwiseNot.ExtraWide",
    "timestamp": 17522,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertyStrict.ExtraWide",
    "timestamp": 17529,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "DeletePropertySloppy.ExtraWide",
    "timestamp": 17535,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetSuperConstructor.ExtraWide",
    "timestamp": 17541,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallAnyReceiver.ExtraWide",
    "timestamp": 17548,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty.ExtraWide",
    "timestamp": 17555,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty0.ExtraWide",
    "timestamp": 17561,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty1.ExtraWide",
    "timestamp": 17567,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallProperty2.ExtraWide",
    "timestamp": 17572,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver.ExtraWide",
    "timestamp": 17579,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver0.ExtraWide",
    "timestamp": 17586,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver1.ExtraWide",
    "timestamp": 17592,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallUndefinedReceiver2.ExtraWide",
    "timestamp": 17599,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallWithSpread.ExtraWide",
    "timestamp": 17605,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntime.ExtraWide",
    "timestamp": 17611,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallRuntimeForPair.ExtraWide",
    "timestamp": 17617,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CallJSRuntime.ExtraWide",
    "timestamp": 17624,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "InvokeIntrinsic.ExtraWide",
    "timestamp": 17630,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Construct.ExtraWide",
    "timestamp": 17636,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ConstructWithSpread.ExtraWide",
    "timestamp": 17642,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqual.ExtraWide",
    "timestamp": 17648,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestEqualStrict.ExtraWide",
    "timestamp": 17654,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThan.ExtraWide",
    "timestamp": 17660,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThan.ExtraWide",
    "timestamp": 17667,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestLessThanOrEqual.ExtraWide",
    "timestamp": 17673,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestGreaterThanOrEqual.ExtraWide",
    "timestamp": 17679,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestInstanceOf.ExtraWide",
    "timestamp": 17685,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "TestIn.ExtraWide",
    "timestamp": 17691,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToName.ExtraWide",
    "timestamp": 17697,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumber.ExtraWide",
    "timestamp": 17703,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToNumeric.ExtraWide",
    "timestamp": 17709,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ToObject.ExtraWide",
    "timestamp": 17715,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateRegExpLiteral.ExtraWide",
    "timestamp": 17721,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateArrayLiteral.ExtraWide",
    "timestamp": 17728,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEmptyArrayLiteral.ExtraWide",
    "timestamp": 17734,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateObjectLiteral.ExtraWide",
    "timestamp": 17741,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CloneObject.ExtraWide",
    "timestamp": 17748,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetTemplateObject.ExtraWide",
    "timestamp": 17754,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateClosure.ExtraWide",
    "timestamp": 17761,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateBlockContext.ExtraWide",
    "timestamp": 17767,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateCatchContext.ExtraWide",
    "timestamp": 17774,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateFunctionContext.ExtraWide",
    "timestamp": 17780,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateEvalContext.ExtraWide",
    "timestamp": 17785,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "CreateWithContext.ExtraWide",
    "timestamp": 17795,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpLoop.ExtraWide",
    "timestamp": 17801,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Jump.ExtraWide",
    "timestamp": 17808,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpConstant.ExtraWide",
    "timestamp": 17814,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNullConstant.ExtraWide",
    "timestamp": 17820,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNullConstant.ExtraWide",
    "timestamp": 17826,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedConstant.ExtraWide",
    "timestamp": 17832,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefinedConstant.ExtraWide",
    "timestamp": 17838,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNullConstant.ExtraWide",
    "timestamp": 17845,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrueConstant.ExtraWide",
    "timestamp": 17851,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalseConstant.ExtraWide",
    "timestamp": 17858,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiverConstant.ExtraWide",
    "timestamp": 17864,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrueConstant.ExtraWide",
    "timestamp": 17870,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalseConstant.ExtraWide",
    "timestamp": 17877,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanTrue.ExtraWide",
    "timestamp": 17884,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfToBooleanFalse.ExtraWide",
    "timestamp": 17890,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfTrue.ExtraWide",
    "timestamp": 17896,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfFalse.ExtraWide",
    "timestamp": 17902,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNull.ExtraWide",
    "timestamp": 17909,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotNull.ExtraWide",
    "timestamp": 17915,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefined.ExtraWide",
    "timestamp": 17921,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfNotUndefined.ExtraWide",
    "timestamp": 17927,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfUndefinedOrNull.ExtraWide",
    "timestamp": 17933,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "JumpIfJSReceiver.ExtraWide",
    "timestamp": 17940,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnSmiNoFeedback.ExtraWide",
    "timestamp": 17947,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInEnumerate.ExtraWide",
    "timestamp": 17953,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInPrepare.ExtraWide",
    "timestamp": 17960,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInContinue.ExtraWide",
    "timestamp": 17966,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInNext.ExtraWide",
    "timestamp": 17973,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ForInStep.ExtraWide",
    "timestamp": 17979,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowReferenceErrorIfHole.ExtraWide",
    "timestamp": 17985,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ThrowIfNotSuperConstructor.ExtraWide",
    "timestamp": 17991,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SwitchOnGeneratorState.ExtraWide",
    "timestamp": 17997,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "SuspendGenerator.ExtraWide",
    "timestamp": 18003,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "ResumeGenerator.ExtraWide",
    "timestamp": 18010,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "GetIterator.ExtraWide",
    "timestamp": 18016,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "IncBlockCounter.ExtraWide",
    "timestamp": 18022,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": "Abort.ExtraWide",
    "timestamp": 18028,
    "type": "CODE",
    "kind": "BytecodeHandler"
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 0,
    "tm": 23380,
    "source": {
      "script": 387,
      "start": 0,
      "end": 632,
      "positions": "C0O0C4O632",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 1,
    "tm": 23436,
    "source": {
      "script": 387,
      "start": 0,
      "end": 632,
      "positions": "C0O56C3O56C8O25C13O102C15O102C19O137C22O560C25O560C30O598C35O605C40O622C47O626C51O606C57O631",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:348:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 2,
    "tm": 23696,
    "source": {
      "script": 15,
      "start": 10759,
      "end": 11102,
      "positions": "C0O10768C2O10779C4O10775C9O10795C13O10816C14O10836C19O10849C24O10853C29O10853C35O10994C37O11004C47O11052C60O11010C65O11004C66O11073C71O11073C75O11100",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:315:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 3,
    "tm": 24148,
    "source": {
      "script": 15,
      "start": 9972,
      "end": 10533,
      "positions": "C0O9990C6O10005C12O10034C16O10042C17O10070C22O10078C23O10091C30O10134C37O10165C45O10134C63O10264C70O10264C75O10299C89O10334C103O10291C108O10372C109O10384C124O10414C126O10427C141O10447C152O10466C160O10498C165O10447C170O10521C174O10529",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 4,
    "tm": 24519,
    "source": {
      "script": 388,
      "start": 0,
      "end": 18816,
      "positions": "C0O0C4O18816",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 5,
    "tm": 25184,
    "source": {
      "script": 388,
      "start": 0,
      "end": 18816,
      "positions": "C0O0C226O25C232O43C238O69C244O93C250O127C256O138C262O153C268O182C274O282C280O282C285O222C291O240C297O262C303O347C309O347C314O319C320O452C326O452C331O385C337O404C343O431C349O498C355O498C360O487C366O562C372O562C377O588C382O527C388O611C394O611C398O611C400O18362C407O18383C413O18408C419O18430C425O18452C431O18475C437O18489C443O18507C449O18524C455O18542C461O18572C467O18598C473O18621C479O18651C485O18683C491O18705C497O18732C503O18755C509O18775C515O18798C521O18377C526O18815",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prepareMainThreadExecution node:internal/bootstrap/pre_execution:32:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 6,
    "tm": 25400,
    "source": {
      "script": 388,
      "start": 675,
      "end": 2733,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshRuntimeOptions node:internal/bootstrap/pre_execution:100:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 7,
    "tm": 25441,
    "source": {
      "script": 388,
      "start": 2765,
      "end": 2791,
      "positions": "C0O2772C5O2772C9O2790",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshOptions node:internal/options:39:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 8,
    "tm": 25469,
    "source": {
      "script": 87,
      "start": 902,
      "end": 960,
      "positions": "C0O909C4O920C10O935C14O946C21O959",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "reconnectZeroFillToggle node:internal/buffer:1072:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 9,
    "tm": 25613,
    "source": {
      "script": 31,
      "start": 30717,
      "end": 30757,
      "positions": "C0O30724C5O30735C11O30733C18O30756",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "patchProcessObject node:internal/bootstrap/pre_execution:104:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 10,
    "tm": 26858,
    "source": {
      "script": 388,
      "start": 2820,
      "end": 4882,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:170:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 11,
    "tm": 26940,
    "source": {
      "script": 15,
      "start": 5244,
      "end": 5482,
      "positions": "C0O5269C7O5279C11O5293C15O5330C25O5357C30O5355C37O5391C48O5410C56O5446C61O5391C66O5467C68O5478",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshHrtimeBuffer node:internal/process/per_thread:66:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 12,
    "tm": 27024,
    "source": {
      "script": 36,
      "start": 1412,
      "end": 1852,
      "positions": "C0O1599C7O1626C10O1634C17O1610C25O1608C31O1786C38O1822C41O1830C53O1803C61O1801C68O1851",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionValue node:internal/options:44:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 13,
    "tm": 27547,
    "source": {
      "script": 87,
      "start": 985,
      "end": 1228,
      "positions": "C0O1018C3O1018C7O1063C15O1063C22O1113C30O1135C38O1135C43O1122C47O1113C53O1150C55O1175C60O1181C61O1203C66O1203C74O1218C81O1226",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getCLIOptionsFromBinding node:internal/options:18:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 14,
    "tm": 27585,
    "source": {
      "script": 87,
      "start": 497,
      "end": 598,
      "positions": "C0O504C6O527C11O554C15O539C28O578C32O596",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:path:1091:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 15,
    "tm": 28056,
    "source": {
      "script": 71,
      "start": 33781,
      "end": 34691,
      "positions": "C0O33781C3O33816C6O33847C8O33877C12O33884C16O33897C18O33891C25O33901C27O33945C28O33947C35O33958C42O33964C45O33964C49O33983C57O33983C62O34057C68O34064C73O34081C75O34106C87O34132C92O34154C99O34181C107O34220C109O34216C113O33920C118O33859C121O34436C126O34482C137O34451C143O34568C147O34598C152O34609C156O34624C157O34655C163O34662C174O34687",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateString node:internal/validators:112:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 16,
    "tm": 29872,
    "source": {
      "script": 21,
      "start": 3172,
      "end": 3281,
      "positions": "C0O3190C6O3225C22O3231C27O3225C29O3280",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:path:1082:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 17,
    "tm": 30237,
    "source": {
      "script": 71,
      "start": 33630,
      "end": 33649,
      "positions": "C0O33644C3O33644C8O33644C12O33649",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 18,
    "tm": 30293,
    "source": {
      "script": 129,
      "start": 3341,
      "end": 3425,
      "positions": "C0O3348C7O3362C12O3374C17O3397C22O3397C29O3384C35O3406C39O3423",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeString node:path:66:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 19,
    "tm": 30555,
    "source": {
      "script": 71,
      "start": 2161,
      "end": 4085,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 20,
    "tm": 30610,
    "source": {
      "script": 71,
      "start": 1854,
      "end": 1902,
      "positions": "C0O1865C2O1881C4O1877C7O1900",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeGlobalConsole node:internal/console/constructor:671:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 21,
    "tm": 30723,
    "source": {
      "script": 106,
      "start": 19888,
      "end": 19999,
      "positions": "C0O19908C2O19922C4O19921C11O19939C16O19952C18O19966C20O19965C29O19982C36O19998",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "value node:internal/console/constructor:196:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 22,
    "tm": 31585,
    "source": {
      "script": 106,
      "start": 5597,
      "end": 6177,
      "positions": "C0O5597C15O5618C16O5618C18O5636C19O5636C21O5650C33O5700C38O5771C46O5878C60O5939C65O6010C73O6121C87O5650C93O6176",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "value node:internal/console/constructor:223:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 23,
    "tm": 31689,
    "source": {
      "script": 106,
      "start": 6255,
      "end": 7429,
      "positions": "C17O6311C29O6388C42O6458C45O6428C62O6527C75O6597C78O6567C95O6660C105O6700C108O6700C124O6756C134O6790C137O6786C154O6881C160O6896C170O6930C173O6926C191O6952C197O6970C207O7000C220O7022C226O7040C235O7070C248O7087C254O7107C264O7137C277O7152C283O7192C293O7232C306O7269C310O7289C319O6311C325O7428",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createWriteErrorHandler node:internal/console/constructor:338:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 24,
    "tm": 31753,
    "source": {
      "script": 106,
      "start": 10131,
      "end": 10988,
      "positions": "C0O10131C13O10160C17O10986",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:360:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 25,
    "tm": 31819,
    "source": {
      "script": 12,
      "start": 10335,
      "end": 10352,
      "positions": "C3O10341C7O10347C11O10341C26O10351",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:155:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 26,
    "tm": 32414,
    "source": {
      "script": 388,
      "start": 4916,
      "end": 5141,
      "positions": "C16O4968C21O4968C26O4994C28O5011C36O5041C43O5104C49O5122C56O5011C62O5140",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupTraceCategoryState node:internal/bootstrap/pre_execution:320:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 27,
    "tm": 32480,
    "source": {
      "script": 388,
      "start": 9526,
      "end": 9753,
      "positions": "C0O9568C6O9568C11O9541C16O9640C22O9640C27O9611C32O9682C35O9707C40O9682C45O9752",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toggleTraceCategoryState node:internal/process/per_thread:390:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 28,
    "tm": 32529,
    "source": {
      "script": 36,
      "start": 11159,
      "end": 11456,
      "positions": "C0O11183C4O11212C10O11247C16O11278C21O11322C26O11323C33O11268C39O11347C44O11368C49O11368C55O11387C61O11419C66O11440C71O11440C76O11455",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupPerfHooks node:internal/bootstrap/pre_execution:326:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 29,
    "tm": 32561,
    "source": {
      "script": 388,
      "start": 9778,
      "end": 9898,
      "positions": "C0O9785C6O9785C11O9821C16O9822C20O9845C26O9845C31O9875C36O9876C41O9897",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/performance:202:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 30,
    "tm": 32634,
    "source": {
      "script": 114,
      "start": 4438,
      "end": 4595,
      "positions": "C0O4445C7O4466C10O4478C25O4562C28O4562C35O4445C41O4594",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/utils:25:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 31,
    "tm": 32876,
    "source": {
      "script": 50,
      "start": 525,
      "end": 563,
      "positions": "C0O532C5O545C11O543C18O562",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupInspectorHooks node:internal/bootstrap/pre_execution:331:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 32,
    "tm": 32948,
    "source": {
      "script": 388,
      "start": 9928,
      "end": 10481,
      "positions": "C0O10271C6O10275C11O10300C17O10365C23O10365C28O10335C33O10349C38O10411C44O10411C49O10439C54O10440C61O10480",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 33,
    "tm": 33050,
    "source": {
      "script": 389,
      "start": 0,
      "end": 1972,
      "positions": "C0O0C4O1972",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 34,
    "tm": 33157,
    "source": {
      "script": 389,
      "start": 0,
      "end": 1972,
      "positions": "C0O0C42O19C43O19C45O29C46O29C48O48C54O1930C61O1951C67O1961C73O1945C78O1971",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupWarningHandler node:internal/bootstrap/pre_execution:167:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 35,
    "tm": 33240,
    "source": {
      "script": 388,
      "start": 5171,
      "end": 5368,
      "positions": "C0O5206C6O5206C11O5190C16O5245C24O5249C33O5293C38O5297C45O5314C50O5329C53O5337C61O5337C68O5367",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOptionValue node:internal/options:44:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 13,
    "tm": 33360,
    "source": {
      "script": 87,
      "start": 985,
      "end": 1228,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 20,
    "tm": 33382,
    "source": {
      "script": 71,
      "start": 1854,
      "end": 1902,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeString node:path:66:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 19,
    "tm": 33426,
    "source": {
      "script": 71,
      "start": 2161,
      "end": 4085,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:348:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 2,
    "tm": 33449,
    "source": {
      "script": 15,
      "start": 10759,
      "end": 11102,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addListener node:events:618:58",
    "type": "JS",
    "kind": "Unopt",
    "func": 36,
    "tm": 33551,
    "source": {
      "script": 29,
      "start": 18237,
      "end": 18309,
      "positions": "C0O18258C14O18265C19O18307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_addListener node:events:555:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 37,
    "tm": 34890,
    "source": {
      "script": 29,
      "start": 16167,
      "end": 18039,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkListener node:events:258:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 38,
    "tm": 34937,
    "source": {
      "script": 29,
      "start": 7627,
      "end": 7683,
      "positions": "C0O7642C8O7642C14O7682",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:225:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 39,
    "tm": 34968,
    "source": {
      "script": 21,
      "start": 6835,
      "end": 6951,
      "positions": "C0O6856C6O6893C22O6899C27O6893C29O6950",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emit node:events:475:44",
    "type": "JS",
    "kind": "Unopt",
    "func": 40,
    "tm": 35075,
    "source": {
      "script": 29,
      "start": 13881,
      "end": 16143,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "startListeningIfSignal node:internal/process/signal:22:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 41,
    "tm": 35153,
    "source": {
      "script": 128,
      "start": 429,
      "end": 904,
      "positions": "C0O440C3O444C11O463C14O475C19O475C26O492C32O524C38O533C43O563C50O531C56O589C61O589C67O613C72O613C76O627C78O643C84O673C98O643C103O641C107O721C114O728C118O757C123O757C129O776C131O798C136O798C140O813C148O819C153O813C154O870C159O882C164O882C171O903",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isSignal node:internal/process/signal:17:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 42,
    "tm": 35241,
    "source": {
      "script": 128,
      "start": 255,
      "end": 334,
      "positions": "C0O267C8O303C13O310C17O318C18O332",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupFetch node:internal/bootstrap/pre_execution:178:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 43,
    "tm": 35313,
    "source": {
      "script": 388,
      "start": 5423,
      "end": 6580,
      "positions": "C0O5423C24O5430C29O5442C34O5449C39O5459C49O5492C55O5492C61O5541C62O5548C63O5560C64O5560C66O5864C77O5880C86O5864C91O6156C102O6179C113O6207C124O6247C135O6286C146O6326C154O6156C159O6469C167O6469C172O6443C177O6505C185O6505C190O6536C195O6537C201O6579",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/bootstrap/node:139:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 44,
    "tm": 35408,
    "source": {
      "script": 16,
      "start": 4174,
      "end": 4202,
      "positions": "C0O4179C4O4200",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/bootstrap/node:116:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 45,
    "tm": 36125,
    "source": {
      "script": 16,
      "start": 3560,
      "end": 3824,
      "positions": "C0O3602C14O3602C20O3641C29O3756C35O3778C43O3763C48O3798C49O3809C51O3820",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defineOperation node:internal/util:470:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 46,
    "tm": 36227,
    "source": {
      "script": 22,
      "start": 13023,
      "end": 13178,
      "positions": "C0O13050C5O13079C12O13164C22O13050C28O13177",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyInterface node:internal/bootstrap/pre_execution:201:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 47,
    "tm": 37066,
    "source": {
      "script": 388,
      "start": 5934,
      "end": 6152,
      "positions": "C0O5934C9O5947C14O6013C22O6071C32O6148",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/wasm_web_api:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 48,
    "tm": 37229,
    "source": {
      "script": 390,
      "start": 0,
      "end": 1949,
      "positions": "C0O0C4O1949",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/wasm_web_api:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 49,
    "tm": 37367,
    "source": {
      "script": 390,
      "start": 0,
      "end": 1949,
      "positions": "C0O0C32O25C38O122C44O122C49O148C54O68C60O92C66O161C67O161C69O1903C76O1924C82O1918C87O1948",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupWebCrypto node:internal/bootstrap/pre_execution:228:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 50,
    "tm": 37523,
    "source": {
      "script": 388,
      "start": 6709,
      "end": 7511,
      "positions": "C0O6709C8O6716C13O6728C18O6735C23O6745C33O6779C39O6779C45O6836C46O6843C47O6855C48O6855C50O6868C61O6889C71O6934C102O6934C108O6868C113O7205C121O7209C126O7234C132O7253C146O7267C150O7263C152O7309C163O7325C172O7357C177O7309C182O7370C193O7386C202O7421C207O7370C212O7437C223O7453C232O7491C237O7437C243O7510",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupDebugEnv node:internal/bootstrap/pre_execution:292:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 51,
    "tm": 37597,
    "source": {
      "script": 388,
      "start": 8776,
      "end": 8986,
      "positions": "C0O8783C6O8783C11O8816C19O8844C24O8848C29O8817C34O8863C42O8867C48O8911C54O8911C59O8948C64O8961C69O8962C74O8985",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDebugEnv node:internal/util/debuglog:22:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 52,
    "tm": 37700,
    "source": {
      "script": 28,
      "start": 546,
      "end": 991,
      "positions": "C0O561C7O574C14O572C20O596C31O709C44O709C51O753C62O754C69O782C80O783C88O833C100O848C116O833C121O833C123O871C132O883C144O959C151O971C158O990",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:271:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 53,
    "tm": 37938,
    "source": {
      "script": 388,
      "start": 8341,
      "end": 8527,
      "positions": "C0O8348C8O8353C14O8393C15O8400C16O8434C22O8434C27O8415C32O8484C38O8517C43O8517C48O8526",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReport node:internal/bootstrap/pre_execution:281:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 54,
    "tm": 37992,
    "source": {
      "script": 388,
      "start": 8554,
      "end": 8752,
      "positions": "C0O8554C8O8580C16O8580C21O8569C27O8618C42O8639C47O8710C55O8618C61O8751",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/report:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 55,
    "tm": 38175,
    "source": {
      "script": 391,
      "start": 0,
      "end": 2545,
      "positions": "C0O0C4O2545",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/report:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 56,
    "tm": 38454,
    "source": {
      "script": 391,
      "start": 0,
      "end": 2545,
      "positions": "C0O0C48O42C51O42C56O68C61O24C67O165C70O165C75O86C81O105C87O123C93O145C99O208C102O208C106O208C108O245C114O288C119O292C127O678C281O2494C288O2515C294O2535C300O2509C305O2544",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeReportSignalHandlers node:internal/bootstrap/pre_execution:300:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 57,
    "tm": 38699,
    "source": {
      "script": 388,
      "start": 9087,
      "end": 9183,
      "positions": "C0O9123C6O9123C11O9102C16O9162C20O9182",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addSignalHandler node:internal/process/report:98:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 58,
    "tm": 38764,
    "source": {
      "script": 391,
      "start": 2144,
      "end": 2290,
      "positions": "C0O2154C5O2161C10O2161C16O2191C22O2226C27O2235C32O2235C38O2253C41O2261C49O2261C56O2289",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:306:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 59,
    "tm": 38823,
    "source": {
      "script": 388,
      "start": 9230,
      "end": 9492,
      "positions": "C0O9230C8O9252C18O9252C23O9296C25O9313C26O9320C27O9324C35O9324C40O9354C45O9355C50O9415C58O9415C63O9393C69O9433C74O9441C79O9444C84O9441C91O9491",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:436:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 60,
    "tm": 38897,
    "source": {
      "script": 388,
      "start": 13244,
      "end": 13773,
      "positions": "C0O13251C3O13263C8O13267C14O13305C20O13305C25O13349C33O13372C38O13376C46O13349C52O13402C53O13412C57O13402C61O13493C64O13508C73O13566C76O13574C81O13578C90O13625C93O13640C102O13682C108O13682C113O13706C118O13707C124O13746C127O13761C132O13746C137O13772",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializePolicy node:internal/bootstrap/pre_execution:464:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 61,
    "tm": 39043,
    "source": {
      "script": 388,
      "start": 14072,
      "end": 15870,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeClusterIPC node:internal/bootstrap/pre_execution:455:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 62,
    "tm": 39128,
    "source": {
      "script": 388,
      "start": 13804,
      "end": 14045,
      "positions": "C0O13811C3O13823C10O13827C18O13842C23O13846C29O13884C35O13884C40O13916C45O13916C49O14005C52O14020C62O14044",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:559:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 63,
    "tm": 39177,
    "source": {
      "script": 388,
      "start": 17603,
      "end": 17752,
      "positions": "C0O17647C6O17647C11O17618C16O17698C21O17727C26O17751",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 64,
    "tm": 39473,
    "source": {
      "script": 392,
      "start": 0,
      "end": 7630,
      "positions": "C0O0C4O7630",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 65,
    "tm": 39841,
    "source": {
      "script": 392,
      "start": 0,
      "end": 7630,
      "positions": "C0O0C152O25C158O46C164O59C170O75C176O89C182O123C188O156C194O179C199O190C205O214C211O526C217O526C222O515C228O557C234O557C239O590C252O591C258O557C260O653C266O653C270O653C272O695C278O695C283O676C289O752C295O752C300O732C305O832C311O832C316O806C322O901C328O901C333O881C339O1137C341O1137C346O1137C348O1264C350O1264C355O1264C357O1325C363O1325C368O1287C374O1302C380O1317C386O1354C387O1354C389O1370C390O1370C392O7494C399O7515C405O7532C411O7556C417O7580C423O7603C429O7509C434O7629",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 66,
    "tm": 39970,
    "source": {
      "script": 28,
      "start": 2232,
      "end": 3219,
      "positions": "C0O2232C28O2357C32O2357C34O2759C35O2759C37O2781C41O2781C43O2869C48O3068C58O3089C63O3114C74O3068C79O3203C81O3217",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 67,
    "tm": 40109,
    "source": {
      "script": 393,
      "start": 0,
      "end": 1958,
      "positions": "C0O0C4O1958",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 68,
    "tm": 40204,
    "source": {
      "script": 393,
      "start": 0,
      "end": 1958,
      "positions": "C0O0C26O25C31O41C37O69C43O80C49O95C55O110C134O1392C168O1904C173O1875C177O1917C184O1938C190O1932C195O1957",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/util/iterable_weak_map:16:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 69,
    "tm": 40217,
    "source": {
      "script": 393,
      "start": 373,
      "end": 1818,
      "positions": "C3O410C10O410C22O441C29O441C41O479C55O479C65O1818",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 70,
    "tm": 40465,
    "source": {
      "script": 394,
      "start": 0,
      "end": 6812,
      "positions": "C0O0C4O6812",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 71,
    "tm": 40732,
    "source": {
      "script": 394,
      "start": 0,
      "end": 6812,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeSet node:internal/per_context/primordials:373:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 72,
    "tm": 40849,
    "source": {
      "script": 12,
      "start": 10662,
      "end": 10679,
      "positions": "C3O10668C7O10674C11O10668C26O10678",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "IterableWeakMap node:internal/util/iterable_weak_map:16:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 73,
    "tm": 40904,
    "source": {
      "script": 393,
      "start": 373,
      "end": 373,
      "positions": "C0O373C15O373",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeWeakMap node:internal/per_context/primordials:366:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 74,
    "tm": 40936,
    "source": {
      "script": 12,
      "start": 10506,
      "end": 10523,
      "positions": "C3O10512C7O10518C11O10512C26O10522",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeFinalizationRegistry node:internal/per_context/primordials:387:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 75,
    "tm": 40968,
    "source": {
      "script": 12,
      "start": 11112,
      "end": 11157,
      "positions": "C3O11132C7O11138C11O11132C26O11156",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeDeprecations node:internal/bootstrap/pre_execution:349:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 76,
    "tm": 41087,
    "source": {
      "script": 388,
      "start": 10707,
      "end": 13206,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeWASI node:internal/bootstrap/pre_execution:513:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 77,
    "tm": 41164,
    "source": {
      "script": 388,
      "start": 15895,
      "end": 16101,
      "positions": "C0O15927C6O15927C11O15910C16O15993C21O15997C29O15997C35O16012C37O16043C43O16043C47O16037C52O16100",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeCJSLoader node:internal/bootstrap/pre_execution:520:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 78,
    "tm": 41209,
    "source": {
      "script": 388,
      "start": 16131,
      "end": 16446,
      "positions": "C0O16156C6O16156C11O16198C16O16203C20O16223C26O16261C31O16268C36O16268C40O16364C51O16385C56O16421C60O16379C65O16445",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 79,
    "tm": 42074,
    "source": {
      "script": 395,
      "start": 0,
      "end": 40512,
      "positions": "C0O0C4O40512",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 80,
    "tm": 43509
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 81,
    "tm": 43793,
    "source": {
      "script": 396,
      "start": 0,
      "end": 983,
      "positions": "C0O0C4O983",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 82,
    "tm": 43863,
    "source": {
      "script": 396,
      "start": 0,
      "end": 983,
      "positions": "C0O0C29O23C34O83C37O83C42O56C48O132C54O132C59O114C65O177C71O177C76O156C82O209C84O209C89O209C91O229C92O229C94O956C101O975C107O971C112O982",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 83,
    "tm": 44011,
    "source": {
      "script": 397,
      "start": 0,
      "end": 2766,
      "positions": "C0O0C4O2766",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 84,
    "tm": 44133,
    "source": {
      "script": 397,
      "start": 0,
      "end": 2766,
      "positions": "C0O0C44O25C50O111C56O111C61O137C66O67C72O167C78O167C83O153C89O258C95O258C100O217C106O323C112O323C117O305C123O381C129O381C134O358C140O413C144O448C148O749C152O789C156O1259C159O1259C164O1259C166O1277C168O1295C172O2411C176O2427C181O2765",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 85,
    "tm": 44500,
    "source": {
      "script": 398,
      "start": 0,
      "end": 18856,
      "positions": "C0O0C4O18856",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 86,
    "tm": 45180,
    "source": {
      "script": 398,
      "start": 0,
      "end": 18856,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/modules/esm/loader:69:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 87,
    "tm": 45207,
    "source": {
      "script": 398,
      "start": 1847,
      "end": 18773,
      "positions": "C3O2086C12O2241C23O2247C38O2421C49O2427C64O2476C74O2570C81O2570C90O2688C95O2775C102O2775C111O2898C122O18773",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 88,
    "tm": 45365,
    "source": {
      "script": 399,
      "start": 0,
      "end": 1444,
      "positions": "C0O0C4O1444",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 89,
    "tm": 45441,
    "source": {
      "script": 399,
      "start": 0,
      "end": 1444,
      "positions": "C0O0C23O33C26O33C30O33C32O109C35O109C40O85C46O159C52O175C57O213C60O213C65O246C78O247C84O213C86O324C89O324C94O350C99O299C105O385C108O385C113O366C123O495C167O1416C169O1431C174O1443",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 90,
    "tm": 45660,
    "source": {
      "script": 400,
      "start": 0,
      "end": 8238,
      "positions": "C0O0C4O8238",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 91,
    "tm": 45977,
    "source": {
      "script": 400,
      "start": 0,
      "end": 8238,
      "positions": "C0O0C88O25C94O47C100O68C106O90C112O112C117O133C123O149C128O173C134O187C139O205C145O230C151O246C157O269C163O290C169O301C175O328C181O352C187O378C193O402C199O470C205O470C210O455C216O534C222O534C227O511C233O596C239O596C244O570C250O660C256O660C260O660C262O712C265O712C267O744C269O744C271O785C272O785C274O815C278O815C280O933C284O933C323O8192C330O8161C335O8210C337O8225C342O8237",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/assert:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 92,
    "tm": 46175,
    "source": {
      "script": 401,
      "start": 0,
      "end": 3624,
      "positions": "C0O0C4O3624",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/assert:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 93,
    "tm": 46336,
    "source": {
      "script": 401,
      "start": 0,
      "end": 3624,
      "positions": "C0O0C46O25C51O49C57O75C63O91C68O107C74O182C77O182C82O163C88O341C91O341C96O367C101O225C107O261C113O298C119O468C121O468C123O659C130O695C136O730C142O781C148O812C154O659C156O1240C159O1264C169O1240C174O1240C176O3557C183O3578C189O3601C195O3572C200O3623",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/assert:43:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 94,
    "tm": 46414,
    "source": {
      "script": 401,
      "start": 1295,
      "end": 1333,
      "positions": "C0O1310C2O1314C4O1310C8O1333",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 95,
    "tm": 47147,
    "source": {
      "script": 402,
      "start": 0,
      "end": 39509,
      "positions": "C0O0C4O39509",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 96,
    "tm": 48604
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 97,
    "tm": 48905,
    "source": {
      "script": 403,
      "start": 0,
      "end": 4193,
      "positions": "C0O0C4O4193",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 98,
    "tm": 49074,
    "source": {
      "script": 403,
      "start": 0,
      "end": 4193,
      "positions": "C0O0C90O24C96O47C101O63C106O79C112O112C118O136C124O154C130O233C133O233C138O201C144O211C150O220C156O277C159O277C164O258C169O330C172O330C177O314C183O454C186O454C191O386C197O408C203O436C209O533C212O533C216O533C218O625C221O625C225O625C227O730C230O730C235O688C241O704C247O802C250O802C255O779C261O784C267O866C270O866C275O892C280O835C286O926C288O939C300O972C306O1012C312O1052C318O1093C322O1124C330O926C335O926C337O4096C344O4117C350O4137C356O4170C362O4111C367O4192",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/fetch_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 99,
    "tm": 49301,
    "source": {
      "script": 404,
      "start": 0,
      "end": 7132,
      "positions": "C0O0C4O7132",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/fetch_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 100,
    "tm": 49567,
    "source": {
      "script": 404,
      "start": 0,
      "end": 7132,
      "positions": "C0O0C107O24C113O57C119O81C124O92C130O119C136O143C142O235C148O235C153O235C158O215C164O358C170O358C175O384C180O264C186O297C192O332C198O408C204O408C209O400C215O445C221O445C226O478C232O478C237O469C243O517C249O517C254O505C260O1093C262O1093C267O1093C269O1383C270O1383C272O1611C273O1611C275O1990C276O1990C278O5259C283O5251C288O5251C290O5272C293O5282C304O5282C310O5309C313O5319C324O5319C330O7082C337O7116C343O7097C348O7131",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 101,
    "tm": 50620,
    "source": {
      "script": 405,
      "start": 0,
      "end": 50464,
      "positions": "C0O0C4O50464",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 102,
    "tm": 52392
  },
  {
    "name": " node:internal/net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 103,
    "tm": 52754,
    "source": {
      "script": 406,
      "start": 0,
      "end": 1749,
      "positions": "C0O0C4O1749",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/net:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 104,
    "tm": 52838,
    "source": {
      "script": 406,
      "start": 0,
      "end": 1749,
      "positions": "C0O0C45O25C50O35C56O58C61O99C64O99C69O116C73O99C75O149C78O149C83O133C89O187C92O187C96O187C98O246C101O316C106O320C119O335C124O360C129O375C142O360C147O360C149O417C152O457C160O483C173O499C183O473C192O521C205O537C218O547C228O511C237O569C250O586C263O597C273O559C282O625C295O643C308O658C321O669C331O615C340O697C353O715C366O730C379O741C389O687C398O769C411O787C424O802C437O813C447O759C456O841C469O859C482O874C495O885C505O831C514O919C527O934C540O947C550O903C556O965C562O457C567O457C569O1633C576O1654C582O1662C588O1672C594O1682C601O1721C611O1648C616O1748",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dtrace:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 105,
    "tm": 53104,
    "source": {
      "script": 407,
      "start": 0,
      "end": 568,
      "positions": "C0O0C4O568",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dtrace:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 106,
    "tm": 53152,
    "source": {
      "script": 407,
      "start": 0,
      "end": 568,
      "positions": "C0O30C3O30C8O322C17O334C25O68C36O109C47O151C58O192C69O234C80O277C91O368C98O389C104O419C110O450C116O480C122O511C128O543C134O383C139O567",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "protoGetter node:net:778:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 107,
    "tm": 53386,
    "source": {
      "script": 405,
      "start": 20298,
      "end": 20438,
      "positions": "C0O20319C8O20347C13O20358C20O20422C27O20319C33O20437",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get BlockList node:net:1868:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 108,
    "tm": 53488,
    "source": {
      "script": 405,
      "start": 50083,
      "end": 50172,
      "positions": "C0O50092C14O50106C19O50135C26O50102C32O50151C36O50168",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/blocklist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 109,
    "tm": 53646,
    "source": {
      "script": 408,
      "start": 0,
      "end": 3877,
      "positions": "C0O0C4O3877",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/blocklist:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 110,
    "tm": 53807,
    "source": {
      "script": 408,
      "start": 0,
      "end": 3877,
      "positions": "C0O0C35O25C41O36C46O60C51O127C54O127C59O106C65O204C68O204C73O190C78O293C81O293C86O241C92O267C98O385C101O385C106O339C111O357C116O367C121O450C124O450C129O438C135O501C138O501C142O501C144O545C147O545C152O528C158O611C161O611C166O637C171O584C177O688C180O688C185O654C191O669C197O745C204O884C241O3223C251O3384C278O3519C301O3691C306O3725C311O3735C315O3713C319O3787C324O3808C329O3748C334O3821C341O3842C347O3855C353O3836C358O3876",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 111,
    "tm": 54030,
    "source": {
      "script": 409,
      "start": 0,
      "end": 3207,
      "positions": "C0O0C4O3207",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 112,
    "tm": 54168,
    "source": {
      "script": 409,
      "start": 0,
      "end": 3207,
      "positions": "C0O0C38O25C43O49C48O143C51O143C56O100C62O118C68O129C74O257C77O257C82O185C88O203C94O221C100O237C106O345C109O345C114O345C119O313C125O419C128O419C133O405C138O466C141O466C146O454C152O557C155O557C160O511C165O529C170O539C175O618C178O618C182O618C184O653C187O653C191O653C193O701C226O2071C236O2313C246O2482C279O2877C302O2988C307O3028C312O3038C316O3010C320O3094C325O3119C330O3051C335O3132C342O3153C348O3170C354O3195C360O3147C365O3206",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "BlockList node:internal/blocklist:40:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 113,
    "tm": 54319,
    "source": {
      "script": 408,
      "start": 775,
      "end": 879,
      "positions": "C3O784C11O784C23O797C28O802C33O817C36O813C41O811C45O840C50O845C52O844C58O854C64O868C71O878",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addAddress node:internal/blocklist:60:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 114,
    "tm": 54383,
    "source": {
      "script": 408,
      "start": 1149,
      "end": 1460,
      "positions": "C14O1182C19O1201C24O1201C31O1235C39O1235C44O1277C52O1277C57O1317C69O1355C75O1372C81O1327C87O1400C89O1405C91O1404C95O1414C102O1433C104O1432C108O1414C114O1459",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isSocketAddress node:internal/socketaddress:43:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 115,
    "tm": 54436,
    "source": {
      "script": 409,
      "start": 742,
      "end": 798,
      "positions": "C0O756C9O771C11O770C18O780C19O794",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SocketAddress node:internal/socketaddress:47:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 116,
    "tm": 54522,
    "source": {
      "script": 409,
      "start": 813,
      "end": 1761,
      "positions": "C7O813C13O834C21O834C33O847C41O847C46O893C58O940C69O958C81O998C89O1014C97O1055C99O1065C106O1082C117O1134C122O1134C127O1153C146O1198C151O1222C153O1256C158O1281C160O1311C168O1369C175O1317C180O1311C181O1389C189O1389C194O1437C202O1437C207O1477C220O1477C225O1537C230O1542C235O1557C252O1553C257O1551C261O1609C266O1614C274O1630C276O1629C280O1639C291O1663C296O1686C301O1711C306O1739C310O1639C315O1623C322O1760",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:148:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 117,
    "tm": 54592,
    "source": {
      "script": 21,
      "start": 4139,
      "end": 4698,
      "positions": "C0O4197C4O4237C9O4273C14O4311C21O4347C26O4383C33O4419C38O4433C46O4480C50O4494C53O4494C67O4569C75O4634C91O4640C96O4634C98O4697",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validatePort node:internal/validators:205:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 118,
    "tm": 54648,
    "source": {
      "script": 21,
      "start": 6169,
      "end": 6527,
      "positions": "C24O6213C44O6310C47O6310C52O6335C58O6343C65O6359C70O6370C72O6376C75O6365C86O6397C92O6421C99O6431C101O6449C117O6455C122O6449C123O6509C125O6521C128O6525",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:97:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 119,
    "tm": 54698,
    "source": {
      "script": 21,
      "start": 2721,
      "end": 3145,
      "positions": "C0O2752C6O2789C22O2795C27O2789C28O2850C33O2855C39O2885C55O2891C60O2885C61O2958C71O3018C74O3035C76O3045C83O3060C88O3073C98O3112C111O3125C124O3079C129O3073C131O3144",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addRange node:internal/blocklist:72:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 120,
    "tm": 54785,
    "source": {
      "script": 408,
      "start": 1472,
      "end": 2142,
      "positions": "C17O1508C22O1527C27O1527C34O1559C42O1559C47O1597C55O1597C60O1637C72O1682C78O1697C84O1645C90O1725C95O1744C100O1744C107O1774C115O1774C120O1808C128O1808C133O1848C145O1891C151O1904C157O1854C163O1944C165O1949C167O1948C171O1958C178O1980C180O1979C186O2013C188O2012C192O1958C199O2041C200O2049C205O2066C221O2072C226O2066C228O2141",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/formats:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 121,
    "tm": 54912,
    "source": {
      "script": 410,
      "start": 0,
      "end": 1190,
      "positions": "C0O0C4O1190",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/formats:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 122,
    "tm": 54986,
    "source": {
      "script": 410,
      "start": 0,
      "end": 1190,
      "positions": "C0O0C24O25C30O90C33O90C38O71C43O153C46O153C50O153C52O228C57O368C61O368C63O504C67O537C73O601C79O565C83O1074C90O1095C96O1117C102O1145C108O1173C114O1089C119O1189",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/initialize_import_meta:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 123,
    "tm": 55119,
    "source": {
      "script": 411,
      "start": 0,
      "end": 1023,
      "positions": "C0O0C4O1023",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/initialize_import_meta:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 124,
    "tm": 55183,
    "source": {
      "script": 411,
      "start": 0,
      "end": 1023,
      "positions": "C0O0C28O42C31O42C36O23C41O111C44O111C48O111C50O175C56O199C62O248C65O248C69O248C71O978C78O999C84O993C89O1022",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 125,
    "tm": 55281,
    "source": {
      "script": 412,
      "start": 0,
      "end": 860,
      "positions": "C0O0C4O860",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 126,
    "tm": 55334,
    "source": {
      "script": 412,
      "start": 0,
      "end": 860,
      "positions": "C0O0C19O44C22O44C27O23C33O117C36O117C41O96C47O192C50O192C55O169C61O823C68O844C74O838C79O859",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 127,
    "tm": 55447,
    "source": {
      "script": 413,
      "start": 0,
      "end": 1869,
      "positions": "C0O0C4O1869",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 128,
    "tm": 55552,
    "source": {
      "script": 413,
      "start": 0,
      "end": 1869,
      "positions": "C0O0C46O25C52O49C58O72C64O136C67O136C72O117C77O189C80O189C85O173C91O302C94O302C103O346C110O302C112O428C115O428C119O428C121O520C124O520C129O520C134O503C140O551C143O551C148O582C153O608C156O608C161O600C167O698C170O698C175O724C180O643C186O662C192O757C196O754C198O793C202O793C204O1824C206O1849C211O1868",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 129,
    "tm": 56184,
    "source": {
      "script": 414,
      "start": 0,
      "end": 24648,
      "positions": "C0O0C4O24648",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 130,
    "tm": 57090
  },
  {
    "name": "<instance_members_initializer> node:internal/fs/promises:125:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 131,
    "tm": 57138,
    "source": {
      "script": 414,
      "start": 2990,
      "end": 7667,
      "positions": "C0O2990C9O4505C18O7667",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 132,
    "tm": 57489,
    "source": {
      "script": 415,
      "start": 0,
      "end": 7453,
      "positions": "C0O0C4O7453",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 133,
    "tm": 57794,
    "source": {
      "script": 415,
      "start": 0,
      "end": 7453,
      "positions": "C0O0C139O368C145O393C151O404C156O450C159O450C164O439C170O480C173O480C177O480C179O642C182O505C188O514C194O527C200O536C206O549C212O560C218O575C224O584C230O597C236O605C242O617C248O627C254O662C257O662C262O654C267O702C270O702C275O687C281O739C284O739C289O729C295O792C302O792C307O792C309O863C316O863C321O863C323O958C330O967C333O950C335O1001C345O1001C347O1060C357O1060C359O1126C361O1126C363O1154C366O1161C371O1161C376O1154C378O7396C385O7415C391O7423C397O7439C403O7411C408O7452",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "from node:buffer:298:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 134,
    "tm": 57979,
    "source": {
      "script": 30,
      "start": 8478,
      "end": 9429,
      "positions": "C3O8516C9O8551C12O8558C17O8594C18O8598C28O8653C33O8657C39O8688C51O8695C56O8744C57O8772C63O8789C68O8789C73O8804C78O8843C95O8934C104O8941C109O8981C110O9003C113O9003C118O9026C120O9039C122O9048C123O9054C125O9071C127O9070C134O9132C136O9138C138O9137C145O9156C151O9174C155O9219C158O9226C163O9266C164O9288C182O9294C187O9288",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromString node:buffer:434:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 135,
    "tm": 59384,
    "source": {
      "script": 30,
      "start": 12529,
      "end": 12963,
      "positions": "C0O12556C2O12563C8O12608C14O12615C19O12639C25O12646C30O12659C35O12666C40O12683C41O12688C46O12706C51O12716C56O12753C59O12759C64O12789C66O12818C73O12824C78O12818C79O12875C85O12882C90O12895C95O12902C100O12919C101O12926C104O12933C109O12961",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fromStringFast node:buffer:415:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 136,
    "tm": 59447,
    "source": {
      "script": 30,
      "start": 11985,
      "end": 12508,
      "positions": "C0O12022C5O12022C11O12045C14O12067C18O12076C21O12056C26O12088C31O12124C36O12095C41O12137C42O12141C44O12155C49O12166C51O12164C54O12152C59O12183C62O12183C65O12207C72O12222C77O12233C85O12207C91O12275C110O12275C116O12306C118O12317C123O12401C130O12420C135O12431C143O12405C149O12458C156O12472C162O12469C168O12482C171O12482C174O12497C176O12506",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FastBuffer node:internal/buffer:958:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 137,
    "tm": 59486,
    "source": {
      "script": 31,
      "start": 26364,
      "end": 26453,
      "positions": "C3O26407C7O26441C20O26407C35O26452",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "write node:buffer:595:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 138,
    "tm": 59514,
    "source": {
      "script": 30,
      "start": 16597,
      "end": 16661,
      "positions": "C0O16631C17O16631C22O16661",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "alignPool node:buffer:161:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 139,
    "tm": 59546,
    "source": {
      "script": 30,
      "start": 4070,
      "end": 4174,
      "positions": "C0O4104C4O4119C9O4132C19O4143C25O4155C34O4165C41O4173",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "promisify node:internal/util:324:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 140,
    "tm": 59649,
    "source": {
      "script": 22,
      "start": 8845,
      "end": 10349,
      "positions": "C0O8845C17O8907C25O8947C33O8971C38O8950C55O9007C68O9007C73O9050C80O9063C82O9062C87O9107C94O9116C96O9115C100O9148C110O9148C115O9200C126O9232C136O9273C143O9207C148O9339C149O9502C156O9511C158O9510C161O9502C163O10066C174O10091C180O10091C185O10066C190O10127C201O10152C211O10191C218O10127C223O10258C234O10301C240O10301C245O10265C250O10347",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitterMixin node:internal/event_target:958:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 141,
    "tm": 59802,
    "source": {
      "script": 46,
      "start": 25327,
      "end": 25749,
      "positions": "C0O25379C23O25563C30O25595C33O25608C38O25563C43O25622C47O25655C52O25696C57O25655C62O25722C64O25747",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 142,
    "tm": 61107,
    "source": {
      "script": 416,
      "start": 0,
      "end": 10778,
      "positions": "C0O0C4O10778",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 143,
    "tm": 61502,
    "source": {
      "script": 416,
      "start": 0,
      "end": 10778,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 144,
    "tm": 61670,
    "source": {
      "script": 417,
      "start": 0,
      "end": 1756,
      "positions": "C0O0C4O1756",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 145,
    "tm": 61760,
    "source": {
      "script": 417,
      "start": 0,
      "end": 1756,
      "positions": "C0O0C39O25C45O47C51O68C57O85C63O101C69O140C72O140C77O173C90O174C96O140C98O642C103O1718C105O1733C110O1755",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/vm/module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 146,
    "tm": 62154,
    "source": {
      "script": 418,
      "start": 0,
      "end": 12270,
      "positions": "C0O0C4O12270",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/vm/module:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 147,
    "tm": 62617,
    "source": {
      "script": 418,
      "start": 0,
      "end": 12270,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "<instance_members_initializer> node:internal/vm/module:255:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 148,
    "tm": 62645,
    "source": {
      "script": 418,
      "start": 6751,
      "end": 10193,
      "positions": "C3O6802C17O6814C22O10193",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ESMLoader node:internal/modules/esm/loader:118:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 149,
    "tm": 62839,
    "source": {
      "script": 398,
      "start": 2925,
      "end": 3502,
      "positions": "C5O2925C23O2934C33O2938C39O2987C49O2987C53O3044C63O3048C69O3106C79O3106C83O3160C93O3164C100O3218C109O3233C113O3276C118O3284C129O3284C135O3451C141O3485C150O3501",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ModuleMap node:internal/modules/esm/module_map:17:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 150,
    "tm": 62913,
    "source": {
      "script": 399,
      "start": 518,
      "end": 535,
      "positions": "C3O524C7O530C11O524C26O534",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "desc.value node:internal/per_context/primordials:334:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 151,
    "tm": 62963,
    "source": {
      "script": 12,
      "start": 9631,
      "end": 9690,
      "positions": "C0O9648C7O9655C12O9678",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeIterator node:internal/per_context/primordials:279:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 152,
    "tm": 62992,
    "source": {
      "script": 12,
      "start": 7920,
      "end": 7980,
      "positions": "C0O7939C3O7956C7O7954C12O7979",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "next node:internal/per_context/primordials:282:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 153,
    "tm": 63024,
    "source": {
      "script": 12,
      "start": 7989,
      "end": 8034,
      "positions": "C0O8000C3O8017C8O8007C12O8028",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "canBeRequiredWithoutScheme node:internal/bootstrap/loaders:253:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 154,
    "tm": 63053,
    "source": {
      "script": 15,
      "start": 7756,
      "end": 7807,
      "positions": "C0O7767C7O7795C12O7795C18O7803",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 155,
    "tm": 63230,
    "source": {
      "script": 22,
      "start": 2408,
      "end": 3584,
      "positions": "C0O2408C26O2428C31O2440C37O2454C42O2470C44O2480C45O2535C53O2573C61O2595C66O2576C83O2631C87O2659C100O2659C105O2705C106O2705C108O3280C121O3280C126O3320C129O3327C135O3520C141O3546C145O3541C149O3564C151O3582",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEmbedderOptions node:internal/options:32:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 156,
    "tm": 63311,
    "source": {
      "script": 87,
      "start": 760,
      "end": 877,
      "positions": "C0O767C6O795C11O813C17O811C23O852C27O875",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._initPaths node:internal/modules/cjs/loader:1233:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 157,
    "tm": 63451,
    "source": {
      "script": 395,
      "start": 38643,
      "end": 39599,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 158,
    "tm": 63623,
    "source": {
      "script": 419,
      "start": 0,
      "end": 2537,
      "positions": "C0O0C4O2537",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 159,
    "tm": 63732,
    "source": {
      "script": 419,
      "start": 0,
      "end": 2537,
      "positions": "C0O0C66O25C72O41C78O101C84O101C89O149C95O157C101O169C107O228C113O228C118O209C124O270C130O270C134O270C136O320C142O320C147O297C153O2469C160O2490C166O2515C172O2484C177O2536",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeESMLoader node:internal/bootstrap/pre_execution:530:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 160,
    "tm": 63827,
    "source": {
      "script": 388,
      "start": 16476,
      "end": 17564,
      "positions": "C0O16558C6O16558C13O16607C16O16603C21O16601C25O16625C30O16629C34O16649C40O16678C41O16685C42O16785C48O16785C53O16701C58O16741C63O16831C69O16831C74O17032C79O16990C83O17102C88O17063C92O17268C100O17272C106O17388C112O17388C117O17337C122O17345C127O17363C132O17434C138O17434C143O17453C145O17463C149O17477C151O17497C155O17521C157O17540C162O17563",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 161,
    "tm": 63871,
    "source": {
      "script": 395,
      "start": 2306,
      "end": 2346,
      "positions": "C0O2311C4O2344",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assert node:internal/assert:11:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 162,
    "tm": 63902,
    "source": {
      "script": 27,
      "start": 172,
      "end": 307,
      "positions": "C0O193C4O242C7O242C11O259C13O265C18O259C20O306",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadPreloadModules node:internal/bootstrap/pre_execution:573:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 163,
    "tm": 63972,
    "source": {
      "script": 388,
      "start": 18040,
      "end": 18360,
      "positions": "C0O18127C8O18127C13O18158C15O18195C21O18202C26O18278C32O18278C37O18278C42O18245C47O18322C52O18359",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._preloadModules node:internal/modules/cjs/loader:1263:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 164,
    "tm": 64031,
    "source": {
      "script": 395,
      "start": 39635,
      "end": 40209,
      "positions": "C0O39650C5O39655C11O39683C12O39690C13O39694C17O39707C23O39902C33O39902C42O39952C45O39974C53O39999C58O39999C63O39974C68O39965C85O40027C88O40033C95O40038C100O40060C106O40073C114O40088C116O40088C119O40122C121O40138C125O40127C130O40162C137O40178C141O40162C146O40147C151O40109C154O40186C158O40199C165O40208",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module node:internal/modules/cjs/loader:172:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 165,
    "tm": 64080,
    "source": {
      "script": 395,
      "start": 5284,
      "end": 5521,
      "positions": "C14O5306C16O5314C20O5322C22O5334C25O5339C30O5339C35O5332C39O5354C40O5367C44O5375C49O5393C54O5393C60O5414C71O5414C76O5453C77O5467C81O5477C82O5489C86O5500C88O5514C93O5520",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dirname node:path:1275:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 166,
    "tm": 64152,
    "source": {
      "script": 71,
      "start": 38741,
      "end": 39410,
      "positions": "C0O38754C8O38754C13O38797C19O38804C24O38817C26O38828C27O38849C34O38849C42O38888C44O38884C48O38922C51O38949C53O38977C57O38984C61O38991C63O38991C68O39010C73O39014C81O39053C83O39049C88O39083C92O39114C97O39133C101O39220C103O38999C108O38959C111O39261C113O39269C118O39283C128O39310C129O39315C135O39334C140O39347C142O39359C143O39364C156O39371C161O39406",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "updateChildren node:internal/modules/cjs/loader:165:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 167,
    "tm": 64203,
    "source": {
      "script": 395,
      "start": 5049,
      "end": 5222,
      "positions": "C0O5092C7O5098C15O5112C19O5130C23O5138C26O5138C33O5184C38O5184C44O5221",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:630:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 168,
    "tm": 64275,
    "source": {
      "script": 395,
      "start": 18824,
      "end": 19955,
      "positions": "C0O18879C5O18891C10O18891C17O19070C19O19079C24O19094C28O19119C29O19334C32O19360C36O19367C40O19376C42O19391C47O19401C48O19401C53O19433C58O19433C64O19475C66O19488C68O19484C73O19518C75O19528C77O19524C82O19545C89O19596C100O19596C108O19632C112O19545C117O19671C120O19689C124O19709C126O19715C131O19733C138O19744C144O19748C149O19770C156O19802C159O19409C164O19342C167O19889C175O19889C180O19938C182O19951",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:630:37",
    "type": "JS",
    "kind": "Baseline",
    "func": 168,
    "tm": 64360,
    "source": {
      "script": 395,
      "start": 18824,
      "end": 19955,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getCLIOptionsFromBinding node:internal/options:18:34",
    "type": "JS",
    "kind": "Baseline",
    "func": 14,
    "tm": 64384,
    "source": {
      "script": 87,
      "start": 497,
      "end": 598,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:315:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 3,
    "tm": 64407,
    "source": {
      "script": 15,
      "start": 9972,
      "end": 10533,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:170:45",
    "type": "JS",
    "kind": "Baseline",
    "func": 11,
    "tm": 64424,
    "source": {
      "script": 15,
      "start": 5244,
      "end": 5482,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:360:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 25,
    "tm": 64439,
    "source": {
      "script": 12,
      "start": 10335,
      "end": 10352,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "next node:internal/per_context/primordials:282:9",
    "type": "JS",
    "kind": "Baseline",
    "func": 153,
    "tm": 64454,
    "source": {
      "script": 12,
      "start": 7989,
      "end": 8034,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "canBeRequiredWithoutScheme node:internal/bootstrap/loaders:253:36",
    "type": "JS",
    "kind": "Baseline",
    "func": 154,
    "tm": 64468,
    "source": {
      "script": 15,
      "start": 7756,
      "end": 7807,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:path:1091:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 15,
    "tm": 64490,
    "source": {
      "script": 71,
      "start": 33781,
      "end": 34691,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.require node:internal/modules/cjs/loader:997:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 169,
    "tm": 64549,
    "source": {
      "script": 395,
      "start": 31191,
      "end": 31482,
      "positions": "C0O31200C8O31200C13O31228C15O31235C20O31249C36O31255C41O31249C42O31364C51O31376C60O31392C63O31406C76O31406C93O31461C102O31473C126O31481",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._load node:internal/modules/cjs/loader:759:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 170,
    "tm": 64680
  },
  {
    "name": "logger node:internal/util/debuglog:95:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 171,
    "tm": 64746,
    "source": {
      "script": 28,
      "start": 2869,
      "end": 3064,
      "positions": "C0O2869C3O2901C24O2925C30O2942C34O2932C38O2947C39O2962C45O2979C51O2988C55O2969C60O2993C61O3009C65O3016C72O3029C77O3025C83O3016C88O3054",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:285:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 172,
    "tm": 64779,
    "source": {
      "script": 12,
      "start": 8055,
      "end": 8084,
      "positions": "C0O8066C2O8078",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debug node:internal/util/debuglog:76:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 173,
    "tm": 64825,
    "source": {
      "script": 28,
      "start": 2357,
      "end": 2751,
      "positions": "C0O2357C3O2376C6O2376C9O2484C16O2505C22O2492C30O2490C36O2524C42O2560C47O2563C50O2560C54O2588C75O2612C81O2629C85O2619C89O2634C90O2649C96O2666C102O2675C106O2656C111O2680C112O2696C116O2703C123O2716C128O2712C134O2703C139O2741",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "init node:internal/util/debuglog:72:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 174,
    "tm": 64857,
    "source": {
      "script": 28,
      "start": 2259,
      "end": 2342,
      "positions": "C0O2268C10O2274C14O2272C16O2311C26O2321C33O2319C40O2341",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "testEnabled node:internal/util/debuglog:32:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 175,
    "tm": 64877,
    "source": {
      "script": 28,
      "start": 973,
      "end": 984,
      "positions": "C0O979C1O984",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglogImpl node:internal/util/debuglog:49:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 176,
    "tm": 64925,
    "source": {
      "script": 28,
      "start": 1451,
      "end": 1995,
      "positions": "C0O1451C9O1470C18O1484C23O1511C34O1544C39O1552C43O1544C45O1563C55O1563C59O1595C71O1606C75O1611C83O1934C97O1952C99O1950C103O1970C112O1987C115O1993",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/loader:273:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 177,
    "tm": 64956,
    "source": {
      "script": 395,
      "start": 7760,
      "end": 7785,
      "positions": "C0O7772C2O7778C9O7784",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 178,
    "tm": 64980,
    "source": {
      "script": 28,
      "start": 1419,
      "end": 1427,
      "positions": "C1O1426",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveFilename node:internal/modules/cjs/loader:853:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 179,
    "tm": 65137
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:246:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 180,
    "tm": 65198,
    "source": {
      "script": 15,
      "start": 7483,
      "end": 7579,
      "positions": "C0O7506C5O7519C10O7523C15O7523C21O7536C23O7554C27O7575",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._resolveLookupPaths node:internal/modules/cjs/loader:668:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 181,
    "tm": 65274,
    "source": {
      "script": 395,
      "start": 19997,
      "end": 21232,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "trySelfParentPath node:internal/modules/cjs/loader:428:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 182,
    "tm": 65333,
    "source": {
      "script": 395,
      "start": 12321,
      "end": 12584,
      "positions": "C0O12334C4O12347C5O12360C6O12375C12O12405C16O12414C17O12435C24O12438C29O12461C36O12464C44O12506C47O12521C52O12521C59O12529C62O12534C66O12527C69O12538C72O12559C73O12572C75O12583",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "trySelf node:internal/modules/cjs/loader:442:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 183,
    "tm": 65402,
    "source": {
      "script": 395,
      "start": 12602,
      "end": 13426,
      "positions": "C0O12628C4O12645C5O12658C6O12699C9O12699C17O12676C22O12687C27O12737C31O12753C37O12776C38O12789C39O12807C47O12826C48O12839C49O12847C51O12880C55O12872C60O12892C65O12918C70O12964C82O12922C89O12980C94O12998C97O13032C102O13037C107O12998C112O12996C118O13061C119O13074C123O13092C128O13121C133O13150C138O13172C142O13150C149O13214C152O13214C159O13241C168O13121C180O13099C185O13278C197O13299C200O13305C207O13310C212O13344C219O13388C223O13350C228O13344C229O13412C231O13412",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:322:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 184,
    "tm": 65458,
    "source": {
      "script": 395,
      "start": 8970,
      "end": 9488,
      "positions": "C0O9013C7O9047C10O9013C16O9059C18O9086C25O9141C28O9103C34O9151C47O9163C54O9219C61O9258C66O9262C70O9223C77O9287C78O9300C79O9319C84O9343C86O9341C90O9319C95O9353C97O9364C104O9385C110O9404C116O9421C117O9448C119O9448C124O9077C127O9473C128O9486",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackage node:internal/modules/cjs/loader:291:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 185,
    "tm": 65535,
    "source": {
      "script": 395,
      "start": 8153,
      "end": 8943,
      "positions": "C0O8188C5O8193C13O8193C20O8251C25O8268C30O8268C36O8285C38O8313C40O8329C41O8348C46O8366C51O8366C57O8404C63O8417C72O8443C77O8453C79O8483C84O8500C91O8500C97O8526C98O8539C102O8572C107O8572C112O8610C117O8631C125O8656C133O8684C141O8715C149O8743C160O8759C165O8776C170O8776C176O8805C178O8821C190O8842C195O8849C199O8865C207O8894C213O8905C220O8916C224O8912C227O8875C231O8929C233O8929",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "read node:internal/modules/package_json_reader:16:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 186,
    "tm": 65617,
    "source": {
      "script": 396,
      "start": 292,
      "end": 954,
      "positions": "C0O307C5O317C10O317C17O338C22O351C27O351C32O365C33O412C40O440C43O440C48O412C53O384C59O395C66O489C73O491C79O499C86O544C92O544C97O525C102O575C106O607C112O643C115O654C127O704C132O738C142O652C148O774C154O821C159O821C164O852C169O861C174O861C180O907C185O913C190O913C196O938C198O952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 187,
    "tm": 65650,
    "source": {
      "script": 71,
      "start": 38608,
      "end": 38668,
      "positions": "C0O38652C2O38664",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._findPath node:internal/modules/cjs/loader:495:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 188,
    "tm": 65835,
    "source": {
      "script": 395,
      "start": 14360,
      "end": 16964,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isAbsolute node:path:1156:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 189,
    "tm": 65895,
    "source": {
      "script": 71,
      "start": 35447,
      "end": 35593,
      "positions": "C0O35460C8O35460C13O35506C19O35513C26O35531C31O35531C39O35570C41O35566C44O35589",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stat node:internal/modules/cjs/loader:151:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 190,
    "tm": 66010,
    "source": {
      "script": 395,
      "start": 4627,
      "end": 5024,
      "positions": "C0O4642C5O4658C10O4658C17O4688C23O4733C28O4743C33O4743C39O4762C41O4788C43O4802C44O4824C49O4824C54O4856C61O4889C66O4969C71O4979C76O4979C82O5008C84O5022",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryExtensions node:internal/modules/cjs/loader:401:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 191,
    "tm": 66114,
    "source": {
      "script": 395,
      "start": 11552,
      "end": 11736,
      "positions": "C0O11587C2O11599C6O11592C11O11635C16O11651C19O11645C23O11635C29O11670C31O11692C33O11708C34O11608C39O11574C42O11721C43O11734",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryFile node:internal/modules/cjs/loader:385:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 192,
    "tm": 66156,
    "source": {
      "script": 395,
      "start": 11128,
      "end": 11322,
      "positions": "C0O11165C3O11165C8O11186C9O11193C14O11200C15O11207C16O11210C24O11235C26O11249C31O11261C36O11261C41O11282C42O11289C45O11296C49O11320",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toRealPath node:internal/modules/cjs/loader:394:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 193,
    "tm": 66194,
    "source": {
      "script": 395,
      "start": 11343,
      "end": 11455,
      "positions": "C0O11361C5O11371C10O11384C17O11404C20O11415C28O11434C35O11371C41O11453",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "realpathSync node:fs:2467:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 194,
    "tm": 66508
  },
  {
    "name": "getOptions node:internal/fs/utils:315:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 195,
    "tm": 69341,
    "source": {
      "script": 77,
      "start": 7253,
      "end": 7876,
      "positions": "C0O7283C14O7375C16O7397C17O7405C23O7444C29O7488C31O7512C35O7527C42O7562C48O7601C66O7607C71O7601C72O7694C79O7703C84O7721C87O7744C92O7721C96O7770C102O7798C107O7826C115O7798C120O7859C122O7874",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assertEncoding node:internal/fs/utils:152:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 196,
    "tm": 70269,
    "source": {
      "script": 77,
      "start": 3562,
      "end": 3739,
      "positions": "C0O3577C6O3594C9O3601C14O3601C21O3644C24O3671C40O3677C45O3671C47O3738",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toPathIfFileURL node:internal/url:1561:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 197,
    "tm": 70428,
    "source": {
      "script": 74,
      "start": 43738,
      "end": 43859,
      "positions": "C0O43758C3O43763C9O43797C11O43818C12O43821C15O43828C19O43857",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLInstance node:internal/url:1557:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 198,
    "tm": 71997,
    "source": {
      "script": 74,
      "start": 43615,
      "end": 43712,
      "positions": "C0O43635C3O43656C6O43681C12O43703C16O43710",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:669:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 199,
    "tm": 72042,
    "source": {
      "script": 77,
      "start": 18198,
      "end": 18468,
      "positions": "C14O18231C22O18264C25O18264C31O18290C36O18321C49O18296C54O18290C55O18386C68O18386C74O18423C76O18452C78O18452C80O18467",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:358:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 200,
    "tm": 72091,
    "source": {
      "script": 77,
      "start": 8604,
      "end": 9193,
      "positions": "C16O8668C21O8721C26O8721C31O8815C37O8838C41O8866C45O8883C51O8883C60O8934C64O8955C69O8955C76O9000C77O9007C78O9027C94O9027C100O9141C104O9163C106O9163C107O9180C109O9191",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 201,
    "tm": 72128,
    "source": {
      "script": 23,
      "start": 257,
      "end": 342,
      "positions": "C0O269C5O276C12O323C15O340",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "splitRoot node:fs:2421:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 202,
    "tm": 72270,
    "source": {
      "script": 73,
      "start": 64571,
      "end": 64763,
      "positions": "C0O64596C2O64607C6O64601C11O64628C16O64632C24O64670C26O64666C31O64698C44O64705C49O64737C50O64617C55O64583C58O64748C60O64759",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextPart node:fs:2454:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 203,
    "tm": 72303,
    "source": {
      "script": 73,
      "start": 65478,
      "end": 65536,
      "positions": "C0O65491C14O65498C19O65532",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:341:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 204,
    "tm": 72362,
    "source": {
      "script": 77,
      "start": 7965,
      "end": 8463,
      "positions": "C0O7983C6O8046C11O8046C16O8068C24O8068C29O8125C31O8125C32O8150C38O8378C43O8405C51O8378C56O8451C60O8441C62O8462",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFileType node:fs:211:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 205,
    "tm": 72401,
    "source": {
      "script": 73,
      "start": 5513,
      "end": 5754,
      "positions": "C0O5647C2O5652C6O5659C10O5693C15O5700C20O5716C22O5731C24O5729C30O5739C33O5752",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "encodeRealpathResult node:fs:2430:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 206,
    "tm": 72542,
    "source": {
      "script": 73,
      "start": 64797,
      "end": 65055,
      "positions": "C0O64819C4O64844C10O64864C17O64873C22O64889C24O64903C25O64923C30O64930C35O64930C41O64958C48O64967C53O64987C55O65003C56O65026C61O65043C66O65026C71O65053",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadNativeModule node:internal/modules/cjs/helpers:44:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 207,
    "tm": 72600,
    "source": {
      "script": 394,
      "start": 1151,
      "end": 1431,
      "positions": "C0O1187C5O1200C10O1204C15O1204C21O1221C26O1228C35O1258C43O1258C48O1384C53O1384C57O1414C59O1425C61O1430",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module.load node:internal/modules/cjs/loader:969:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 208,
    "tm": 72674,
    "source": {
      "script": 395,
      "start": 30252,
      "end": 31065,
      "positions": "C0O30267C8O30313C16O30267C21O30321C26O30334C32O30321C36O30345C38O30359C42O30373C45O30393C52O30410C55O30415C60O30415C66O30393C71O30384C75O30456C78O30456C83O30533C91O30537C101O30590C106O30601C112O30615C124O30621C129O30615C130O30661C133O30668C140O30679C144O30690C150O30710C151O30722C155O30751C160O30760C165O30862C170O30897C175O30908C187O30948C192O30955C197O30955C204O30969C206O30967C211O31001C216O31010C221O31010C228O31035C233O31044C238O31044C245O31064",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "findLongestRegisteredExtension node:internal/modules/cjs/loader:414:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 209,
    "tm": 72773,
    "source": {
      "script": 395,
      "start": 11864,
      "end": 12293,
      "positions": "C0O11892C5O11897C10O11897C16O11923C18O11947C20O11973C22O12041C36O11994C44O12041C49O12055C51O12074C55O12083C56O12093C61O12100C63O12147C68O12166C74O12205C77O12216C84O12227C89O12247C91O12271C92O11978C95O12278C97O12291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "basename node:path:1306:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 210,
    "tm": 72866,
    "source": {
      "script": 71,
      "start": 39511,
      "end": 41903,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._extensions..js node:internal/modules/cjs/loader:1114:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 211,
    "tm": 72987,
    "source": {
      "script": 395,
      "start": 34887,
      "end": 36639,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFileSync node:fs:456:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 212,
    "tm": 73091,
    "source": {
      "script": 73,
      "start": 11611,
      "end": 12988,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEncoding node:buffer:532:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 213,
    "tm": 73149,
    "source": {
      "script": 30,
      "start": 14846,
      "end": 14978,
      "positions": "C0O14861C6O14909C12O14916C20O14934C23O14934C28O14962C29O14976",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "normalizeEncoding node:internal/util:160:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 214,
    "tm": 73182,
    "source": {
      "script": 22,
      "start": 4206,
      "end": 4311,
      "positions": "C0O4216C7O4239C14O4257C19O4270C21O4284C22O4287C25O4294C29O4309",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint32 node:internal/validators:39:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 215,
    "tm": 73208,
    "source": {
      "script": 21,
      "start": 770,
      "end": 815,
      "positions": "C0O782C2O806C5O795C8O813",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "openSync node:fs:582:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 216,
    "tm": 73255,
    "source": {
      "script": 73,
      "start": 14682,
      "end": 15061,
      "positions": "C0O14706C5O14713C11O14759C16O14759C21O14783C37O14790C44O14841C51O14843C58O14868C63O14876C70O14881C73O14892C78O14892C95O14876C101O15014C106O15014C110O15045C112O15059",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:681:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 217,
    "tm": 73290,
    "source": {
      "script": 77,
      "start": 18513,
      "end": 18648,
      "positions": "C14O18568C19O18568C24O18602C29O18602C34O18634C36O18646",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stringToFlags node:internal/fs/utils:556:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 218,
    "tm": 73364,
    "source": {
      "script": 77,
      "start": 15104,
      "end": 16338,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parseFileMode node:internal/validators:58:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 219,
    "tm": 73422,
    "source": {
      "script": 21,
      "start": 1461,
      "end": 1742,
      "positions": "C0O1484C11O1501C17O1538C24O1563C27O1543C34O1589C41O1634C52O1595C57O1589C58O1655C66O1663C73O1696C78O1696C83O1727C85O1740",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:fs:410:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 220,
    "tm": 73497,
    "source": {
      "script": 73,
      "start": 10586,
      "end": 10796,
      "positions": "C0O10617C2O10637C7O10645C22O10645C28O10689C36O10713C38O10729C43O10732C48O10732C53O10751C58O10757C62O10751C63O10781C65O10794",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryCreateBuffer node:fs:420:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 221,
    "tm": 73558,
    "source": {
      "script": 73,
      "start": 10822,
      "end": 11109,
      "positions": "C0O10859C2O10871C7O10891C9O10902C11O10900C16O10924C23O10930C28O10924C29O10973C34O10989C39O10989C45O11012C57O11018C58O11045C65O11059C67O11069C72O11072C77O11072C93O11093C95O11107",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocUnsafe node:buffer:375:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 222,
    "tm": 73590,
    "source": {
      "script": 30,
      "start": 10943,
      "end": 10998,
      "positions": "C0O10954C5O10954C9O10974C12O10981C16O10996",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:buffer:351:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 223,
    "tm": 73620,
    "source": {
      "script": 30,
      "start": 10241,
      "end": 10396,
      "positions": "C0O10255C8O10255C13O10287C14O10298C21O10314C23O10311C28O10333C33O10365C46O10339C51O10333C53O10395",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateNumber node:internal/validators:117:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 224,
    "tm": 73648,
    "source": {
      "script": 21,
      "start": 3306,
      "end": 3415,
      "positions": "C0O3324C6O3359C22O3365C27O3359C29O3414",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocate node:buffer:400:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 225,
    "tm": 73688,
    "source": {
      "script": 30,
      "start": 11645,
      "end": 11960,
      "positions": "C0O11656C1O11665C6O11677C11O11684C16O11701C17O11708C20O11727C24O11736C27O11717C32O11750C34O11762C39O11773C41O11771C44O11759C49O11792C52O11792C55O11820C62O11835C67O11846C75O11820C81O11869C88O11883C94O11880C100O11893C103O11893C106O11910C108O11919C109O11926C114O11933C118O11958",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryReadSync node:fs:435:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 226,
    "tm": 73736,
    "source": {
      "script": 73,
      "start": 11131,
      "end": 11366,
      "positions": "C0O11180C2O11192C7O11215C12O11230C29O11230C35O11266C47O11272C48O11299C55O11313C57O11323C62O11326C67O11326C83O11347C85O11364",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readSync node:fs:696:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 227,
    "tm": 73803,
    "source": {
      "script": 73,
      "start": 17748,
      "end": 18738,
      "positions": "C0O17748C2O17791C7O17796C13O17819C18O17819C22O17860C29O17867C34O17942C40O17952C45O17952C50O17986C62O18004C68O18020C75O18031C80O18047C89O18089C94O18115C99O18142C112O18142C117O18187C124O18203C125O18214C130O18227C131O18236C132O18255C138O18266C143O18279C159O18285C164O18279C165O18407C170O18455C181O18407C186O18471C191O18497C195O18515C203O18515C208O18570C210O18591C215O18599C240O18599C246O18691C251O18691C255O18722C257O18736",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:687:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 228,
    "tm": 73851,
    "source": {
      "script": 77,
      "start": 18691,
      "end": 18812,
      "positions": "C14O18720C22O18724C29O18748C30O18757C31O18765C44O18765C49O18800C51O18810",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:83:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 229,
    "tm": 73898,
    "source": {
      "script": 21,
      "start": 2214,
      "end": 2677,
      "positions": "C36O2355C42O2394C58O2400C63O2394C64O2459C69O2464C75O2496C91O2502C96O2496C97O2561C99O2571C106O2586C111O2601C121O2640C134O2653C147O2607C152O2601C154O2676",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:185:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 230,
    "tm": 73936,
    "source": {
      "script": 21,
      "start": 5436,
      "end": 5666,
      "positions": "C14O5469C19O5474C25O5507C30O5538C43O5513C48O5507C50O5665",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:72:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 231,
    "tm": 73977,
    "source": {
      "script": 21,
      "start": 1787,
      "end": 2168,
      "positions": "C12O1807C25O1837C32O1870C38O1907C54O1913C59O1907C60O1966C65O1971C71O2001C87O2007C92O2001C93O2060C95O2070C102O2085C107O2098C117O2137C130O2150C143O2104C148O2098C150O2167",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:637:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 232,
    "tm": 74023,
    "source": {
      "script": 77,
      "start": 17315,
      "end": 17694,
      "positions": "C0O17355C1O17366C6O17379C22O17385C27O17379C28O17443C29O17454C34O17467C50O17473C55O17467C56O17531C58O17542C64O17551C69O17575C82O17664C95O17581C100O17575C102O17693",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:902:42",
    "type": "JS",
    "kind": "Unopt",
    "func": 233,
    "tm": 74071,
    "source": {
      "script": 77,
      "start": 24535,
      "end": 25093,
      "positions": "C0O24559C6O24599C14O24599C21O24647C27O24687C32O24710C35O24705C37O24702C47O24736C53O24743C56O24730C61O24758C77O24841C80O24836C98O24861C104O24868C117O24764C122O24758C125O24941C143O24947C148O24941C150O25092",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "closeSync node:fs:532:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 234,
    "tm": 74121,
    "source": {
      "script": 73,
      "start": 13551,
      "end": 13673,
      "positions": "C0O13560C5O13565C11O13600C13O13606C18O13614C31O13614C36O13643C41O13643C46O13672",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:buffer:784:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 235,
    "tm": 74181,
    "source": {
      "script": 30,
      "start": 23184,
      "end": 23746,
      "positions": "C0O23184C2O23225C8O23232C13O23257C20O23275C25O23257C31O23283C32O23308C37O23319C38O23329C43O23339C48O23357C50O23367C55O23379C57O23389C58O23401C65O23416C71O23445C76O23456C83O23478C90O23491C92O23499C97O23513C99O23523C100O23527C104O23571C109O23571C115O23593C116O23609C119O23609C124O23637C126O23664C133O23670C138O23664C139O23720C156O23720C161O23744",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEncodingOps node:buffer:681:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 236,
    "tm": 74291
  },
  {
    "name": "slice node:buffer:596:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 237,
    "tm": 74352,
    "source": {
      "script": 30,
      "start": 16674,
      "end": 16720,
      "positions": "C0O16699C5O16699C11O16720",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Module._compile node:internal/modules/cjs/loader:1059:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 238,
    "tm": 74651,
    "source": {
      "script": 395,
      "start": 32979,
      "end": 34820,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 239,
    "tm": 74753,
    "source": {
      "script": 392,
      "start": 2239,
      "end": 3267,
      "positions": "C0O2308C3O2308C7O2334C10O2348C15O2352C23O2372C25O2392C26O2399C30O2412C35O2423C44O2421C54O2564C64O2564C68O2580C69O2587C70O2608C75O2634C80O2608C86O2711C88O2741C91O2769C96O2776C101O2741C107O2811C112O2831C117O2838C122O2860C126O2891C131O2909C136O2913C143O2942C150O2973C160O3003C166O3017C170O2909C178O3143C183O3161C188O3165C196O3198C206O3228C212O3242C216O3161C223O3266",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 240,
    "tm": 74793,
    "source": {
      "script": 392,
      "start": 1418,
      "end": 1563,
      "positions": "C0O1425C6O1468C11O1489C17O1489C22O1468C26O1536C30O1561",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 241,
    "tm": 74838,
    "source": {
      "script": 392,
      "start": 1594,
      "end": 2209,
      "positions": "C0O1604C8O1604C13O1709C19O1709C24O1648C29O1674C34O1738C38O1767C42O1822C48O1822C53O1796C58O1878C64O1936C70O2095C76O2095C81O2068C86O2127C90O2183C92O2201C99O2208",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateBoolean node:internal/validators:133:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 242,
    "tm": 74871,
    "source": {
      "script": 21,
      "start": 3816,
      "end": 3927,
      "positions": "C0O3834C6O3870C22O3876C27O3870C29O3926",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "wrapSafe node:internal/modules/cjs/loader:1017:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 243,
    "tm": 74944,
    "source": {
      "script": 395,
      "start": 31679,
      "end": 32771,
      "positions": "C0O31679C9O31722C17O31757C22O31764C27O31764C33O31783C40O31793C45O31810C52O31827C56O31916C64O31793C70O32187C74O32204C81O32214C86O32230C98O32345C102O32361C113O32214C118O32646C130O32669C135O32681C142O32692C147O32721C157O32721C162O32755C164O32755",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileFunction node:vm:308:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 244,
    "tm": 75097,
    "source": {
      "script": 84,
      "start": 9562,
      "end": 11817,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:162:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 245,
    "tm": 75622,
    "source": {
      "script": 21,
      "start": 4740,
      "end": 5018,
      "positions": "C16O4776C21O4781C27O4808C43O4814C48O4808C49O4878C56O4885C61O4919C66O4942C71O4959C87O4965C92O4959C94O5017",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:vm:313:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 246,
    "tm": 75656,
    "source": {
      "script": 84,
      "start": 9752,
      "end": 9803,
      "positions": "C0O9766C10O9798C21O9766C26O9803",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 247,
    "tm": 75702,
    "source": {
      "script": 420,
      "start": 0,
      "end": 119,
      "positions": "C0O0C4O119",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 248,
    "tm": 75731,
    "source": {
      "script": 420,
      "start": 0,
      "end": 119,
      "positions": "C0O16C3O16C8O44C21O44C28O118",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "importModuleDynamicallyWrap node:internal/vm/module:433:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 249,
    "tm": 75819,
    "source": {
      "script": 418,
      "start": 11665,
      "end": 12108,
      "positions": "C0O11665C13O11734C18O12106",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "makeRequireFunction node:internal/modules/cjs/helpers:58:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 250,
    "tm": 75898,
    "source": {
      "script": 394,
      "start": 1708,
      "end": 3678,
      "positions": "C0O1708C22O1744C25O1748C29O1744C31O1768C33O1779C53O1811C58O1815C69O1831C73O1811C75O1858C81O1858C83O1885C89O1894C95O1922C104O3082C109O3313C111O3329C115O3469C117O3483C121O3495C126O3518C130O3508C134O3583C137O3611C141O3602C145O3627C148O3650C152O3641C156O3661C158O3676",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "require node:internal/modules/cjs/helpers:101:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 251,
    "tm": 75953,
    "source": {
      "script": 394,
      "start": 3108,
      "end": 3154,
      "positions": "C0O3123C3O3134C8O3134C13O3148",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/cjs/helpers:29:66",
    "type": "JS",
    "kind": "Unopt",
    "func": 252,
    "tm": 75990,
    "source": {
      "script": 394,
      "start": 810,
      "end": 835,
      "positions": "C0O822C2O828C9O834",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "compileForPublicLoader node:internal/bootstrap/loaders:262:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 253,
    "tm": 76043,
    "source": {
      "script": 15,
      "start": 7987,
      "end": 8659,
      "positions": "C0O8006C6O8150C16O8193C33O8156C38O8150C39O8230C44O8230C48O8272C54O8461C61O8492C69O8461C75O8516C80O8534C90O8550C93O8566C98O8550C102O8532C106O8591C111O8591C115O8616C120O8616C124O8647C128O8655",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:cluster:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 254,
    "tm": 76105,
    "source": {
      "script": 421,
      "start": 0,
      "end": 1291,
      "positions": "C0O0C4O1291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:cluster:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 255,
    "tm": 76168,
    "source": {
      "script": 421,
      "start": 0,
      "end": 1291,
      "positions": "C0O1172C3O1200C7O1189C19O1227C24O1272C29O1244C33O1242C38O1290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 256,
    "tm": 76476,
    "source": {
      "script": 422,
      "start": 0,
      "end": 10680,
      "positions": "C0O0C4O10680",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 257,
    "tm": 76876
  },
  {
    "name": " node:child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 258,
    "tm": 77403,
    "source": {
      "script": 423,
      "start": 0,
      "end": 24275,
      "positions": "C0O0C4O24275",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 259,
    "tm": 78302,
    "source": {
      "script": 423,
      "start": 0,
      "end": 24275,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 260,
    "tm": 79030,
    "source": {
      "script": 424,
      "start": 0,
      "end": 31406,
      "positions": "C0O0C4O31406",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/child_process:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 261,
    "tm": 80131
  },
  {
    "name": "<instance_members_initializer> node:internal/child_process:522:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 262,
    "tm": 80175,
    "source": {
      "script": 424,
      "start": 13550,
      "end": 14547,
      "positions": "C3O13600C11O13616C19O13641C25O14547",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 263,
    "tm": 80854,
    "source": {
      "script": 425,
      "start": 0,
      "end": 27349,
      "positions": "C0O0C4O27349",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 264,
    "tm": 81869
  },
  {
    "name": " node:internal/dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 265,
    "tm": 82126,
    "source": {
      "script": 426,
      "start": 0,
      "end": 1849,
      "positions": "C0O0C4O1849",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/dgram:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 266,
    "tm": 82215,
    "source": {
      "script": 426,
      "start": 0,
      "end": 1849,
      "positions": "C0O0C56O25C62O50C67O94C73O94C78O84C83O138C86O138C91O130C97O195C100O195C105O175C111O263C117O263C122O230C128O241C134O317C137O317C142O303C148O350C154O403C157O403C162O431C163O431C165O1776C172O1797C178O1813C184O1836C190O1791C195O1848",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socket_list:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 267,
    "tm": 82585,
    "source": {
      "script": 427,
      "start": 0,
      "end": 2705,
      "positions": "C0O0C4O2705",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/socket_list:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 268,
    "tm": 82704,
    "source": {
      "script": 427,
      "start": 0,
      "end": 2705,
      "positions": "C0O0C8O57C11O57C16O83C21O23C27O113C30O113C35O218C73O1525C101O2649C108O2668C114O2684C120O2664C125O2704",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "customPromiseExecFunction node:child_process:227:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 269,
    "tm": 82893,
    "source": {
      "script": 423,
      "start": 6519,
      "end": 6883,
      "positions": "C0O6519C9O6533C13O6881",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 270,
    "tm": 83057,
    "source": {
      "script": 428,
      "start": 0,
      "end": 3291,
      "positions": "C0O0C4O3291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 271,
    "tm": 83202,
    "source": {
      "script": 428,
      "start": 0,
      "end": 3291,
      "positions": "C0O0C49O25C55O41C61O52C67O68C73O110C76O110C80O110C82O150C85O150C89O150C91O189C94O189C99O174C105O272C108O272C113O232C119O240C125O246C131O255C137O261C143O326C146O326C151O312C157O356C159O371C163O1261C172O1275C176O1926C185O1943C189O2324C198O2345C202O2700C211O2718C216O3290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 272,
    "tm": 83306,
    "source": {
      "script": 429,
      "start": 0,
      "end": 1053,
      "positions": "C0O0C4O1053",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 273,
    "tm": 83371,
    "source": {
      "script": 429,
      "start": 0,
      "end": 1053,
      "positions": "C0O0C24O25C30O41C35O68C42O89C48O103C54O83C58O134C60O134C65O134C67O159C68O159C71O1052",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 274,
    "tm": 83487,
    "source": {
      "script": 430,
      "start": 0,
      "end": 1102,
      "positions": "C0O0C4O1102",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 275,
    "tm": 83550,
    "source": {
      "script": 430,
      "start": 0,
      "end": 1102,
      "positions": "C0O0C22O22C28O62C31O62C35O62C37O104C40O104C44O104C46O143C49O143C53O143C55O160C57O175C61O685C70O699C74O861C83O878C88O1101",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 276,
    "tm": 83659,
    "source": {
      "script": 431,
      "start": 0,
      "end": 1315,
      "positions": "C0O0C4O1315",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 277,
    "tm": 83732,
    "source": {
      "script": 431,
      "start": 0,
      "end": 1315,
      "positions": "C0O0C17O25C22O49C28O102C31O102C35O102C37O122C39O137C43O812C46O840C54O864C59O812C64O876C70O876C75O921C78O928C87O943C91O1009C94O1016C103O1031C107O1117C110O1124C119O1141C123O1235C126O1242C135O1264C140O1314",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitter node:events:208:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 278,
    "tm": 83801,
    "source": {
      "script": 29,
      "start": 6267,
      "end": 6315,
      "positions": "C0O6278C3O6291C8O6296C13O6296C20O6314",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "EventEmitter.init node:events:327:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 279,
    "tm": 83857,
    "source": {
      "script": 29,
      "start": 9680,
      "end": 10269,
      "positions": "C0O9701C6O9737C13O9749C16O9749C21O9775C25O9745C30O9791C32O9806C37O9806C41O9804C45O9830C46O9848C50O9886C60O9879C64O9918C71O9926C80O9953C85O9974C93O9953C98O10027C100O10032C105O10044C108O10057C113O10044C117O10042C123O10213C125O10218C131O10243C138O10253C140O10252C143O10228C148O10268",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getESMFacade node:internal/bootstrap/loaders:280:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 280,
    "tm": 83974,
    "source": {
      "script": 15,
      "start": 8675,
      "end": 9304,
      "positions": "C0O8675C8O8693C14O8713C18O8720C19O8748C29O8748C34O8733C39O8796C42O8809C51O8840C53O8840C55O8870C62O8895C67O8870C72O8912C82O8912C87O8960C89O9012C102O8974C107O8972C111O9218C116O9225C121O9225C125O9249C130O9256C140O9256C146O9293C150O9300",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/bootstrap/loaders:289:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 281,
    "tm": 84041,
    "source": {
      "script": 15,
      "start": 9039,
      "end": 9144,
      "positions": "C0O9052C5O9065C10O9065C14O9093C24O9114C27O9127C32O9093C39O9143",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:303:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 282,
    "tm": 84122,
    "source": {
      "script": 15,
      "start": 9611,
      "end": 9944,
      "positions": "C0O9639C5O9664C11O9693C13O9706C17O9698C22O9748C24O9753C28O9766C30O9781C35O9796C37O9819C42O9826C51O9878C54O9890C59O9916C67O9878C73O9826C79O9715C84O9680C88O9943",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:186:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 283,
    "tm": 84160,
    "source": {
      "script": 15,
      "start": 5627,
      "end": 5781,
      "positions": "C0O5663C5O5670C14O5724C26O5724C34O5779",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "(?:^|\\/)\\.?\\.$",
    "timestamp": 84314,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 284,
    "tm": 84603,
    "source": {
      "script": 432,
      "start": 0,
      "end": 494,
      "positions": "C0O0C4O494",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 285,
    "tm": 84648,
    "source": {
      "script": 432,
      "start": 0,
      "end": 494,
      "positions": "C0O25C3O25C8O56C13O118C16O130C21O155C30O127C42O185C53O227C65O219C70O219C72O294C76O301C81O316C93O392C101O301C106O412C110O419C115O434C119O442C135O476C140O484C148O419C156O493",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get SocketAddress node:net:1872:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 286,
    "tm": 84734,
    "source": {
      "script": 405,
      "start": 50193,
      "end": 50298,
      "positions": "C0O50202C14O50220C19O50253C26O50216C32O50273C36O50294",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:worker_threads:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 287,
    "tm": 84832,
    "source": {
      "script": 433,
      "start": 0,
      "end": 686,
      "positions": "C0O0C4O686",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:worker_threads:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 288,
    "tm": 84881,
    "source": {
      "script": 433,
      "start": 0,
      "end": 686,
      "positions": "C0O139C3O139C8O25C13O41C18O54C23O72C28O94C33O116C38O128C43O285C46O285C51O178C56O193C61O211C66O239C71O263C76O353C79O353C84O327C89O382C96O403C102O419C108O434C114O452C120O476C126O504C132O528C138O546C144O558C150O571C156O621C162O641C168O663C174O397C179O685",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 289,
    "tm": 85305,
    "source": {
      "script": 434,
      "start": 0,
      "end": 15348,
      "positions": "C0O0C4O15348",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/worker:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 290,
    "tm": 85864
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 291,
    "tm": 86120,
    "source": {
      "script": 435,
      "start": 0,
      "end": 4174,
      "positions": "C0O0C4O4174",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 292,
    "tm": 86318,
    "source": {
      "script": 435,
      "start": 0,
      "end": 4174,
      "positions": "C0O0C100O30C106O30C111O47C115O30C117O66C123O91C128O100C133O113C139O138C145O154C151O170C157O194C163O228C169O257C175O281C180O295C186O322C191O336C196O354C201O365C207O386C212O401C217O414C222O467C223O467C225O496C227O496C229O523C231O523C233O542C240O546C246O553C252O564C258O576C264O586C270O599C276O615C282O542C284O658C287O670C294O658C299O658C301O2086C302O2086C304O2283C305O2283C307O3284C308O3284C310O4119C317O4138C323O4154C329O4134C334O4173",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 66,
    "tm": 86442,
    "source": {
      "script": 28,
      "start": 2232,
      "end": 3219,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 187,
    "tm": 86464,
    "source": {
      "script": 71,
      "start": 38608,
      "end": 38668,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextPart node:fs:2454:31",
    "type": "JS",
    "kind": "Baseline",
    "func": 203,
    "tm": 86480,
    "source": {
      "script": 73,
      "start": 65478,
      "end": 65536,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFileType node:fs:211:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 205,
    "tm": 86497,
    "source": {
      "script": 73,
      "start": 5513,
      "end": 5754,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateString node:internal/validators:112:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 16,
    "tm": 86512,
    "source": {
      "script": 21,
      "start": 3172,
      "end": 3281,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dirname node:path:1275:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 166,
    "tm": 86538,
    "source": {
      "script": 71,
      "start": 38741,
      "end": 39410,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 155,
    "tm": 86561,
    "source": {
      "script": 22,
      "start": 2408,
      "end": 3584,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:186:16",
    "type": "JS",
    "kind": "Baseline",
    "func": 283,
    "tm": 86576,
    "source": {
      "script": 15,
      "start": 5627,
      "end": 5781,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:303:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 282,
    "tm": 86593,
    "source": {
      "script": 15,
      "start": 9611,
      "end": 9944,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:vm:313:27",
    "type": "JS",
    "kind": "Baseline",
    "func": 246,
    "tm": 86607,
    "source": {
      "script": 84,
      "start": 9752,
      "end": 9803,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 178,
    "tm": 86622,
    "source": {
      "script": 28,
      "start": 1419,
      "end": 1427,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Socket node:net:292:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 293,
    "tm": 86891
  },
  {
    "name": "Duplex node:internal/streams/duplex:54:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 294,
    "tm": 86991,
    "source": {
      "script": 57,
      "start": 2011,
      "end": 2663,
      "positions": "C0O2025C2O2036C7O2060C12O2067C17O2087C18O2091C23O2100C28O2100C34O2123C39O2132C44O2132C50O2156C54O2204C60O2218C64O2194C68O2246C74O2255C79O2279C85O2303C89O2323C95O2344C99O2363C105O2389C109O2420C115O2429C120O2453C126O2477C130O2497C136O2519C140O2538C146O2559C150O2578C156O2602C162O2631C163O2650C168O2662",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable node:internal/streams/readable:186:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 295,
    "tm": 87300,
    "source": {
      "script": 58,
      "start": 6353,
      "end": 7224,
      "positions": "C0O6353C9O6367C16O6378C21O6404C28O6411C33O6433C34O6588C41O6604C44O6611C48O6593C52O6622C71O6644C76O6642C80O6691C84O6729C92O6756C95O6777C99O6767C103O6807C111O6837C114O6861C118O6851C122O6894C130O6926C133O6952C137O6942C141O6980C149O6991C151O7007C158O7030C166O7007C171O7052C178O7059C186O7059C192O7083C199O7095C212O7095C219O7223",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stream node:internal/streams/legacy:10:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 296,
    "tm": 88800,
    "source": {
      "script": 59,
      "start": 127,
      "end": 160,
      "positions": "C0O138C5O141C10O141C17O159",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ReadableState node:internal/streams/readable:83:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 297,
    "tm": 89042,
    "source": {
      "script": 58,
      "start": 2626,
      "end": 6333,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getHighWaterMark node:internal/streams/state:19:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 298,
    "tm": 89119,
    "source": {
      "script": 62,
      "start": 424,
      "end": 832,
      "positions": "C0O478C12O478C18O529C21O552C26O557C33O585C38O611C47O633C56O678C69O684C74O678C75O732C80O739C84O754C85O781C88O818C93O788C97O830",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "highWaterMarkFrom node:internal/streams/state:10:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 299,
    "tm": 89190,
    "source": {
      "script": 62,
      "start": 168,
      "end": 309,
      "positions": "C0O218C7O250C15O270C19O288C25O307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultHighWaterMark node:internal/streams/state:15:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 300,
    "tm": 89216,
    "source": {
      "script": 62,
      "start": 343,
      "end": 397,
      "positions": "C0O360C12O395",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "BufferList node:internal/streams/buffer_list:14:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 301,
    "tm": 89259,
    "source": {
      "script": 61,
      "start": 265,
      "end": 338,
      "positions": "C0O274C1O284C5O296C6O306C10O318C11O330C16O337",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "construct node:internal/streams/destroy:219:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 302,
    "tm": 89524,
    "source": {
      "script": 56,
      "start": 4490,
      "end": 4878,
      "positions": "C0O4525C8O4558C9O4565C10O4590C15O4625C20O4644C24O4657C25O4671C29O4686C33O4699C34O4713C38O4736C45O4741C48O4736C54O4772C61O4786C64O4772C72O4798C77O4823C78O4830C79O4838C82O4846C90O4846C97O4877",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Writable node:internal/streams/writable:219:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 303,
    "tm": 89870,
    "source": {
      "script": 65,
      "start": 7399,
      "end": 8910,
      "positions": "C0O7399C9O7973C16O7990C19O7997C23O7979C27O8009C33O8027C44O8027C51O8083C58O8090C63O8112C64O8116C83O8138C88O8136C92O8185C96O8223C104O8251C107O8273C111O8263C115O8304C123O8333C126O8356C130O8346C134O8388C142O8418C145O8442C149O8432C153O8475C161O8503C164O8525C168O8515C172O8556C180O8588C183O8614C187O8604C191O8642C197O8656C204O8679C212O8656C217O8701C224O8708C232O8708C238O8732C245O8744C258O8744C265O8909",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "WritableState node:internal/streams/writable:77:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 304,
    "tm": 91997,
    "source": {
      "script": 65,
      "start": 2472,
      "end": 6973,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resetBuffer node:internal/streams/writable:202:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 305,
    "tm": 92248,
    "source": {
      "script": 65,
      "start": 6995,
      "end": 7107,
      "positions": "C0O7007C2O7022C6O7030C7O7050C11O7057C12O7074C16O7084C17O7098C22O7106",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createHandle node:net:144:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 306,
    "tm": 92464,
    "source": {
      "script": 405,
      "start": 3785,
      "end": 4145,
      "positions": "C0O3805C13O3805C18O3848C23O3848C28O3871C30O3880C35O3898C42O3921C46O3933C49O3947C57O3956C60O3970C67O3905C72O3983C73O3991C75O4000C80O4017C87O4039C91O4051C94O4064C102O4073C105O4086C112O4024C117O4099C118O4107C125O4113C130O4107",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set node:net:1796:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 307,
    "tm": 92638,
    "source": {
      "script": 405,
      "start": 48287,
      "end": 48320,
      "positions": "C0O48293C2O48305C7O48314C13O48318",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:net:1795:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 308,
    "tm": 92725,
    "source": {
      "script": 405,
      "start": 48252,
      "end": 48280,
      "positions": "C0O48257C2O48269C4O48268C7O48278",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Readable.on node:internal/streams/readable:886:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 309,
    "tm": 92933,
    "source": {
      "script": 58,
      "start": 28013,
      "end": 28912,
      "positions": "C0O28038C5O28045C10O28055C15O28058C29O28058C35O28099C40O28118C42O28125C47O28307C55O28307C62O28333C65O28300C69O28426C75O28434C80O28456C85O28456C91O28475C93O28482C98O28515C104O28536C110O28563C112O28608C118O28587C122O28622C123O28636C127O28651C128O28673C132O28688C140O28715C145O28729C150O28688C155O28755C161O28773C164O28773C170O28817C176O28836C179O28844C187O28844C193O28899C195O28910",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initSocketHandle node:net:261:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 310,
    "tm": 93117,
    "source": {
      "script": 405,
      "start": 6509,
      "end": 7087,
      "positions": "C0O6525C5O6525C9O6541C10O6556C14O6642C20O6662C27O6670C32O6684C36O6701C43O6718C45O6716C49O6736C51O6741C57O6779C62O6760C66O6758C70O6808C72O6813C74O6812C78O6827C80O6863C82O6868C84O6867C88O6887C90O6928C94O6946C99O6951C105O6984C106O6991C107O7000C109O7005C114O7014C118O7044C123O7052C128O7052C134O7086",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "undestroy node:internal/streams/destroy:154:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 311,
    "tm": 93277,
    "source": {
      "script": 56,
      "start": 2853,
      "end": 3525,
      "positions": "C0O2875C5O2908C10O2927C14O2940C15O2954C19O2966C20O2975C24O2988C25O3003C29O3016C30O3028C34O3041C35O3051C39O3063C40O3078C44O3091C45O3101C49O3126C55O3135C58O3122C62O3167C68O3176C71O3163C75O3194C79O3207C80O3221C84O3233C85O3245C89O3258C90O3267C94O3280C95O3295C99O3308C100O3318C104O3330C105O3345C109O3358C110O3372C114O3385C115O3399C119O3424C125O3433C128O3420C132O3461C138O3470C141O3457C145O3500C151O3509C154O3496C159O3524",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getNewAsyncId node:net:163:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 312,
    "tm": 93441,
    "source": {
      "script": 405,
      "start": 4170,
      "end": 4286,
      "positions": "C0O4183C4O4216C14O4249C17O4249C22O4271C27O4271C31O4284",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:413:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 313,
    "tm": 93559,
    "source": {
      "script": 388,
      "start": 12858,
      "end": 12891,
      "positions": "C0O12869C4O12885",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:19:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 314,
    "tm": 93684,
    "source": {
      "script": 432,
      "start": 392,
      "end": 404,
      "positions": "C0O398C4O404",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "realpathSync node:fs:2467:22",
    "type": "JS",
    "kind": "Baseline",
    "func": 194,
    "tm": 94217,
    "source": {
      "script": 73,
      "start": 65769,
      "end": 69670,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:246:30",
    "type": "JS",
    "kind": "Baseline",
    "func": 180,
    "tm": 94321,
    "source": {
      "script": 15,
      "start": 7483,
      "end": 7579,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 315,
    "tm": 94819,
    "source": {
      "script": 436,
      "start": 0,
      "end": 85,
      "positions": "C0O0C4O85",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 316,
    "tm": 94908,
    "source": {
      "script": 436,
      "start": 0,
      "end": 85,
      "positions": "C0O14C4O22C12O35C16O43C21O22C27O49C31O57C39O71C43O79C48O57C55O84",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:565:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 317,
    "tm": 95191,
    "source": {
      "script": 388,
      "start": 17789,
      "end": 18011,
      "positions": "C0O17796C8O17800C14O17845C17O17853C28O17853C34O17965C40O17965C45O18002C49O18010",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "executeUserEntryPoint node:internal/modules/run_main:70:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 318,
    "tm": 95340,
    "source": {
      "script": 419,
      "start": 2162,
      "end": 2467,
      "positions": "C7O2178C14O2182C22O2212C25O2212C30O2258C33O2258C38O2294C40O2318C45O2329C50O2318C56O2430C61O2437C73O2437C79O2466",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveMainPath node:internal/modules/run_main:15:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 319,
    "tm": 95451,
    "source": {
      "script": 419,
      "start": 398,
      "end": 812,
      "positions": "C0O570C5O577C12O587C15O592C20O592C30O577C36O622C38O641C39O648C40O681C48O681C53O727C55O758C60O769C65O794C67O810",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shouldUseESMLoader node:internal/modules/run_main:30:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 320,
    "tm": 95739,
    "source": {
      "script": 419,
      "start": 841,
      "end": 1401,
      "positions": "C0O875C8O875C13O918C15O938C16O950C17O993C25O993C30O1050C32O1082C37O1098C38O1110C39O1158C45O1174C51O1174C58O1221C59O1233C60O1236C66O1253C72O1253C79O1300C80O1313C81O1328C86O1328C91O1358C93O1376C98O1381C105O1386C108O1399",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "runMainESM node:internal/modules/run_main:47:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 321,
    "tm": 95901,
    "source": {
      "script": 419,
      "start": 1422,
      "end": 1762,
      "positions": "C0O1422C12O1457C20O1457C25O1445C30O1525C38O1525C43O1507C49O1553C54O1571C59O1571C64O1553C69O1761",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "loadESM node:internal/process/esm_loader:82:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 322,
    "tm": 96002,
    "source": {
      "script": 397,
      "start": 2451,
      "end": 2764,
      "positions": "C10O2451C21O2476C24O2482C35O2476C58O2506C60O2521C63O2512C75O2506C113O2555C120O2559C125O2606C130O2614C138O2614C143O2642C152O2649C153O2660C161O2660C166O2685C176O2686C193O2763",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initializeLoader node:internal/process/esm_loader:50:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 323,
    "tm": 96103,
    "source": {
      "script": 397,
      "start": 1441,
      "end": 2409,
      "positions": "C10O1441C18O1475C24O1475C29O1456C34O1637C37O1637C42O1700C48O1708C57O1715C58O1723C63O1740C66O1754C71O1754C78O1760C85O1744C86O1783C89O2042C94O2042C100O2181C107O2212C110O2212C115O2230C122O2241C127O2241C138O2187C151O2157C177O2365C182O2381C187O2381C200O2365C232O2408",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleMainPromise node:internal/modules/run_main:58:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 324,
    "tm": 96201,
    "source": {
      "script": 419,
      "start": 1796,
      "end": 1946,
      "positions": "C10O1796C18O1810C21O1818C31O1829C34O1818C43O1861C53O1868C90O1901C93O1909C103O1921C106O1909C146O1945",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/run_main:51:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 325,
    "tm": 96278,
    "source": {
      "script": 419,
      "start": 1579,
      "end": 1757,
      "positions": "C0O1613C7O1618C15O1618C24O1647C30O1647C35O1670C44O1709C55O1733C60O1733C71O1715C76O1753",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "pathToFileURL node:internal/url:1520:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 326,
    "tm": 96401,
    "source": {
      "script": 74,
      "start": 42362,
      "end": 43591,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URL node:internal/url:635:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 327,
    "tm": 96505,
    "source": {
      "script": 74,
      "start": 17580,
      "end": 17973,
      "positions": "C13O17646C17O17674C19O17692C23O17724C30O17739C40O17753C42O17752C46O17773C50O17778C57O17793C60O17789C65O17787C69O17811C85O17863C93O17863C103O17919C117O17919C129O17811C135O17972",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLContext node:internal/url:161:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 328,
    "tm": 96572,
    "source": {
      "script": 74,
      "start": 3723,
      "end": 3935,
      "positions": "C0O3732C1O3743C5O3752C7O3764C11O3775C13O3789C17O3799C19O3813C23O3823C24O3833C28O3845C29O3855C33O3867C35O3877C39O3887C40O3898C44O3910C45O3924C50O3934",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseComplete node:internal/url:543:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 329,
    "tm": 96717,
    "source": {
      "script": 74,
      "start": 14677,
      "end": 15346,
      "positions": "C0O14791C2O14796C4O14795C8O14808C10O14818C14O14829C16O14840C20O14854C22O14878C24O14876C29O14902C43O14867C47O14927C49O14951C51O14949C56O14975C70O14940C74O15000C76O15009C80O15019C82O15039C84O15037C89O15059C101O15067C103O15028C107O15080C109O15090C113O15101C115O15114C119O15128C121O15137C125O15147C127O15157C129O15156C134O15210C136O15215C141O15235C144O15231C149O15229C153O15258C155O15263C157O15262C163O15277C168O15286C172O15300C177O15322C179O15321C183O15300C189O15345",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLSearchParams node:internal/url:183:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 330,
    "tm": 96985
  },
  {
    "name": "initSearchParams node:internal/url:1081:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 331,
    "tm": 97095,
    "source": {
      "script": 74,
      "start": 29326,
      "end": 29441,
      "positions": "C0O29342C4O29359C6O29363C11O29377C15O29387C16O29394C17O29401C19O29405C25O29421C29O29419C34O29440",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "encodePathChars node:internal/url:1505:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 332,
    "tm": 97205,
    "source": {
      "script": 74,
      "start": 41646,
      "end": 42338,
      "positions": "C0O41661C8O41665C15O41709C22O41753C31O41720C38O41833C46O41851C52O41851C59O41896C66O41940C75O41907C82O41966C90O41970C97O42015C104O42059C113O42026C120O42083C128O42087C135O42132C142O42176C151O42143C158O42207C166O42211C173O42256C180O42300C189O42267C196O42320C198O42336",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set pathname node:internal/url:935:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 333,
    "tm": 97295,
    "source": {
      "script": 74,
      "start": 25447,
      "end": 25716,
      "positions": "C0O25460C5O25465C11O25488C23O25494C28O25488C29O25561C34O25583C38O25592C40O25591C45O25613C46O25620C47O25625C58O25637C67O25660C69O25659C78O25700C83O25700C92O25625C98O25715",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLThis node:internal/url:630:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 334,
    "tm": 97352,
    "source": {
      "script": 74,
      "start": 17464,
      "end": 17553,
      "positions": "C0O17475C3O17488C9O17510C14O17527C16O17526C20O17536C21O17551",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:652:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 335,
    "tm": 97398,
    "source": {
      "script": 74,
      "start": 18080,
      "end": 18155,
      "positions": "C0O18089C4O18102C6O18101C10O18111C19O18119C21O18117C26O18145C30O18151",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParsePathComplete node:internal/url:602:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 336,
    "tm": 97495,
    "source": {
      "script": 74,
      "start": 16636,
      "end": 17102,
      "positions": "C0O16754C2O16759C4O16758C8O16771C10O16784C12O16782C17O16804C22O16817C24O16826C28O16838C35O16851C40O16848C46O16886C48O16895C52O16905C59O16919C61O16918C66O16915C70O16997C72O17010C74O17008C79O17030C84O17043C86O17052C90O17064C97O17077C102O17074C107O17101",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get href node:internal/url:752:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 337,
    "tm": 97561,
    "source": {
      "script": 74,
      "start": 20812,
      "end": 20917,
      "positions": "C0O20821C5O20826C11O20849C23O20855C28O20849C29O20888C33O20900C35O20899C41O20908C46O20913",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:698:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 338,
    "tm": 97697,
    "source": {
      "script": 74,
      "start": 19380,
      "end": 20630,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "import node:internal/modules/esm/loader:396:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 339,
    "tm": 97858,
    "source": {
      "script": 398,
      "start": 11957,
      "end": 12509,
      "positions": "C10O11957C18O12020C25O12020C30O12050C32O12063C41O12077C50O12120C55O12145C64O12145C70O12181C81O12372C90O12196C98O12186C100O12186C116O12223C123O12246C137O12223C143O12288C154O12289C160O12322C170O12323C175O12216C186O12168C201O12398C212O12419C217O12415C223O12404C235O12398C261O12450C270O12501C281O12505",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getModuleJob node:internal/modules/esm/loader:309:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 340,
    "tm": 97993,
    "source": {
      "script": 398,
      "start": 9016,
      "end": 9842,
      "positions": "C10O9016C18O9067C20O9099C22O9108C26O9117C33O9124C38O9288C49O9338C54O9338C59O9325C65O9428C82O9428C95O9417C118O9395C123O9403C128O9507C133O9517C138O9543C143O9517C150O9615C154O9659C159O9669C166O9695C176O9669C181O9714C185O9745C187O9756C208O9772C214O9827C224O9838",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolve node:internal/modules/esm/loader:581:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 341,
    "tm": 98190,
    "source": {
      "script": 398,
      "start": 17300,
      "end": 18771,
      "positions": "C10O17300C32O17363C37O17363C73O17407C77O17437C89O17505C92O17505C98O17536C118O17542C123O17536C124O17660C131O17709C133O17714C138O17724C142O17751C144O17756C148O17767C155O17774C166O17817C172O17827C176O17877C183O17912C189O17932C195O17958C205O17861C218O17855C244O18013C250O18057C268O18063C273O18057C274O18185C279O18193C284O18218C295O18294C316O18300C321O18294C322O18437C328O18520C349O18526C354O18520C355O18657C364O18657C369O18727C376O18742C382O18756C396O18767",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultResolve node:internal/modules/esm/resolve:1084:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 342,
    "tm": 98576
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:931:49",
    "type": "JS",
    "kind": "Unopt",
    "func": 343,
    "tm": 98685,
    "source": {
      "script": 402,
      "start": 30114,
      "end": 30249,
      "positions": "C0O30130C2O30144C7O30152C8O30165C9O30168C10O30181C16O30185C21O30194C22O30206C23O30209C26O30216C30O30247",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isRelativeSpecifier node:internal/modules/esm/resolve:921:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 344,
    "tm": 98750,
    "source": {
      "script": 402,
      "start": 29821,
      "end": 30064,
      "positions": "C0O29837C1O29850C7O29854C12O29883C19O29890C26O29908C32O29912C37O29921C38O29933C39O29938C41O29951C47O29955C52O29986C59O29993C66O30011C72O30015C77O30024C78O30036C79O30049C80O30062",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get protocol node:internal/url:794:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 345,
    "tm": 98830,
    "source": {
      "script": 74,
      "start": 21897,
      "end": 22005,
      "positions": "C0O21906C5O21911C11O21934C23O21940C28O21934C29O21973C33O21985C35O21984C39O21994C43O22001",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkIfDisallowedImport node:internal/modules/esm/resolve:1016:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 346,
    "tm": 98919,
    "source": {
      "script": 402,
      "start": 32930,
      "end": 34088,
      "positions": "C0O32971C4O33025C11O33034C16O33071C23O33080C28O33107C31O33111C37O33267C41O33298C48O33307C53O33340C60O33349C65O33383C81O33389C86O33383C87O33574C92O33595C102O33602C103O33617C108O33634C113O33634C122O33679C125O33692C130O33692C137O33741C153O33747C158O33741C159O33920C175O33926C180O33920C182O34087",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "throwIfUnsupportedURLScheme node:internal/modules/esm/resolve:1063:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 347,
    "tm": 99017,
    "source": {
      "script": 402,
      "start": 34326,
      "end": 34778,
      "positions": "C0O34367C4O34397C11O34406C16O34432C23O34441C30O34469C32O34522C39O34531C44O34562C51O34571C56O34607C63O34656C77O34712C88O34656C96O34613C101O34607C103O34777",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getConditionsSet node:internal/modules/esm/resolve:146:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 348,
    "tm": 99148,
    "source": {
      "script": 402,
      "start": 4495,
      "end": 4822,
      "positions": "C0O4512C6O4559C8O4555C13O4585C18O4590C24O4624C40O4630C45O4624C46O4752C53O4759C58O4783C59O4790C63O4820",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleResolve node:internal/modules/esm/resolve:944:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 349,
    "tm": 99242,
    "source": {
      "script": 402,
      "start": 30464,
      "end": 31233,
      "positions": "C0O30538C7O30547C12O30571C19O30580C23O30700C25O30712C28O30716C34O30774C47O30785C55O30820C60O30846C66O30850C71O30865C83O30876C94O30955C101O30966C110O30964C111O31006C115O31031C127O31042C133O31120C140O31129C145O31148C147O31164C148O31171C160O31178C165O31231",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "finalizeResolution node:internal/modules/esm/resolve:372:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 350,
    "tm": 99424,
    "source": {
      "script": 402,
      "start": 11491,
      "end": 13072,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get pathname node:internal/url:924:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 351,
    "tm": 99525,
    "source": {
      "script": 74,
      "start": 25171,
      "end": 25431,
      "positions": "C0O25180C5O25185C11O25208C23O25214C28O25208C29O25259C33O25264C35O25263C39O25278C43O25287C45O25286C50O25319C56O25323C59O25327C60O25340C65O25345C71O25352C76O25365C78O25375C79O25380C86O25391C89O25414C97O25391C106O25427",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fileURLToPath node:internal/url:1478:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 352,
    "tm": 99675,
    "source": {
      "script": 74,
      "start": 40537,
      "end": 40862,
      "positions": "C0O40548C6O40582C13O40589C22O40611C25O40616C31O40641C49O40647C54O40641C55O40717C62O40726C67O40743C77O40749C82O40743C83O40787C92O40806C101O40834C105O40860",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get origin node:internal/url:769:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 353,
    "tm": 99769,
    "source": {
      "script": 74,
      "start": 21255,
      "end": 21881,
      "positions": "C0O21264C5O21269C11O21292C23O21298C28O21292C29O21404C33O21409C35O21408C39O21435C88O21481C93O21486C99O21493C107O21528C112O21548C118O21552C124O21536C130O21558C134O21565C139O21658C145O21679C146O21785C151O21817C156O21829C161O21839C166O21792C171O21845C172O21856C178O21877",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1460:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 354,
    "tm": 99856,
    "source": {
      "script": 74,
      "start": 40037,
      "end": 40513,
      "positions": "C0O40055C7O40064C12O40078C19O40114C24O40084C29O40078C30O40152C35O40177C37O40193C41O40182C46O40212C48O40224C54O40228C59O40268C66O40282C70O40268C75O40287C79O40301C81O40316C84O40313C90O40321C97O40338C102O40357C112O40363C117O40357C118O40202C123O40164C126O40475C131O40482C135O40511",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hostname node:internal/url:882:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 355,
    "tm": 99913,
    "source": {
      "script": 74,
      "start": 24113,
      "end": 24225,
      "positions": "C0O24122C5O24127C11O24150C23O24156C28O24150C29O24189C33O24201C35O24200C39O24210C47O24221",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:165:3",
    "type": "JS",
    "kind": "Unopt",
    "func": 356,
    "tm": 99995,
    "source": {
      "script": 402,
      "start": 5025,
      "end": 5091,
      "positions": "C0O5080C5O5044C10O5035C21O5084C24O5080C29O5091",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "statSync node:fs:1579:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 357,
    "tm": 100097,
    "source": {
      "script": 73,
      "start": 40395,
      "end": 40799,
      "positions": "C7O40395C16O40457C21O40464C26O40502C33O40504C40O40528C45O40536C52O40541C55O40552C60O40552C66O40613C76O40536C82O40652C88O40667C96O40680C102O40708C103O40725C104O40732C109O40732C113O40763C118O40770C122O40797",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasNoEntryError node:fs:1516:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 358,
    "tm": 100187,
    "source": {
      "script": 73,
      "start": 38832,
      "end": 39023,
      "positions": "C0O38850C6O38877C11O38893C16O38877C21O38905C27O38919C36O38923C39O38936C40O38952C46O38976C51O38982C58O38987C61O39000C62O39008C63O39021",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getStatsFromBinding node:internal/fs/utils:531:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 359,
    "tm": 100296,
    "source": {
      "script": 77,
      "start": 14030,
      "end": 15080,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isBigUint64Array node:internal/util/types:53:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 360,
    "tm": 100365,
    "source": {
      "script": 23,
      "start": 1371,
      "end": 1460,
      "positions": "C0O1383C5O1390C12O1437C15O1458",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:447:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 361,
    "tm": 100413,
    "source": {
      "script": 77,
      "start": 11041,
      "end": 11100,
      "positions": "C0O11057C2O11070C4O11068C10O11089C12O11087C15O11080C18O11098",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats node:internal/fs/utils:496:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 362,
    "tm": 100492,
    "source": {
      "script": 77,
      "start": 12784,
      "end": 13312,
      "positions": "C0O12921C41O12921C46O13049C48O13062C52O13075C54O13088C58O13101C60O13114C64O13127C66O13144C70O13161C73O13174C77O13172C81O13197C84O13210C88O13208C92O13233C95O13246C99O13244C103O13269C106O13286C110O13284C115O13311",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase node:internal/fs/utils:401:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 363,
    "tm": 100552,
    "source": {
      "script": 77,
      "start": 9948,
      "end": 10237,
      "positions": "C0O10034C2O10043C6O10052C8O10062C12O10072C14O10083C18O10094C20O10103C24O10112C26O10121C30O10130C32O10140C36O10150C38O10163C42O10176C44O10185C48O10194C50O10204C54O10214C56O10226C61O10236",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dateFromMs node:internal/fs/utils:461:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 364,
    "tm": 100646,
    "source": {
      "script": 77,
      "start": 11553,
      "end": 11598,
      "positions": "C0O11562C7O11578C10O11578C17O11589C23O11569C28O11596",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:415:43",
    "type": "JS",
    "kind": "Unopt",
    "func": 365,
    "tm": 100707,
    "source": {
      "script": 77,
      "start": 10281,
      "end": 10330,
      "positions": "C0O10300C7O10319C10O10300C15O10328",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:518:46",
    "type": "JS",
    "kind": "Unopt",
    "func": 366,
    "tm": 100764,
    "source": {
      "script": 77,
      "start": 13661,
      "end": 13883,
      "positions": "C0O13676C8O13707C10O13703C17O13731C19O13727C26O13759C28O13755C33O13776C34O13789C35O13853C42O13860C44O13858C50O13868C53O13881",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isFile node:internal/fs/utils:419:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 367,
    "tm": 100811,
    "source": {
      "script": 77,
      "start": 10370,
      "end": 10419,
      "positions": "C0O10389C7O10408C10O10389C15O10417",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get search node:internal/url:946:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 368,
    "tm": 100959,
    "source": {
      "script": 74,
      "start": 25730,
      "end": 25923,
      "positions": "C0O25739C5O25744C11O25767C23O25773C28O25767C29O25824C33O25829C35O25828C39O25814C44O25843C48O25871C53O25885C55O25895C56O25900C61O25911C65O25919",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hash node:internal/url:982:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 369,
    "tm": 101025,
    "source": {
      "script": 74,
      "start": 26663,
      "end": 26868,
      "positions": "C0O26672C5O26677C11O26700C23O26706C28O26700C29O26760C33O26765C35O26764C39O26747C44O26779C48O26813C53O26827C55O26837C56O26842C61O26853C65O26864",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set search node:internal/url:955:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 370,
    "tm": 101177,
    "source": {
      "script": 74,
      "start": 25937,
      "end": 26511,
      "positions": "C0O25952C5O25957C11O25980C23O25986C28O25980C29O26031C33O26036C35O26035C39O26050C46O26059C52O26084C54O26095C59O26111C60O26121C64O26135C73O26149C75O26148C80O26145C86O26189C87O26199C93O26203C98O26212C108O26221C115O26260C117O26270C121O26282C130O26295C135O26292C139O26322C143O26344C154O26358C163O26391C171O26391C183O26344C188O26462C197O26484C199O26483C203O26462C209O26510",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toUSVString node:internal/util:59:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 371,
    "tm": 101247,
    "source": {
      "script": 22,
      "start": 1351,
      "end": 1643,
      "positions": "C0O1373C4O1524C11O1544C14O1524C20O1573C22O1589C24O1600C25O1603C30O1634C35O1610C40O1641",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set hash node:internal/url:991:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 372,
    "tm": 101350,
    "source": {
      "script": 74,
      "start": 26880,
      "end": 27380,
      "positions": "C0O26893C5O26898C11O26921C23O26927C28O26921C29O26972C33O26977C35O26976C39O27025C44O27047C46O27066C47O27079C51O27093C60O27107C62O27106C67O27103C71O27137C72O27144C73O27155C74O27163C80O27167C85O27176C95O27183C102O27218C104O27231C108O27241C117O27254C122O27251C126O27282C137O27294C146O27326C154O27326C166O27282C172O27379",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:1056:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 373,
    "tm": 101415,
    "source": {
      "script": 402,
      "start": 34128,
      "end": 34288,
      "positions": "C0O34146C7O34155C12O34174C19O34183C24O34208C31O34217C36O34236C43O34242C48O34236C50O34287",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:107:39",
    "type": "JS",
    "kind": "Unopt",
    "func": 374,
    "tm": 101511,
    "source": {
      "script": 403,
      "start": 3505,
      "end": 3711,
      "positions": "C0O3539C7O3539C13O3555C20O3590C23O3615C28O3560C35O3630C36O3642C37O3645C42O3676C46O3668C58O3685C63O3709",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:internal/url:746:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 375,
    "tm": 101574,
    "source": {
      "script": 74,
      "start": 20695,
      "end": 20800,
      "positions": "C0O20704C5O20709C11O20732C23O20738C28O20732C29O20771C33O20783C35O20782C41O20791C46O20796",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getFileProtocolModuleFormat node:internal/modules/esm/get_format:55:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 376,
    "tm": 101713,
    "source": {
      "script": 403,
      "start": 1597,
      "end": 2902,
      "positions": "C0O1647C5O1647C10O1681C15O1681C20O1702C22O1710C27O1727C32O1734C39O1754C50O1791C51O1814C58O1832C62O1841C64O1853C66O1867C67O1871C74O1907C79O2004C83O2022C84O2039C85O2061C88O2069C93O2073C100O2093C107O2113C112O2144C117O2144C122O2199C127O2199C132O2246C139O2267C142O2283C147O2267C156O2246C162O2315C167O2386C171O2480C182O2460C191O2556C201O2534C207O2609C216O2733C229O2751C239O2695C243O2783C259O2789C264O2783C265O2855C270O2862C279O2900",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "extname node:path:1385:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 377,
    "tm": 101862,
    "source": {
      "script": 71,
      "start": 41976,
      "end": 43659,
      "positions": "C0O41989C8O41989C13O42038C16O42062C18O42079C21O42106C23O42252C25O42277C29O42284C33O42291C34O42291C39O42323C44O42323C50O42365C52O42378C54O42374C59O42542C63O42573C65O42587C69O42602C71O42627C73O42651C75O42659C80O42774C82O42804C84O42812C88O42831C90O42844C92O42840C97O42939C99O42952C104O42970C111O42997C113O43013C118O43030C123O43060C125O43073C130O43233C133O42299C138O42259C141O43270C143O43283C150O43305C156O43400C163O43497C170O43532C173O43524C180O43571C183O43557C188O43585C190O43595C191O43606C205O43613C210O43655",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageType node:internal/modules/esm/resolve:805:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 378,
    "tm": 101930,
    "source": {
      "script": 402,
      "start": 26065,
      "end": 26155,
      "positions": "C0O26097C3O26097C8O26148C12O26153",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageScopeConfig node:internal/modules/esm/resolve:229:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 379,
    "tm": 102017,
    "source": {
      "script": 402,
      "start": 6665,
      "end": 7735,
      "positions": "C0O6701C13O6701C19O6798C24O6812C32O6816C39O6893C41O6926C46O6943C49O6943C54O6926C60O7050C66O7058C68O7079C69O7112C72O7132C85O7149C91O7354C96O7386C100O7363C105O7396C107O6740C110O7433C115O7433C120O7488C127O7505C132O7551C137O7572C142O7614C147O7638C154O7656C159O7673C164O7673C170O7712C172O7733",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPackageConfig node:internal/modules/esm/resolve:173:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 380,
    "tm": 102231,
    "source": {
      "script": 402,
      "start": 5250,
      "end": 6563,
      "positions": "C0O5295C5O5312C10O5312C16O5325C18O5359C20O5375C21O5397C26O5415C31O5415C37O5425C42O5436C44O5490C51O5509C56O5548C61O5571C66O5617C71O5643C78O5665C83O5682C88O5682C94O5712C96O5733C97O5745C102O5770C107O5784C115O5782C125O5827C137O5884C144O5895C163O5922C168O5936C174O5922C178O5920C185O5968C192O5833C197O5827C198O5996C203O6005C208O6011C213O6017C218O6049C223O6076C233O6129C235O6152C241O6182C243O6202C249O6232C251O6305C253O6314C260O6335C265O6351C268O6391C275O6408C281O6436C287O6446C293O6456C299O6466C305O6479C312O6495C317O6512C322O6512C328O6540C330O6561",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseComplete node:internal/url:543:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 329,
    "tm": 102370,
    "source": {
      "script": 74,
      "start": 14677,
      "end": 15346,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:322:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 184,
    "tm": 102412,
    "source": {
      "script": 395,
      "start": 8970,
      "end": 9488,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLThis node:internal/url:630:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 334,
    "tm": 102439,
    "source": {
      "script": 74,
      "start": 17464,
      "end": 17553,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1460:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 354,
    "tm": 102476,
    "source": {
      "script": 74,
      "start": 40037,
      "end": 40513,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "type": "JS",
    "kind": "Baseline",
    "func": 201,
    "tm": 102499,
    "source": {
      "script": 23,
      "start": 257,
      "end": 342,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isURLInstance node:internal/url:1557:23",
    "type": "JS",
    "kind": "Baseline",
    "func": 198,
    "tm": 102531,
    "source": {
      "script": 74,
      "start": 43615,
      "end": 43712,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:341:32",
    "type": "JS",
    "kind": "Baseline",
    "func": 204,
    "tm": 102559,
    "source": {
      "script": 77,
      "start": 7965,
      "end": 8463,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:652:21",
    "type": "JS",
    "kind": "Baseline",
    "func": 335,
    "tm": 102584,
    "source": {
      "script": 74,
      "start": 18080,
      "end": 18155,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URLContext node:internal/url:161:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 328,
    "tm": 102607,
    "source": {
      "script": 74,
      "start": 3723,
      "end": 3935,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/modules/esm/module_map:18:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 381,
    "tm": 102804,
    "source": {
      "script": 399,
      "start": 587,
      "end": 727,
      "positions": "C11O600C18O627C28O627C33O659C43O659C48O693C50O706C61O706C71O716C77O723",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "#createModuleJob node:internal/modules/esm/loader:345:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 382,
    "tm": 102903,
    "source": {
      "script": 398,
      "start": 10496,
      "end": 11311,
      "positions": "C0O10496C17O10568C22O10997C31O11038C37O11038C42O11094C70O11094C76O11238C79O11243C84O11253C92O11279C103O11253C108O11296C110O11307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "ModuleJob node:internal/modules/esm/module_job:56:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 383,
    "tm": 103042,
    "source": {
      "script": 400,
      "start": 1312,
      "end": 3173,
      "positions": "C0O1312C27O1345C32O1345C50O1421C55O1433C59O1447C64O1469C68O1493C73O1505C77O1519C82O1535C86O1554C90O1566C94O1701C101O1722C104O1751C113O1760C122O1765C135O1722C140O1720C144O1869C149O2857C152O2871C155O2869C159O2978C169O3005C178O3013C181O2978C186O3139C190O3157C195O3172",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleProvider node:internal/modules/esm/loader:346:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 384,
    "tm": 103150,
    "source": {
      "script": 398,
      "start": 10568,
      "end": 10971,
      "positions": "C10O10568C18O10662C21O10673C26O10678C33O10693C39O10709C43O10673C57O10662C80O10623C85O10644C90O10763C97O10775C102O10775C108O10800C110O10827C125O10833C130O10827C131O10897C153O10904C166O10965",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "load node:internal/modules/esm/loader:425:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 385,
    "tm": 103310,
    "source": {
      "script": 398,
      "start": 12876,
      "end": 14084,
      "positions": "C10O12876C58O12924C60O12929C65O12937C69O12962C71O12967C75O12976C82O12983C93O13024C99O13032C103O13056C112O13062C125O13056C151O13104C157O13144C175O13150C180O13144C181O13271C186O13285C191O13314C196O13358C208O13358C214O13462C223O13507C227O13524C240O13468C245O13462C246O13563C252O13603C273O13609C278O13603C279O13746C294O13818C297O13818C307O13853C310O13853C316O13885C335O13891C340O13885C341O14037C348O14052C354O14066C368O14080",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultLoad node:internal/modules/esm/load:13:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 386,
    "tm": 103413,
    "source": {
      "script": 412,
      "start": 368,
      "end": 821,
      "positions": "C10O368C18O395C23O437C28O449C33O475C38O501C43O516C56O510C84O555C98O555C103O609C105O625C112O653C117O678C121O702C126O728C131O743C144O737C172O782C179O795C185O807C199O819",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateAssertions node:internal/modules/esm/assert:55:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 387,
    "tm": 103504,
    "source": {
      "script": 401,
      "start": 1781,
      "end": 2908,
      "positions": "C12O1842C17O1842C26O1884C33O1897C37O1910C38O1940C48O2091C55O2433C66O2068C67O2080C68O2253C76O2258C83O2325C84O2337C85O2352C88O2399C93O2359C98O2405C99O2507C100O2519C101O2666C109O2671C116O2781C129O2787C134O2781C135O2856C138O2896C143O2856C149O2907",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "defaultGetSource node:internal/modules/esm/get_source:30:32",
    "type": "JS",
    "kind": "Unopt",
    "func": 388,
    "tm": 103635,
    "source": {
      "script": 413,
      "start": 874,
      "end": 1823,
      "positions": "C10O874C18O926C25O926C31O946C33O967C40O976C45O995C50O1010C62O1004C92O1053C99O1062C104O1095C111O1115C114O1140C119O1095C125O1155C127O1175C134O1181C139O1175C140O1228C147O1239C154O1259C161O1279C164O1279C171O1305C180O1268C188O1343C194O1390C201O1399C206O1426C213O1435C218O1470C223O1476C236O1470C262O1529C274O1519C304O1550C311O1599C324O1656C343O1599C350O1556C355O1550C356O1724C363O1734C372O1752C377O1759C382O1768C387O1768C393O1807C403O1821",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFile node:internal/fs/promises:858:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 389,
    "tm": 103812,
    "source": {
      "script": 414,
      "start": 23882,
      "end": 24203,
      "positions": "C10O23882C18O23902C23O23923C28O23912C35O23971C44O23987C46O24007C48O23996C53O24023C56O24030C69O24060C70O24064C73O24085C78O24064C82O24108C96O24114C109O24108C135O24141C141O24162C147O24194C152O24148C165O24201",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "checkAborted node:internal/fs/promises:372:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 390,
    "tm": 103889,
    "source": {
      "script": 414,
      "start": 8523,
      "end": 8622,
      "positions": "C0O8536C7O8546C16O8561C23O8582C35O8608C48O8567C53O8561C55O8621",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "open node:internal/fs/promises:502:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 391,
    "tm": 103959,
    "source": {
      "script": 414,
      "start": 12712,
      "end": 13018,
      "positions": "C10O12712C18O12736C23O12743C29O12789C34O12789C39O12813C55O12820C62O12858C69O12891C72O12899C79O12914C82O12925C87O12925C95O13001C104O12899C117O12885C142O12865C155O13016",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "link node:internal/modules/esm/module_job:69:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 392,
    "tm": 104275,
    "source": {
      "script": 400,
      "start": 1869,
      "end": 2800,
      "positions": "C4O1869C26O1889C36O1914C48O1903C73O1901C77O1935C89O1947C98O1965C100O1954C104O1935C108O2281C110O2281C112O2308C117O2313C122O2320C132O2320C138O2643C140O2679C151O2700C156O2696C162O2685C174O2679C199O2737C210O2759C218O2755C224O2744C236O2794",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "primordials.PromisePrototypeCatch node:internal/per_context/primordials:406:37",
    "type": "JS",
    "kind": "Unopt",
    "func": 393,
    "tm": 104369,
    "source": {
      "script": 12,
      "start": 11581,
      "end": 11668,
      "positions": "C0O11612C13O11612C18O11668",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set node:internal/modules/esm/module_map:23:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 394,
    "tm": 104465,
    "source": {
      "script": 399,
      "start": 733,
      "end": 1253,
      "positions": "C11O746C21O778C31O778C36O810C46O810C51O844C55O863C57O852C62O873C73O928C91O934C96O928C97O995C109O1012C124O1036C126O1032C137O1076C148O995C152O1133C154O1139C165O1139C178O1151C183O1151C188O1175C190O1198C194O1209C196O1222C210O1222C215O1249",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_map:9:63",
    "type": "JS",
    "kind": "Unopt",
    "func": 395,
    "tm": 104528,
    "source": {
      "script": 399,
      "start": 263,
      "end": 288,
      "positions": "C0O275C2O281C9O287",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/loader:405:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 396,
    "tm": 104567,
    "source": {
      "script": 398,
      "start": 12294,
      "end": 12312,
      "positions": "C0O12307C5O12307C9O12312",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "run node:internal/modules/esm/module_job:193:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 397,
    "tm": 104660,
    "source": {
      "script": 400,
      "start": 6985,
      "end": 8158,
      "positions": "C10O6985C18O7005C23O7005C35O6994C58O7040C61O7070C66O7104C71O7111C76O7111C90O7093C128O7169C133O7174C143O7181C152O7215C158O7253C163O7215C169O7273C182O7283C186O7318C196O7350C204O7322C211O7384C224O7394C228O7480C235O7511C240O7518C248O7480C259O7549C267O7599C272O7606C277O7549C292O7626C297O7680C302O7708C307O7715C312O7681C318O7747C325O7752C330O7778C344O7925C358O7868C364O7948C370O8027C376O7788C380O8104C382O8104C383O8123C388O8145C406O8154",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "instantiate node:internal/modules/esm/module_job:102:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 398,
    "tm": 104711,
    "source": {
      "script": 400,
      "start": 3188,
      "end": 3322,
      "positions": "C0O3206C6O3267C11O3267C15O3260C19O3305C23O3318",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "_instantiate node:internal/modules/esm/module_job:109:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 399,
    "tm": 104868,
    "source": {
      "script": 400,
      "start": 3344,
      "end": 6972,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addJobsToDependencyGraph node:internal/modules/esm/module_job:111:38",
    "type": "JS",
    "kind": "Unopt",
    "func": 400,
    "tm": 104952,
    "source": {
      "script": 400,
      "start": 3425,
      "end": 3722,
      "positions": "C10O3425C18O3454C23O3470C28O3470C35O3496C44O3503C45O3518C50O3530C55O3530C60O3591C72O3575C98O3605C109O3627C116O3654C121O3688C124O3654C132O3623C138O3612C150O3716",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "FileHandle node:internal/fs/promises:129:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 401,
    "tm": 105037,
    "source": {
      "script": 414,
      "start": 3142,
      "end": 3308,
      "positions": "C3O3161C11O3161C40O3174C45O3179C50O3188C54O3206C59O3211C67O3218C69O3242C77O3216C81O3256C86O3261C91O3268C95O3277C100O3282C104O3297C111O3307",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "MixedEventEmitter node:internal/event_target:960:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 402,
    "tm": 105083,
    "source": {
      "script": 46,
      "start": 25407,
      "end": 25537,
      "positions": "C0O25407C8O25425C15O25432C21O25467C25O25476C29O25467C41O25489C48O25511C54O25489C62O25536",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "readFileHandle node:internal/fs/promises:412:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 403,
    "tm": 105250,
    "source": {
      "script": 414,
      "start": 9796,
      "end": 11568,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get fd node:internal/fs/promises:142:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 404,
    "tm": 105308,
    "source": {
      "script": 414,
      "start": 3379,
      "end": 3409,
      "positions": "C0O3388C2O3400C4O3399C7O3405",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleFdClose node:internal/fs/promises:339:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 405,
    "tm": 105382,
    "source": {
      "script": 414,
      "start": 7697,
      "end": 8038,
      "positions": "C0O7697C23O7728C30O7761C43O7735C56O8036",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "allocUnsafeSlow node:buffer:385:50",
    "type": "JS",
    "kind": "Unopt",
    "func": 406,
    "tm": 105441,
    "source": {
      "script": 30,
      "start": 11263,
      "end": 11328,
      "positions": "C0O11274C5O11274C9O11294C14O11301C18O11326",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "createUnsafeBuffer node:internal/buffer:1059:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 407,
    "tm": 105484,
    "source": {
      "script": 31,
      "start": 30321,
      "end": 30430,
      "positions": "C0O30332C8O30344C15O30361C22O30368C39O30408C48O30420C70O30429",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:342:5",
    "type": "JS",
    "kind": "Unopt",
    "func": 408,
    "tm": 105552,
    "source": {
      "script": 414,
      "start": 7780,
      "end": 7839,
      "positions": "C0O7780C9O7792C21O7813C30O7792C35O7839",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "close node:internal/fs/promises:202:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 409,
    "tm": 105620,
    "source": {
      "script": 414,
      "start": 4505,
      "end": 5295,
      "positions": "C0O4517C7O4526C9O4525C15O4531C20O4547C27O4554C30O4571C31O4583C38O4592C40O4591C45O4616C52O4628C54O4627C57O4643C58O4655C65O4660C73O4666C77O4674C84O4683C86O4682C91O4690C96O4705C103O4710C108O4715C112O4727C119O4732C126O4749C136O4791C138O4790C142O4800C147O4800C157O4749C162O4747C168O4888C175O4893C182O4910C189O4951C199O4947C210O4910C215O4908C219O5240C222O5245C230O5245C235O5264C242O5276C244O5275C247O5291",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:418:43",
    "type": "JS",
    "kind": "Unopt",
    "func": 410,
    "tm": 105697,
    "source": {
      "script": 12,
      "start": 12165,
      "end": 12438,
      "positions": "C0O12165C13O12298C27O12298C32O12438",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:421:15",
    "type": "JS",
    "kind": "Unopt",
    "func": 411,
    "tm": 105739,
    "source": {
      "script": 12,
      "start": 12310,
      "end": 12434,
      "positions": "C0O12424C14O12324C20O12398C28O12405C34O12423C39O12424C45O12434",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "SafePromise node:internal/per_context/primordials:402:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 412,
    "tm": 105778,
    "source": {
      "script": 12,
      "start": 11505,
      "end": 11536,
      "positions": "C3O11518C7O11524C11O11518C26O11535",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/per_context/primordials:422:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 413,
    "tm": 105817,
    "source": {
      "script": 12,
      "start": 12340,
      "end": 12389,
      "positions": "C0O12350C16O12350C21O12389",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:216:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 414,
    "tm": 105868,
    "source": {
      "script": 414,
      "start": 4817,
      "end": 4859,
      "positions": "C0O4825C7O4830C11O4845C16O4858",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/promises:342:51",
    "type": "JS",
    "kind": "Unopt",
    "func": 415,
    "tm": 105901,
    "source": {
      "script": 414,
      "start": 7826,
      "end": 7838,
      "positions": "C0O7832C2O7838",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "moduleStrategy node:internal/modules/esm/translators:112:56",
    "type": "JS",
    "kind": "Unopt",
    "func": 416,
    "tm": 106004,
    "source": {
      "script": 416,
      "start": 3142,
      "end": 3581,
      "positions": "C0O3142C23O3168C36O3168C41O3212C46O3221C52O3242C59O3242C64O3278C76O3314C81O3278C85O3339C106O3339C112O3387C119O3398C124O3410C129O3414C134O3450C146O3532C150O3410C156O3565C166O3579",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "assertBufferSource node:internal/modules/esm/translators:74:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 417,
    "tm": 106062,
    "source": {
      "script": 416,
      "start": 2030,
      "end": 2423,
      "positions": "C0O2064C10O2115C11O2122C12O2177C15O2177C19O2137C24O2156C29O2196C35O2223C41O2253C42O2260C43O2267C50O2319C77O2273C82O2267",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyTypes node:internal/modules/esm/translators:22:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 418,
    "tm": 106099,
    "source": {
      "script": 416,
      "start": 396,
      "end": 490,
      "positions": "C0O403C6O424C10O438C11O441C17O457C24O455C30O488",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stringify node:internal/modules/esm/translators:90:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 419,
    "tm": 106145,
    "source": {
      "script": 416,
      "start": 2443,
      "end": 2643,
      "positions": "C0O2454C6O2484C8O2496C9O2499C20O2499C25O2553C33O2586C36O2582C45O2602C50O2561C56O2613C61O2628C66O2628C71O2641",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "TextDecoder node:internal/encoding:380:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 420,
    "tm": 106249,
    "source": {
      "script": 33,
      "start": 10320,
      "end": 11104,
      "positions": "C15O10320C21O10363C25O10395C35O10410C43O10395C48O10540C53O10540C58O10578C60O10609C69O10615C74O10609C75O10676C77O10685C81O10734C94O10742C103O10794C116O10806C125O10868C130O10868C136O10900C138O10934C147O10940C152O10934C153O10989C157O10994C161O11004C165O11018C169O11023C174O11032C178O11048C182O11053C187O11061C191O11076C195O11081C200O11092C205O11103",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getEncodingFromLabel node:internal/encoding:314:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 421,
    "tm": 107027,
    "source": {
      "script": 33,
      "start": 8669,
      "end": 8819,
      "positions": "C0O8693C5O8703C10O8703C16O8717C18O8740C20O8751C21O8754C26O8771C34O8801C39O8801C44O8775C49O8771C54O8817",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "decode node:internal/encoding:409:11",
    "type": "JS",
    "kind": "Unopt",
    "func": 422,
    "tm": 107127,
    "source": {
      "script": 33,
      "start": 11117,
      "end": 11939,
      "positions": "C8O11126C25O11155C30O11155C34O11184C41O11188C47O11223C52O11231C56O11243C61O11244C69O11270C76O11275C82O11311C102O11317C107O11311C108O11487C118O11502C126O11487C131O11632C133O11641C137O11688C153O11701C159O11743C168O11756C170O11755C180O11743C186O11787C190O11826C197O11875C207O11832C212O11826C213O11916C221O11916C226O11933",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "validateDecoder node:internal/encoding:65:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 423,
    "tm": 107173,
    "source": {
      "script": 33,
      "start": 1293,
      "end": 1394,
      "positions": "C0O1303C7O1326C9O1325C14O1336C19O1350C29O1356C34O1350C36O1393",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "slice node:buffer:605:12",
    "type": "JS",
    "kind": "Unopt",
    "func": 424,
    "tm": 107234,
    "source": {
      "script": 30,
      "start": 17043,
      "end": 17089,
      "positions": "C0O17068C5O17068C11O17089",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/translators:42:63",
    "type": "JS",
    "kind": "Unopt",
    "func": 425,
    "tm": 107278,
    "source": {
      "script": 416,
      "start": 1017,
      "end": 1042,
      "positions": "C0O1029C2O1035C9O1041",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " file:///media/miguel/data/4-BackEnd/Desafios/desafio16/src/index.js:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 426,
    "tm": 107386,
    "source": {
      "script": 437,
      "start": 0,
      "end": 943,
      "positions": "C10O0C15O0C35O0C39O283C45O283C49O299C60O299C66O335C77O335C83O379C88O385C94O393C99O393C104O379C109O408C114O414C120O422C130O422C136O408C141O461C146O467C152O467C156O461C161O481C166O487C172O487C176O481C181O508C186O514C197O566C202O576C211O576C225O514C230O508C235O670C243O696C249O670C255O718C263O744C269O718C275O762C283O788C289O762C295O806C303O832C309O806C315O860C319O868C326O872C336O890C341O898C346O890C353O943",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/modules/esm/module_job:78:41",
    "type": "JS",
    "kind": "Unopt",
    "func": 427,
    "tm": 107544,
    "source": {
      "script": 400,
      "start": 2325,
      "end": 2633,
      "positions": "C10O2325C18O2384C23O2389C28O2396C37O2407C40O2396C46O2440C51O2445C56O2452C70O2452C76O2506C85O2525C88O2506C93O2574C103O2574C129O2611C141O2625",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getBaseURL node:internal/modules/esm/loader:279:13",
    "type": "JS",
    "kind": "Unopt",
    "func": 428,
    "tm": 107602,
    "source": {
      "script": 398,
      "start": 7673,
      "end": 8263,
      "positions": "C0O7685C10O7696C21O7745C27O7745C34O7973C45O7995C50O7991C63O8018C67O7979C73O8024C79O8115C83O8154C95O8210C108O8160C113O8154C114O8248C116O8259",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParseError node:internal/url:562:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 429,
    "tm": 107668,
    "source": {
      "script": 74,
      "start": 15369,
      "end": 15423,
      "positions": "C0O15388C7O15394C12O15388",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "NodeError node:internal/errors:348:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 430,
    "tm": 107858,
    "source": {
      "script": 17,
      "start": 9749,
      "end": 10658,
      "positions": "C0O9749C3O9779C10O9785C15O9806C20O9810C25O9844C33O9866C37O9889C40O9889C46O9959C51O9963C56O9997C65O10019C69O10048C83O10048C89O10082C96O10105C105O10121C109O10136C121O10263C128O10280C142O10393C147O10403C162O10082C167O10583C174O10583C178O10619C180O10630C184O10641C186O10654",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:194:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 431,
    "tm": 110370,
    "source": {
      "script": 17,
      "start": 5474,
      "end": 5731,
      "positions": "C0O5494C7O5525C13O5494C19O5554C21O5584C28O5610C31O5591C35O5617C36O5625C44O5632C51O5691C57O5711C62O5715C63O5729",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getMessage node:internal/errors:416:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 432,
    "tm": 110466,
    "source": {
      "script": 17,
      "start": 11695,
      "end": 12507,
      "positions": "C0O11729C5O11738C10O11738C16O11751C30O11762C37O11758C43O11793C49O11830C54O11848C59O11863C63O11855C72O11919C83O11963C101O12025C115O11983C119O11830C124O12047C138O12054C143O12084C144O12119C149O12141C154O12120C164O12168C169O12178C174O12214C178O12205C187O12235C198O12279C218O12335C228O12299C232O12178C237O12370C243O12377C248O12388C250O12399C251O12403C256O12403C261O12439C269O12459C273O12484C283O12446C288O12505",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1342:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 433,
    "tm": 110518,
    "source": {
      "script": 17,
      "start": 47145,
      "end": 47290,
      "positions": "C0O47157C2O47168C6O47267C8O47288",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:460:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 434,
    "tm": 110590,
    "source": {
      "script": 17,
      "start": 12899,
      "end": 13269,
      "positions": "C0O12945C3O12945C7O12983C9O13022C14O13050C21O13042C27O13073C32O13097C35O13095C39O13117C44O13117C48O13173C52O13204C59O13228C61O13226C65O13254C67O13265",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "packageResolve node:internal/modules/esm/resolve:854:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 435,
    "tm": 110794,
    "source": {
      "script": 402,
      "start": 27554,
      "end": 29620,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "parsePackageName node:internal/modules/esm/resolve:815:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 436,
    "tm": 110899,
    "source": {
      "script": 402,
      "start": 26342,
      "end": 27369,
      "positions": "C0O26385C8O26385C14O26450C16O26473C18O26482C19O26495C25O26499C30O26514C32O26535C34O26554C39O26574C45O26581C50O26596C54O26641C64O26721C71O26658C77O26760C79O26775C90O26800C101O26800C107O26951C114O26975C117O26955C124O27027C126O27056C130O27085C140O27173C143O27173C153O27091C158O27085C159O27225C164O27247C175O27265C178O27265C183O27229C187O27318C194O27327C200O27340C206O27356C212O27367",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/url:698:12",
    "type": "JS",
    "kind": "Baseline",
    "func": 338,
    "tm": 111107,
    "source": {
      "script": 74,
      "start": 19380,
      "end": 20630,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "URL node:internal/url:635:14",
    "type": "JS",
    "kind": "Baseline",
    "func": 327,
    "tm": 111142,
    "source": {
      "script": 74,
      "start": 17580,
      "end": 17973,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/validators:148:3",
    "type": "JS",
    "kind": "Baseline",
    "func": 117,
    "tm": 111167,
    "source": {
      "script": 21,
      "start": 4139,
      "end": 4698,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get protocol node:internal/url:794:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 345,
    "tm": 111188,
    "source": {
      "script": 74,
      "start": 21897,
      "end": 22005,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get pathname node:internal/url:924:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 351,
    "tm": 111214,
    "source": {
      "script": 74,
      "start": 25171,
      "end": 25431,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initSearchParams node:internal/url:1081:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 331,
    "tm": 111235,
    "source": {
      "script": 74,
      "start": 29326,
      "end": 29441,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "uvErrmapGet node:internal/errors:453:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 437,
    "tm": 111380,
    "source": {
      "script": 17,
      "start": 12682,
      "end": 12814,
      "positions": "C0O12693C3O12705C9O12703C15O12717C30O12738C33O12748C38O12748C42O12734C46O12765C53O12788C56O12798C61O12772C66O12812",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "lazyUv node:internal/errors:446:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 438,
    "tm": 111423,
    "source": {
      "script": 17,
      "start": 12540,
      "end": 12605,
      "positions": "C0O12547C14O12561C21O12557C27O12586C31O12603",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "legacyMainResolve node:internal/modules/esm/resolve:280:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 439,
    "tm": 111798,
    "source": {
      "script": 402,
      "start": 8308,
      "end": 10121,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fileExists node:internal/modules/esm/resolve:264:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 440,
    "tm": 111885,
    "source": {
      "script": 402,
      "start": 7815,
      "end": 7894,
      "positions": "C0O7825C5O7841C10O7832C18O7872C23O7874C35O7892",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "emitLegacyIndexDeprecation node:internal/modules/esm/resolve:114:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 441,
    "tm": 112006,
    "source": {
      "script": 402,
      "start": 3339,
      "end": 4400,
      "positions": "C0O3392C5O3392C10O3430C12O3441C17O3459C18O3466C19O3482C24O3482C29O3520C36O3538C47O3534C53O3520C58O3584C63O3584C68O3607C72O3621C75O3629C85O3659C98O3696C101O3696C121O3807C124O3842C129O3807C147O3878C157O3720C163O3947C173O3629C180O4047C183O4055C193O4138C206O4197C209O4232C214O4197C232O4259C249O4055C255O4399",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "%2F|%5C",
    "timestamp": 112133,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])",
    "timestamp": 112295,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "^\\.|%|\\\\",
    "timestamp": 112509,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "get origin node:internal/url:769:13",
    "type": "JS",
    "kind": "Baseline",
    "func": 353,
    "tm": 112606,
    "source": {
      "script": 74,
      "start": 21255,
      "end": 21881,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get href node:internal/url:752:11",
    "type": "JS",
    "kind": "Baseline",
    "func": 337,
    "tm": 112633,
    "source": {
      "script": 74,
      "start": 20812,
      "end": 20917,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toPathIfFileURL node:internal/url:1561:25",
    "type": "JS",
    "kind": "Baseline",
    "func": 197,
    "tm": 112651,
    "source": {
      "script": 74,
      "start": 43738,
      "end": 43859,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "dateFromMs node:internal/fs/utils:461:20",
    "type": "JS",
    "kind": "Baseline",
    "func": 364,
    "tm": 112670,
    "source": {
      "script": 77,
      "start": 11553,
      "end": 11598,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:447:24",
    "type": "JS",
    "kind": "Baseline",
    "func": 361,
    "tm": 112689,
    "source": {
      "script": 77,
      "start": 11041,
      "end": 11100,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get hostname node:internal/url:882:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 355,
    "tm": 112710,
    "source": {
      "script": 74,
      "start": 24113,
      "end": 24225,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:681:42",
    "type": "JS",
    "kind": "Baseline",
    "func": 217,
    "tm": 112729,
    "source": {
      "script": 77,
      "start": 18513,
      "end": 18648,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "splitRoot node:fs:2421:33",
    "type": "JS",
    "kind": "Baseline",
    "func": 202,
    "tm": 112772,
    "source": {
      "script": 73,
      "start": 64571,
      "end": 64763,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "extname node:path:1385:10",
    "type": "JS",
    "kind": "Baseline",
    "func": 377,
    "tm": 112812,
    "source": {
      "script": 71,
      "start": 41976,
      "end": 43659,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:194:40",
    "type": "JS",
    "kind": "Baseline",
    "func": 431,
    "tm": 112836,
    "source": {
      "script": 17,
      "start": 5474,
      "end": 5731,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "statSync node:fs:1579:18",
    "type": "JS",
    "kind": "Baseline",
    "func": 357,
    "tm": 113198,
    "source": {
      "script": 73,
      "start": 40395,
      "end": 40799,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:358:35",
    "type": "JS",
    "kind": "Baseline",
    "func": 200,
    "tm": 113231,
    "source": {
      "script": 77,
      "start": 8604,
      "end": 9193,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/fs/utils:669:38",
    "type": "JS",
    "kind": "Baseline",
    "func": 199,
    "tm": 113250,
    "source": {
      "script": 77,
      "start": 18198,
      "end": 18468,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "toString node:internal/url:746:11",
    "type": "JS",
    "kind": "Baseline",
    "func": 375,
    "tm": 113267,
    "source": {
      "script": 74,
      "start": 20695,
      "end": 20800,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "fileURLToPath node:internal/url:1478:23",
    "type": "JS",
    "kind": "Baseline",
    "func": 352,
    "tm": 113290,
    "source": {
      "script": 74,
      "start": 40537,
      "end": 40862,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase node:internal/fs/utils:401:19",
    "type": "JS",
    "kind": "Baseline",
    "func": 363,
    "tm": 113307,
    "source": {
      "script": 77,
      "start": 9948,
      "end": 10237,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats node:internal/fs/utils:496:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 362,
    "tm": 113329,
    "source": {
      "script": 77,
      "start": 12784,
      "end": 13312,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "%[dfijoOs]",
    "timestamp": 114671,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "lazyInternalUtilInspect node:internal/errors:183:33",
    "type": "JS",
    "kind": "Unopt",
    "func": 442,
    "tm": 114716,
    "source": {
      "script": 17,
      "start": 5242,
      "end": 5338,
      "positions": "C0O5249C14O5273C21O5269C27O5309C31O5336",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "format node:internal/util/inspect:2026:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 443,
    "tm": 114901,
    "source": {
      "script": 26,
      "start": 68030,
      "end": 68096,
      "positions": "C0O68030C3O68044C8O68051C13O68094",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatWithOptionsInternal node:internal/util/inspect:2054:35",
    "type": "JS",
    "kind": "Unopt",
    "func": 444,
    "tm": 118031
  },
  {
    "name": "NodeError node:internal/errors:348:28",
    "type": "JS",
    "kind": "Baseline",
    "func": 430,
    "tm": 118169,
    "source": {
      "script": 17,
      "start": 9749,
      "end": 10658,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:415:43",
    "type": "JS",
    "kind": "Baseline",
    "func": 365,
    "tm": 118195,
    "source": {
      "script": 77,
      "start": 10281,
      "end": 10330,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isBigUint64Array node:internal/util/types:53:26",
    "type": "JS",
    "kind": "Baseline",
    "func": 360,
    "tm": 118212,
    "source": {
      "script": 23,
      "start": 1371,
      "end": 1460,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:931:49",
    "type": "JS",
    "kind": "Baseline",
    "func": 343,
    "tm": 118230,
    "source": {
      "script": 402,
      "start": 30114,
      "end": 30249,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:165:3",
    "type": "JS",
    "kind": "Baseline",
    "func": 356,
    "tm": 118248,
    "source": {
      "script": 402,
      "start": 5025,
      "end": 5091,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:518:46",
    "type": "JS",
    "kind": "Baseline",
    "func": 366,
    "tm": 118285,
    "source": {
      "script": 77,
      "start": 13661,
      "end": 13883,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "StatsBase.isFile node:internal/fs/utils:419:38",
    "type": "JS",
    "kind": "Baseline",
    "func": 367,
    "tm": 118305,
    "source": {
      "script": 77,
      "start": 10370,
      "end": 10419,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "onParsePathComplete node:internal/url:602:29",
    "type": "JS",
    "kind": "Baseline",
    "func": 336,
    "tm": 118325,
    "source": {
      "script": 74,
      "start": 16636,
      "end": 17102,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "set pathname node:internal/url:935:15",
    "type": "JS",
    "kind": "Baseline",
    "func": 333,
    "tm": 118348,
    "source": {
      "script": 74,
      "start": 25447,
      "end": 25716,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:460:35",
    "type": "JS",
    "kind": "Baseline",
    "func": 434,
    "tm": 118373,
    "source": {
      "script": 17,
      "start": 12899,
      "end": 13269,
      "positions": "",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveAsCommonJS node:internal/modules/esm/resolve:975:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 445,
    "tm": 118465,
    "source": {
      "script": 402,
      "start": 31405,
      "end": 32836,
      "positions": "C3O31457C8O31457C13O31505C25O31505C31O31538C33O31556C36O31566C41O31566C46O31554C50O31609C55O31619C68O31619C74O31754C77O31758C83O31798C88O31806C94O32093C104O32136C111O32098C118O32154C123O32166C132O32172C139O32200C142O32204C148O32339C156O32339C163O32375C167O32400C172O32400C178O32442C180O32452C185O32470C190O32478C196O32613C199O32625C206O32634C211O32655C218O32696C226O32708C238O32692C250O32663C256O32787C258O32800C261O32817C262O32830",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveExports node:internal/modules/cjs/loader:473:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 446,
    "tm": 118608,
    "source": {
      "script": 395,
      "start": 13610,
      "end": 14286,
      "positions": "C0O13748C7O13778C10O13748C20O13716C27O13725C38O13804C42O13819C43O13826C44O13845C49O13850C54O13850C61O13887C64O13887C69O13911C74O13918C87O13955C92O13984C97O14015C102O14037C106O14015C116O14061C124O14093C130O13984C141O13962C146O14124C158O14149C161O14155C168O14160C173O14196C180O14240C184O14202C189O14196C190O14266C192O14266C194O14285",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "promiseRejectHandler node:internal/process/promises:109:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 447,
    "tm": 118792,
    "source": {
      "script": 39,
      "start": 2989,
      "end": 3529,
      "positions": "C0O3017C6O3066C9O3092C15O3090C21O3128C23O3153C35O3247C44O3335C53O3435C62O3188C65O3188C70O3231C72O3286C75O3286C79O3319C81O3371C93O3371C98O3419C100O3470C112O3470C117O3517C120O3528",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getUnhandledRejectionsMode node:internal/process/promises:91:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 448,
    "tm": 119284,
    "source": {
      "script": 39,
      "start": 2460,
      "end": 2958,
      "positions": "C0O2494C6O2494C11O2475C16O2525C19O2533C61O2600C65O2634C66O2658C70O2696C71O2722C75O2756C76O2781C80O2814C81O2854C85O2899C86O2919C90O2952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "unhandledRejection node:internal/process/promises:144:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 449,
    "tm": 119345,
    "source": {
      "script": 39,
      "start": 3982,
      "end": 4514,
      "positions": "C0O4017C5O4216C10O4239C15O4243C22O4258C28O4277C35O4277C48O4331C58O4343C62O4239C68O4425C75O4444C78O4425C83O4484C88O4484C93O4513",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasRejectionToWarn node:internal/process/promises:77:31",
    "type": "JS",
    "kind": "Unopt",
    "func": 450,
    "tm": 119403,
    "source": {
      "script": 39,
      "start": 2144,
      "end": 2204,
      "positions": "C0O2156C7O2165C12O2188C19O2186C24O2203",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handledRejection node:internal/process/promises:164:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 451,
    "tm": 119476,
    "source": {
      "script": 39,
      "start": 4541,
      "end": 5347,
      "positions": "C0O4575C5O4598C10O4598C16O4614C18O4651C23O4674C28O4680C33O4711C39O4735C44O4903C57O5013C67O4946C73O4903C79O5028C81O5041C85O5083C87O5094C91O5107C98O5126C108O5152C114O5161C118O5107C123O5179C128O5179C132O5214C133O5221C134O5234C139O5261C145O5266C152O5275C155O5298C161O5305C166O5316C171O5316C176O5346",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/errors:1424:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 452,
    "tm": 119632,
    "source": {
      "script": 17,
      "start": 50014,
      "end": 50115,
      "positions": "C17O50052C22O50074C35O50083C48O50106C52O50113",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^((?:@[^/\\\\%]+\\/)?[^./\\\\%][^/\\\\%]*)(\\/.*)?$",
    "timestamp": 119783,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "commonjsStrategy node:internal/modules/esm/translators:148:60",
    "type": "JS",
    "kind": "Unopt",
    "func": 453,
    "tm": 120227,
    "source": {
      "script": 416,
      "start": 4475,
      "end": 5887,
      "positions": "C4O4475C40O4561C52O4592C57O4561C61O4618C68O4636C77O4654C85O4650C91O4636C96O4618C98O4667C106O4686C120O4730C126O4697C131O4695C133O4753C141O4768C146O4774C157O4768C182O4824C190O4824C195O4800C201O4808C207O4887C210O4899C218O4899C227O4924C238O4954C241O4954C295O4971C307O5009C317O4978C330O5885",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initCJSParse node:internal/modules/esm/translators:58:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 454,
    "tm": 120313,
    "source": {
      "script": 416,
      "start": 1604,
      "end": 1869,
      "positions": "C10O1604C18O1611C26O1657C32O1668C37O1715C44O1666C52O1770C58O1770C63O1746C68O1753C73O1834C84O1828C107O1846C109O1855C124O1868",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 455,
    "tm": 120603,
    "source": {
      "script": 438,
      "start": 0,
      "end": 33616,
      "positions": "C0O0C4O33616",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 456,
    "tm": 121841,
    "source": {
      "script": 438,
      "start": 0,
      "end": 33616,
      "positions": "C0O0C42O13C44O26C48O33C50O45C54O55C55O55C57O65C60O73C64O88C75O84C81O105C88O69C95O112C98O66C101O65C103O1219C104O1219C107O33615",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "init node:internal/deps/cjs-module-lexer/dist/lexer:1:1235",
    "type": "JS",
    "kind": "Unopt",
    "func": 457,
    "tm": 122136,
    "source": {
      "script": 438,
      "start": 1234,
      "end": 33616,
      "positions": "C0O1237C11O33612C17O1249C23O33615",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1252",
    "type": "JS",
    "kind": "Unopt",
    "func": 458,
    "tm": 122159,
    "source": {
      "script": 438,
      "start": 1251,
      "end": 33611,
      "positions": "C10O1251C18O1269C22O1287C30O1297C37O33440C44O33481C48O33492C57O33497C67O33492C75O33525C79O33532C87O33532C94O1287C107O1269C133O33574C137O33592C142O33592C155O33574C178O33571C183O33607C185O33608C200O33610",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:425:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 459,
    "tm": 122194,
    "source": {
      "script": 388,
      "start": 13072,
      "end": 13104,
      "positions": "C0O13083C4O13098",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "byteLength node:buffer:643:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 460,
    "tm": 122229,
    "source": {
      "script": 30,
      "start": 18534,
      "end": 18585,
      "positions": "C0O18546C3O18578C8O18546C13O18585",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "base64ByteLength node:buffer:579:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 461,
    "tm": 122276,
    "source": {
      "script": 30,
      "start": 16219,
      "end": 16462,
      "positions": "C0O16256C7O16297C11O16260C19O16302C24O16316C30O16327C32O16337C39O16344C44O16381C48O16344C56O16386C61O16400C67O16435C69O16449C72O16454C75O16460",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "resolveError node:internal/process/promises:134:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 462,
    "tm": 122453,
    "source": {
      "script": 39,
      "start": 3677,
      "end": 3953,
      "positions": "C0O3677C17O3813C22O3821C32O3821C38O3952",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "nextTick node:internal/process/task_queues:103:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 463,
    "tm": 122553,
    "source": {
      "script": 38,
      "start": 2582,
      "end": 3438,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:95:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 464,
    "tm": 122783,
    "source": {
      "script": 40,
      "start": 3637,
      "end": 3677,
      "positions": "C0O3658C5O3663C10O3663C14O3673",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isEmpty node:internal/fixed_queue:67:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 465,
    "tm": 122970,
    "source": {
      "script": 40,
      "start": 3084,
      "end": 3129,
      "positions": "C0O3105C5O3118C9O3109C12O3125",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "setHasTickScheduled node:internal/process/task_queues:51:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 466,
    "tm": 123000,
    "source": {
      "script": 38,
      "start": 1084,
      "end": 1142,
      "positions": "C0O1096C7O1105C12O1126C19O1124C24O1141",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "newAsyncId node:internal/async_hooks:415:20",
    "type": "JS",
    "kind": "Unopt",
    "func": 467,
    "tm": 123067,
    "source": {
      "script": 19,
      "start": 14452,
      "end": 14503,
      "positions": "C0O14459C7O14484C16O14499C22O14501",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getDefaultTriggerAsyncId node:internal/async_hooks:431:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 468,
    "tm": 124040,
    "source": {
      "script": 19,
      "start": 14911,
      "end": 15168,
      "positions": "C0O14948C7O14964C9O14963C13O15057C14O15083C19O15092C26O15115C28O15114C31O15134C32O15137C34O15166",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "initHooksExist node:internal/async_hooks:477:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 469,
    "tm": 124099,
    "source": {
      "script": 19,
      "start": 16132,
      "end": 16164,
      "positions": "C0O16139C5O16155C8O16146C12O16162",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasHooks node:internal/async_hooks:469:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 470,
    "tm": 124140,
    "source": {
      "script": 19,
      "start": 16000,
      "end": 16046,
      "positions": "C0O16010C7O16034C12O16040C15O16044",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push node:internal/fixed_queue:99:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 471,
    "tm": 124187,
    "source": {
      "script": 40,
      "start": 3685,
      "end": 3945,
      "positions": "C0O3707C5O3712C10O3712C16O3871C23O3887C26O3883C32O3881C38O3864C42O3925C47O3930C52O3930C58O3944",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isFull node:internal/fixed_queue:71:9",
    "type": "JS",
    "kind": "Unopt",
    "func": 472,
    "tm": 124233,
    "source": {
      "script": 40,
      "start": 3139,
      "end": 3200,
      "positions": "C0O3162C4O3166C10O3173C12O3171C16O3189C20O3180C23O3196",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "push node:internal/fixed_queue:75:7",
    "type": "JS",
    "kind": "Unopt",
    "func": 473,
    "tm": 124277,
    "source": {
      "script": 40,
      "start": 3208,
      "end": 3291,
      "positions": "C0O3226C5O3236C12O3241C16O3270C20O3274C26O3281C28O3279C31O3262C36O3290",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasUncaughtExceptionCaptureCallback node:internal/process/execution:119:45",
    "type": "JS",
    "kind": "Unopt",
    "func": 474,
    "tm": 124383,
    "source": {
      "script": 70,
      "start": 3448,
      "end": 3505,
      "positions": "C0O3455C5O3484C10O3494C11O3503",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/process/execution:137:10",
    "type": "JS",
    "kind": "Unopt",
    "func": 475,
    "tm": 124926,
    "source": {
      "script": 70,
      "start": 4337,
      "end": 6598,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "clearDefaultTriggerAsyncId node:internal/async_hooks:440:36",
    "type": "JS",
    "kind": "Unopt",
    "func": 476,
    "tm": 124990,
    "source": {
      "script": 19,
      "start": 15206,
      "end": 15260,
      "positions": "C0O15213C7O15229C12O15253C17O15259",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "handleProcessExit node:internal/modules/esm/handle_process_exit:6:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 477,
    "tm": 125043,
    "source": {
      "script": 37,
      "start": 244,
      "end": 277,
      "positions": "C0O251C13O268C18O276",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "beforeInspector node:internal/errors:740:18",
    "type": "JS",
    "kind": "Unopt",
    "func": 478,
    "tm": 125145,
    "source": {
      "script": 17,
      "start": 22188,
      "end": 22564,
      "positions": "C0O22202C2O22219C4O22218C11O22286C15O22292C19O22398C21O22418C23O22417C27O22447C31O22410C41O22554C45O22560",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "prepareStackTrace node:internal/errors:91:27",
    "type": "JS",
    "kind": "Unopt",
    "func": 479,
    "tm": 125307,
    "source": {
      "script": 17,
      "start": 2179,
      "end": 3667,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "maybeOverridePrepareStackTrace node:internal/errors:136:40",
    "type": "JS",
    "kind": "Unopt",
    "func": 480,
    "tm": 125403,
    "source": {
      "script": 17,
      "start": 3709,
      "end": 4416,
      "positions": "C0O3937C7O3942C18O4002C23O4008C28O4008C34O4040C35O4263C40O4291C48O4331C53O4355C58O4355C64O4387C65O4395C69O4414",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "afterInspector node:internal/errors:754:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 481,
    "tm": 125573,
    "source": {
      "script": 17,
      "start": 22582,
      "end": 23970,
      "positions": "C0O22624C5O22651C7O23133C10O23145C17O23154C22O23188C28O23188C33O23209C38O23210C43O23248C50O23266C55O23291C62O23266C70O23338C73O23248C79O23353C80O23360C86O23364C93O23377C101O23381C106O23400C108O23537C111O23537C115O23451C125O23507C130O23583C140O23617C145O23640C153O23641C161O23660C172O23692C177O23715C182O23716C194O23798C201O23815C207O23868C210O23884C215O23899C223O23868C232O23790C237O23918C240O23939C242O23960",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/tty:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 482,
    "tm": 125872,
    "source": {
      "script": 439,
      "start": 0,
      "end": 6446,
      "positions": "C0O0C4O6446",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": " node:internal/tty:1:1",
    "type": "JS",
    "kind": "Unopt",
    "func": 483,
    "tm": 126325,
    "source": {
      "script": 439,
      "start": 0,
      "end": 6446,
      "positions": "C0O0C69O1186C75O1208C81O1231C87O1255C93O1329C99O1329C104O1309C110O1366C111O1366C113O1395C115O1395C117O1416C119O1416C121O1438C123O1438C125O1460C127O1460C129O1877C136O1890C142O1913C148O1937C154O1960C160O1983C166O2005C172O2026C178O2050C184O2074C190O2096C196O2119C202O2140C208O2163C214O2182C220O2287C226O2379C232O1877C234O2420C328O2420C330O2541C331O2541C333O6395C340O6416C346O6433C352O6410C357O6445",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "hasColors node:internal/tty:222:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 484,
    "tm": 126552,
    "source": {
      "script": 439,
      "start": 6138,
      "end": 6393,
      "positions": "C0O6155C18O6264C21O6281C27O6308C41O6308C46O6351C52O6372C56O6369C59O6364C62O6391",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getColorDepth node:internal/tty:106:23",
    "type": "JS",
    "kind": "Unopt",
    "func": 485,
    "tm": 126777
  },
  {
    "name": "get node:internal/util/inspect:352:6",
    "type": "JS",
    "kind": "Unopt",
    "func": 486,
    "tm": 126894,
    "source": {
      "script": 26,
      "start": 10608,
      "end": 10650,
      "positions": "C0O10617C4O10646",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "inspect node:internal/util/inspect:292:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 487,
    "tm": 127044,
    "source": {
      "script": 26,
      "start": 8503,
      "end": 10513,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatValue node:internal/util/inspect:745:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 488,
    "tm": 127295,
    "source": {
      "script": 26,
      "start": 22499,
      "end": 25201,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatRaw node:internal/util/inspect:823:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 489,
    "tm": 127829
  },
  {
    "name": "getConstructorName node:internal/util/inspect:567:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 490,
    "tm": 128006,
    "source": {
      "script": 26,
      "start": 16910,
      "end": 18143,
      "positions": "C0O16955C2O16981C7O16999C13O17002C16O17002C22O17054C30O17054C36O17110C38O17168C46O17211C51O17217C58O17222C66O17269C71O17240C78O17285C84O17338C91O17359C94O17374C99O17389C104O17395C109O17374C116O17413C127O17457C138O17413C143O17535C148O17541C152O17546C153O17558C158O17564C164O17595C168O17633C173O16988C176O17664C180O17695C181O17707C182O17727C187O17727C192O17786C196O17780C201O17799C207O17821C216O17857C217O17885C222O17939C235O17885C241O17960C243O17992C256O18041C262O18067C268O18087C272O18010C287O18100C288O18108C300O18126C310O18141",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isInstanceof node:internal/util/inspect:559:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 491,
    "tm": 128056,
    "source": {
      "script": 26,
      "start": 16784,
      "end": 16881,
      "positions": "C3O16814C5O16828C8O16845C11O16862C12O16875",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getKeys node:internal/util/inspect:688:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 492,
    "tm": 128121,
    "source": {
      "script": 26,
      "start": 20605,
      "end": 21580,
      "positions": "C0O20605C9O20633C11O20657C21O20657C26O20695C30O20717C40O20724C45O20774C51O20781C56O20794C63O20794C73O21154C83O21161C91O21159C101O21206C112O21213C118O21213C127O21239C134O21244C143O21281C151O21281C156O21206C160O21320C172O21327C179O21383C185O21390C190O21420C195O21484C206O21514C209O21514C215O21484C220O21566C222O21578",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "filter node:internal/util/inspect:709:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 493,
    "tm": 128172,
    "source": {
      "script": 26,
      "start": 21420,
      "end": 21476,
      "positions": "C0O21429C10O21429C15O21476",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isError node:internal/util:80:17",
    "type": "JS",
    "kind": "Unopt",
    "func": 494,
    "tm": 128208,
    "source": {
      "script": 22,
      "start": 1846,
      "end": 2080,
      "positions": "C0O2032C5O2039C13O2072C15O2061C18O2078",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatError node:internal/util/inspect:1284:21",
    "type": "JS",
    "kind": "Unopt",
    "func": 495,
    "tm": 128332,
    "source": {
      "script": 26,
      "start": 41717,
      "end": 43703,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getStackString node:internal/util/inspect:1215:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 496,
    "tm": 128392,
    "source": {
      "script": 26,
      "start": 39428,
      "end": 39515,
      "positions": "C0O39453C8O39461C11O39474C16O39461C24O39483C27O39483C31O39513",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "removeDuplicateErrorKeys node:internal/util/inspect:1272:34",
    "type": "JS",
    "kind": "Unopt",
    "func": 497,
    "tm": 128448,
    "source": {
      "script": 26,
      "start": 41351,
      "end": 41695,
      "positions": "C0O41388C6O41407C12O41414C17O41446C46O41438C74O41438C77O41503C82O41503C88O41596C90O41606C98O41622C105O41634C109O41622C116O41658C124O41658C130O41427C194O41694",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "improveStack node:internal/util/inspect:1239:22",
    "type": "JS",
    "kind": "Unopt",
    "func": 498,
    "tm": 128537,
    "source": {
      "script": 26,
      "start": 40256,
      "end": 41316,
      "positions": "C0O40444C5O40455C9O40495C17O40495C24O40528C29O40528C36O40561C43O40568C50O40584C56O40590C63O40606C69O40612C74O40645C77O40658C81O40712C91O40712C98O40781C108O40781C114O40821C118O40847C126O40880C131O40894C138O40951C150O40951C156O40988C166O40989C173O41007C175O41016C180O41047C185O41047C192O41073C193O41081C198O41100C210O41122C218O41158C222O41184C227O41184C240O41231C252O41253C263O41267C268O41267C279O41301C281O41314",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "getStackFrames node:internal/util/inspect:1219:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 499,
    "tm": 128623,
    "source": {
      "script": 26,
      "start": 39540,
      "end": 40233,
      "positions": "C0O39583C8O39583C14O39662C22O39671C25O39683C30O39671C36O39716C39O39735C44O39716C49O39782C57O39782C63O39807C65O39827C70O39874C77O39896C81O39874C87O39900C95O39901C101O39944C104O39944C110O39928C115O39933C120O39995C121O40003C126O40034C128O40038C132O40063C137O40074C148O40137C155O40151C159O40169C167O40169C180O40137C185O40217C187O40231",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "exists node:internal/bootstrap/loaders:242:16",
    "type": "JS",
    "kind": "Unopt",
    "func": 500,
    "tm": 128749,
    "source": {
      "script": 15,
      "start": 7405,
      "end": 7452,
      "positions": "C0O7416C5O7436C10O7440C15O7440C20O7448",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "stylizeWithColor node:internal/util/inspect:540:26",
    "type": "JS",
    "kind": "Unopt",
    "func": 501,
    "tm": 128799,
    "source": {
      "script": 26,
      "start": 16346,
      "end": 16587,
      "positions": "C0O16381C3O16389C10O16395C14O16410C16O16455C19O16463C26O16469C30O16482C32O16513C36O16535C52O16542C65O16560C78O16567C79O16574C81O16585",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "get node:internal/util/inspect:416:8",
    "type": "JS",
    "kind": "Unopt",
    "func": 502,
    "tm": 128831,
    "source": {
      "script": 26,
      "start": 12605,
      "end": 12642,
      "positions": "C0O12616C2O12627C5O12636",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "^ {4}at (?:[^/\\\\(]+ \\(|)node:(.+):\\d+:\\d+\\)?$",
    "timestamp": 128902,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "getEmptyFormatArray node:internal/util/inspect:555:29",
    "type": "JS",
    "kind": "Unopt",
    "func": 503,
    "tm": 128956,
    "source": {
      "script": 26,
      "start": 16742,
      "end": 16761,
      "positions": "C0O16749C2O16759",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatProperty node:internal/util/inspect:1813:24",
    "type": "JS",
    "kind": "Unopt",
    "func": 504,
    "tm": 129122
  },
  {
    "name": "isUndetectableObject node:internal/util/inspect:158:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 505,
    "tm": 129197,
    "source": {
      "script": 26,
      "start": 3116,
      "end": 3166,
      "positions": "C0O3148C9O3153C10O3166",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "formatPrimitive node:internal/util/inspect:1522:25",
    "type": "JS",
    "kind": "Unopt",
    "func": 506,
    "tm": 129283,
    "source": {
      "script": 26,
      "start": 50045,
      "end": 51248,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "strEscape node:internal/util/inspect:475:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 507,
    "tm": 129407,
    "source": {
      "script": 26,
      "start": 14208,
      "end": 16319,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "addQuotes node:internal/util/inspect:458:19",
    "type": "JS",
    "kind": "Unopt",
    "func": 508,
    "tm": 129486,
    "source": {
      "script": 26,
      "start": 13777,
      "end": 13917,
      "positions": "C0O13795C2O13806C7O13820C12O13831C22O13838C23O13845C25O13856C30O13870C35O13882C45O13890C46O13897C51O13908C61O13915",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]",
    "timestamp": 129572,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "^[a-zA-Z_][a-zA-Z_0-9]*$",
    "timestamp": 129624,
    "type": "CODE",
    "kind": "RegExp"
  },
  {
    "name": "reduceToSingleString node:internal/util/inspect:1905:30",
    "type": "JS",
    "kind": "Unopt",
    "func": 509,
    "tm": 129737,
    "source": {
      "script": 26,
      "start": 63475,
      "end": 66331,
      "positions
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "isBelowBreakLength node:internal/util/inspect:1881:28",
    "type": "JS",
    "kind": "Unopt",
    "func": 510,
    "tm": 129832,
    "source": {
      "script": 26,
      "start": 62513,
      "end": 63444,
      "positions": "C0O62966C7O62973C11O63009C15O63000C19O63022C23O63016C28O63039C29O63052C30O63068C32O63082C36O63073C41O63109C47O63125C49O63140C54O63159C58O63140C63O63163C76O63191C78O63212C82O63216C93O63256C97O63250C102O63277C103O63290C104O63091C109O63055C112O63383C114O63395C121O63406C127O63406C133O63442",
      "inlined": "",
      "fns": []
    }
  },
  {
    "name": "join node:internal/util:378:14",
    "type": "JS",
    "kind": "Unopt",
    "func": 511,
    "tm": 129893,
    "source": {
      "script": 22,
      "start": 10457,
      "end": 10766,
      "positions": "C0O10491C3O10508C9O10515C14O10553C18O10560C22O10582C24O10587C26O10587C31O10669C33O10682C43O10693C45O10700C52O10601C57O10569C60O10721C62O10734C72O10753C74O10764",
      "inlined": "",
      "fns": []
    }
  }
],
  "functions": [
  {
    "name": " node:internal/main/run_main_module:1:1",
    "codes": [
      21465
    ]
  },
  {
    "name": " node:internal/main/run_main_module:1:1",
    "codes": [
      21466
    ]
  },
  {
    "name": "nativeModuleRequire node:internal/bootstrap/loaders:348:29",
    "codes": [
      21467,
      21504
    ]
  },
  {
    "name": "compileForInternalLoader node:internal/bootstrap/loaders:315:27",
    "codes": [
      21468,
      21640
    ]
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "codes": [
      21469
    ]
  },
  {
    "name": " node:internal/bootstrap/pre_execution:1:1",
    "codes": [
      21470
    ]
  },
  {
    "name": "prepareMainThreadExecution node:internal/bootstrap/pre_execution:32:36",
    "codes": [
      21471
    ]
  },
  {
    "name": "refreshRuntimeOptions node:internal/bootstrap/pre_execution:100:31",
    "codes": [
      21472
    ]
  },
  {
    "name": "refreshOptions node:internal/options:39:24",
    "codes": [
      21473
    ]
  },
  {
    "name": "reconnectZeroFillToggle node:internal/buffer:1072:33",
    "codes": [
      21474
    ]
  },
  {
    "name": "patchProcessObject node:internal/bootstrap/pre_execution:104:28",
    "codes": [
      21475
    ]
  },
  {
    "name": "internalBinding node:internal/bootstrap/loaders:170:45",
    "codes": [
      21476,
      21641
    ]
  },
  {
    "name": "refreshHrtimeBuffer node:internal/process/per_thread:66:29",
    "codes": [
      21477
    ]
  },
  {
    "name": "getOptionValue node:internal/options:44:24",
    "codes": [
      21478,
      21501
    ]
  },
  {
    "name": "getCLIOptionsFromBinding node:internal/options:18:34",
    "codes": [
      21479,
      21639
    ]
  },
  {
    "name": "resolve node:path:1091:10",
    "codes": [
      21480,
      21645
    ]
  },
  {
    "name": "validateString node:internal/validators:112:24",
    "codes": [
      21481,
      21775
    ]
  },
  {
    "name": " node:path:1082:10",
    "codes": [
      21482
    ]
  },
  {
    "name": "wrappedCwd node:internal/bootstrap/switches/does_own_process_state:124:20",
    "codes": [
      21483
    ]
  },
  {
    "name": "normalizeString node:path:66:25",
    "codes": [
      21484,
      21503
    ]
  },
  {
    "name": "isPosixPathSeparator node:path:56:30",
    "codes": [
      21485,
      21502
    ]
  },
  {
    "name": "initializeGlobalConsole node:internal/console/constructor:671:33",
    "codes": [
      21486
    ]
  },
  {
    "name": "value node:internal/console/constructor:196:20",
    "codes": [
      21487
    ]
  },
  {
    "name": "value node:internal/console/constructor:223:20",
    "codes": [
      21488
    ]
  },
  {
    "name": "createWriteErrorHandler node:internal/console/constructor:338:33",
    "codes": [
      21489
    ]
  },
  {
    "name": "SafeMap node:internal/per_context/primordials:360:16",
    "codes": [
      21490,
      21642
    ]
  },
  {
    "name": "addReadOnlyProcessAlias node:internal/bootstrap/pre_execution:155:33",
    "codes": [
      21491
    ]
  },
  {
    "name": "setupTraceCategoryState node:internal/bootstrap/pre_execution:320:33",
    "codes": [
      21492
    ]
  },
  {
    "name": "toggleTraceCategoryState node:internal/process/per_thread:390:34",
    "codes": [
      21493
    ]
  },
  {
    "name": "setupPerfHooks node:internal/bootstrap/pre_execution:326:24",
    "codes": [
      21494
    ]
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/performance:202:27",
    "codes": [
      21495
    ]
  },
  {
    "name": "refreshTimeOrigin node:internal/perf/utils:25:27",
    "codes": [
      21496
    ]
  },
  {
    "name": "setupInspectorHooks node:internal/bootstrap/pre_execution:331:29",
    "codes": [
      21497
    ]
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "codes": [
      21498
    ]
  },
  {
    "name": " node:internal/inspector_async_hook:1:1",
    "codes": [
      21499
    ]
  },
  {
    "name": "setupWarningHandler node:internal/bootstrap/pre_execution:167:29",
    "codes": [
      21500
    ]
  },
  {
    "name": "addListener node:events:618:58",
    "codes": [
      21505
    ]
  },
  {
    "name": "_addListener node:events:555:22",
    "codes": [
      21506
    ]
  },
  {
    "name": "checkListener node:events:258:23",
    "codes": [
      21507
    ]
  },
  {
    "name": " node:internal/validators:225:42",
    "codes": [
      21508
    ]
  },
  {
    "name": "emit node:events:475:44",
    "codes": [
      21509
    ]
  },
  {
    "name": "startListeningIfSignal node:internal/process/signal:22:32",
    "codes": [
      21510
    ]
  },
  {
    "name": "isSignal node:internal/process/signal:17:18",
    "codes": [
      21511
    ]
  },
  {
    "name": "setupFetch node:internal/bootstrap/pre_execution:178:20",
    "codes": [
      21512
    ]
  },
  {
    "name": "get node:internal/bootstrap/node:139:6",
    "codes": [
      21513
    ]
  },
  {
    "name": "get node:internal/bootstrap/node:116:6",
    "codes": [
      21514
    ]
  },
  {
    "name": "defineOperation node:internal/util:470:25",
    "codes": [
      21515
    ]
  },
  {
    "name": "lazyInterface node:internal/bootstrap/pre_execution:201:25",
    "codes": [
      21516
    ]
  },
  {
    "name": " node:internal/wasm_web_api:1:1",
    "codes": [
      21517
    ]
  },
  {
    "name": " node:internal/wasm_web_api:1:1",
    "codes": [
      21518
    ]
  },
  {
    "name": "setupWebCrypto node:internal/bootstrap/pre_execution:228:24",
    "codes": [
      21519
    ]
  },
  {
    "name": "setupDebugEnv node:internal/bootstrap/pre_execution:292:23",
    "codes": [
      21520
    ]
  },
  {
    "name": "initializeDebugEnv node:internal/util/debuglog:22:28",
    "codes": [
      21521
    ]
  },
  {
    "name": "setupStacktracePrinterOnSigint node:internal/bootstrap/pre_execution:271:40",
    "codes": [
      21522
    ]
  },
  {
    "name": "initializeReport node:internal/bootstrap/pre_execution:281:26",
    "codes": [
      21523
    ]
  },
  {
    "name": " node:internal/process/report:1:1",
    "codes": [
      21524
    ]
  },
  {
    "name": " node:internal/process/report:1:1",
    "codes": [
      21525
    ]
  },
  {
    "name": "initializeReportSignalHandlers node:internal/bootstrap/pre_execution:300:40",
    "codes": [
      21526
    ]
  },
  {
    "name": "addSignalHandler node:internal/process/report:98:26",
    "codes": [
      21527
    ]
  },
  {
    "name": "initializeHeapSnapshotSignalHandlers node:internal/bootstrap/pre_execution:306:46",
    "codes": [
      21528
    ]
  },
  {
    "name": "setupChildProcessIpcChannel node:internal/bootstrap/pre_execution:436:37",
    "codes": [
      21529
    ]
  },
  {
    "name": "initializePolicy node:internal/bootstrap/pre_execution:464:26",
    "codes": [
      21530
    ]
  },
  {
    "name": "initializeClusterIPC node:internal/bootstrap/pre_execution:455:30",
    "codes": [
      21531
    ]
  },
  {
    "name": "initializeSourceMapsHandlers node:internal/bootstrap/pre_execution:559:38",
    "codes": [
      21532
    ]
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "codes": [
      21533
    ]
  },
  {
    "name": " node:internal/source_map/source_map_cache:1:1",
    "codes": [
      21534
    ]
  },
  {
    "name": "debuglog node:internal/util/debuglog:71:18",
    "codes": [
      21535,
      21771
    ]
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "codes": [
      21536
    ]
  },
  {
    "name": " node:internal/util/iterable_weak_map:1:1",
    "codes": [
      21537
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/util/iterable_weak_map:16:1",
    "codes": [
      21538
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "codes": [
      21539
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:1:1",
    "codes": [
      21540
    ]
  },
  {
    "name": "SafeSet node:internal/per_context/primordials:373:16",
    "codes": [
      21541
    ]
  },
  {
    "name": "IterableWeakMap node:internal/util/iterable_weak_map:16:1",
    "codes": [
      21542
    ]
  },
  {
    "name": "SafeWeakMap node:internal/per_context/primordials:366:16",
    "codes": [
      21543
    ]
  },
  {
    "name": "SafeFinalizationRegistry node:internal/per_context/primordials:387:16",
    "codes": [
      21544
    ]
  },
  {
    "name": "initializeDeprecations node:internal/bootstrap/pre_execution:349:32",
    "codes": [
      21545
    ]
  },
  {
    "name": "initializeWASI node:internal/bootstrap/pre_execution:513:24",
    "codes": [
      21546
    ]
  },
  {
    "name": "initializeCJSLoader node:internal/bootstrap/pre_execution:520:29",
    "codes": [
      21547
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "codes": [
      21548
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:1:1",
    "codes": [
      21549
    ]
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "codes": [
      21550
    ]
  },
  {
    "name": " node:internal/modules/package_json_reader:1:1",
    "codes": [
      21551
    ]
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "codes": [
      21552
    ]
  },
  {
    "name": " node:internal/process/esm_loader:1:1",
    "codes": [
      21553
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "codes": [
      21554
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:1:1",
    "codes": [
      21555
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/modules/esm/loader:69:1",
    "codes": [
      21556
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "codes": [
      21557
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:1:1",
    "codes": [
      21558
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "codes": [
      21559
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:1:1",
    "codes": [
      21560
    ]
  },
  {
    "name": " node:internal/modules/esm/assert:1:1",
    "codes": [
      21561
    ]
  },
  {
    "name": " node:internal/modules/esm/assert:1:1",
    "codes": [
      21562
    ]
  },
  {
    "name": " node:internal/modules/esm/assert:43:3",
    "codes": [
      21563
    ]
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "codes": [
      21564
    ]
  },
  {
    "name": " node:internal/modules/esm/resolve:1:1",
    "codes": [
      21565
    ]
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "codes": [
      21566
    ]
  },
  {
    "name": " node:internal/modules/esm/get_format:1:1",
    "codes": [
      21567
    ]
  },
  {
    "name": " node:internal/modules/esm/fetch_module:1:1",
    "codes": [
      21568
    ]
  },
  {
    "name": " node:internal/modules/esm/fetch_module:1:1",
    "codes": [
      21569
    ]
  },
  {
    "name": " node:net:1:1",
    "codes": [
      21570
    ]
  },
  {
    "name": " node:net:1:1",
    "codes": [
      21571
    ]
  },
  {
    "name": " node:internal/net:1:1",
    "codes": [
      21572
    ]
  },
  {
    "name": " node:internal/net:1:1",
    "codes": [
      21573
    ]
  },
  {
    "name": " node:internal/dtrace:1:1",
    "codes": [
      21574
    ]
  },
  {
    "name": " node:internal/dtrace:1:1",
    "codes": [
      21575
    ]
  },
  {
    "name": "protoGetter node:net:778:21",
    "codes": [
      21576
    ]
  },
  {
    "name": "get BlockList node:net:1868:16",
    "codes": [
      21577
    ]
  },
  {
    "name": " node:internal/blocklist:1:1",
    "codes": [
      21578
    ]
  },
  {
    "name": " node:internal/blocklist:1:1",
    "codes": [
      21579
    ]
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "codes": [
      21580
    ]
  },
  {
    "name": " node:internal/socketaddress:1:1",
    "codes": [
      21581
    ]
  },
  {
    "name": "BlockList node:internal/blocklist:40:14",
    "codes": [
      21582
    ]
  },
  {
    "name": "addAddress node:internal/blocklist:60:13",
    "codes": [
      21583
    ]
  },
  {
    "name": "isSocketAddress node:internal/socketaddress:43:25",
    "codes": [
      21584
    ]
  },
  {
    "name": "SocketAddress node:internal/socketaddress:47:14",
    "codes": [
      21585
    ]
  },
  {
    "name": " node:internal/validators:148:3",
    "codes": [
      21586,
      21939
    ]
  },
  {
    "name": "validatePort node:internal/validators:205:22",
    "codes": [
      21587
    ]
  },
  {
    "name": " node:internal/validators:97:40",
    "codes": [
      21588
    ]
  },
  {
    "name": "addRange node:internal/blocklist:72:11",
    "codes": [
      21589
    ]
  },
  {
    "name": " node:internal/modules/esm/formats:1:1",
    "codes": [
      21590
    ]
  },
  {
    "name": " node:internal/modules/esm/formats:1:1",
    "codes": [
      21591
    ]
  },
  {
    "name": " node:internal/modules/esm/initialize_import_meta:1:1",
    "codes": [
      21592
    ]
  },
  {
    "name": " node:internal/modules/esm/initialize_import_meta:1:1",
    "codes": [
      21593
    ]
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "codes": [
      21594
    ]
  },
  {
    "name": " node:internal/modules/esm/load:1:1",
    "codes": [
      21595
    ]
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "codes": [
      21596
    ]
  },
  {
    "name": " node:internal/modules/esm/get_source:1:1",
    "codes": [
      21597
    ]
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "codes": [
      21598
    ]
  },
  {
    "name": " node:internal/fs/promises:1:1",
    "codes": [
      21599
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/fs/promises:125:1",
    "codes": [
      21600
    ]
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "codes": [
      21601
    ]
  },
  {
    "name": " node:internal/fs/rimraf:1:1",
    "codes": [
      21602
    ]
  },
  {
    "name": "from node:buffer:298:28",
    "codes": [
      21603
    ]
  },
  {
    "name": "fromString node:buffer:434:20",
    "codes": [
      21604
    ]
  },
  {
    "name": "fromStringFast node:buffer:415:24",
    "codes": [
      21605
    ]
  },
  {
    "name": "FastBuffer node:internal/buffer:958:14",
    "codes": [
      21606
    ]
  },
  {
    "name": "write node:buffer:595:12",
    "codes": [
      21607
    ]
  },
  {
    "name": "alignPool node:buffer:161:19",
    "codes": [
      21608
    ]
  },
  {
    "name": "promisify node:internal/util:324:19",
    "codes": [
      21609
    ]
  },
  {
    "name": "EventEmitterMixin node:internal/event_target:958:27",
    "codes": [
      21610
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "codes": [
      21611
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:1:1",
    "codes": [
      21612
    ]
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "codes": [
      21613
    ]
  },
  {
    "name": " node:internal/modules/esm/create_dynamic_module:1:1",
    "codes": [
      21614
    ]
  },
  {
    "name": " node:internal/vm/module:1:1",
    "codes": [
      21615
    ]
  },
  {
    "name": " node:internal/vm/module:1:1",
    "codes": [
      21616
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/vm/module:255:1",
    "codes": [
      21617
    ]
  },
  {
    "name": "ESMLoader node:internal/modules/esm/loader:118:14",
    "codes": [
      21618
    ]
  },
  {
    "name": "ModuleMap node:internal/modules/esm/module_map:17:14",
    "codes": [
      21619
    ]
  },
  {
    "name": "desc.value node:internal/per_context/primordials:334:32",
    "codes": [
      21620
    ]
  },
  {
    "name": "SafeIterator node:internal/per_context/primordials:279:16",
    "codes": [
      21621
    ]
  },
  {
    "name": "next node:internal/per_context/primordials:282:9",
    "codes": [
      21622,
      21643
    ]
  },
  {
    "name": "canBeRequiredWithoutScheme node:internal/bootstrap/loaders:253:36",
    "codes": [
      21623,
      21644
    ]
  },
  {
    "name": "deprecate node:internal/util:96:19",
    "codes": [
      21624,
      21777
    ]
  },
  {
    "name": "getEmbedderOptions node:internal/options:32:28",
    "codes": [
      21625
    ]
  },
  {
    "name": "Module._initPaths node:internal/modules/cjs/loader:1233:29",
    "codes": [
      21626
    ]
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "codes": [
      21627
    ]
  },
  {
    "name": " node:internal/modules/run_main:1:1",
    "codes": [
      21628
    ]
  },
  {
    "name": "initializeESMLoader node:internal/bootstrap/pre_execution:530:29",
    "codes": [
      21629
    ]
  },
  {
    "name": "get hasLoadedAnyUserCJSModule node:internal/modules/cjs/loader:74:32",
    "codes": [
      21630
    ]
  },
  {
    "name": "assert node:internal/assert:11:16",
    "codes": [
      21631
    ]
  },
  {
    "name": "loadPreloadModules node:internal/bootstrap/pre_execution:573:28",
    "codes": [
      21632
    ]
  },
  {
    "name": "Module._preloadModules node:internal/modules/cjs/loader:1263:34",
    "codes": [
      21633
    ]
  },
  {
    "name": "Module node:internal/modules/cjs/loader:172:16",
    "codes": [
      21634
    ]
  },
  {
    "name": "dirname node:path:1275:10",
    "codes": [
      21635,
      21776
    ]
  },
  {
    "name": "updateChildren node:internal/modules/cjs/loader:165:24",
    "codes": [
      21636
    ]
  },
  {
    "name": "Module._nodeModulePaths node:internal/modules/cjs/loader:630:37",
    "codes": [
      21637,
      21638
    ]
  },
  {
    "name": "Module.require node:internal/modules/cjs/loader:997:36",
    "codes": [
      21646
    ]
  },
  {
    "name": "Module._load node:internal/modules/cjs/loader:759:24",
    "codes": [
      21647
    ]
  },
  {
    "name": "logger node:internal/util/debuglog:95:18",
    "codes": [
      21648
    ]
  },
  {
    "name": " node:internal/per_context/primordials:285:21",
    "codes": [
      21649
    ]
  },
  {
    "name": "debug node:internal/util/debuglog:76:15",
    "codes": [
      21650
    ]
  },
  {
    "name": "init node:internal/util/debuglog:72:16",
    "codes": [
      21651
    ]
  },
  {
    "name": "testEnabled node:internal/util/debuglog:32:19",
    "codes": [
      21652
    ]
  },
  {
    "name": "debuglogImpl node:internal/util/debuglog:49:22",
    "codes": [
      21653
    ]
  },
  {
    "name": " node:internal/modules/cjs/loader:273:66",
    "codes": [
      21654
    ]
  },
  {
    "name": "noop node:internal/util/debuglog:47:14",
    "codes": [
      21655,
      21781
    ]
  },
  {
    "name": "Module._resolveFilename node:internal/modules/cjs/loader:853:35",
    "codes": [
      21656
    ]
  },
  {
    "name": "canBeRequiredByUsers node:internal/bootstrap/loaders:246:30",
    "codes": [
      21657,
      21805
    ]
  },
  {
    "name": "Module._resolveLookupPaths node:internal/modules/cjs/loader:668:38",
    "codes": [
      21658
    ]
  },
  {
    "name": "trySelfParentPath node:internal/modules/cjs/loader:428:27",
    "codes": [
      21659
    ]
  },
  {
    "name": "trySelf node:internal/modules/cjs/loader:442:17",
    "codes": [
      21660
    ]
  },
  {
    "name": "readPackageScope node:internal/modules/cjs/loader:322:26",
    "codes": [
      21661,
      21873
    ]
  },
  {
    "name": "readPackage node:internal/modules/cjs/loader:291:21",
    "codes": [
      21662
    ]
  },
  {
    "name": "read node:internal/modules/package_json_reader:16:14",
    "codes": [
      21663
    ]
  },
  {
    "name": "toNamespacedPath node:path:1266:19",
    "codes": [
      21664,
      21772
    ]
  },
  {
    "name": "Module._findPath node:internal/modules/cjs/loader:495:28",
    "codes": [
      21665
    ]
  },
  {
    "name": "isAbsolute node:path:1156:13",
    "codes": [
      21666
    ]
  },
  {
    "name": "stat node:internal/modules/cjs/loader:151:14",
    "codes": [
      21667
    ]
  },
  {
    "name": "tryExtensions node:internal/modules/cjs/loader:401:23",
    "codes": [
      21668
    ]
  },
  {
    "name": "tryFile node:internal/modules/cjs/loader:385:17",
    "codes": [
      21669
    ]
  },
  {
    "name": "toRealPath node:internal/modules/cjs/loader:394:20",
    "codes": [
      21670
    ]
  },
  {
    "name": "realpathSync node:fs:2467:22",
    "codes": [
      21671,
      21804
    ]
  },
  {
    "name": "getOptions node:internal/fs/utils:315:20",
    "codes": [
      21672
    ]
  },
  {
    "name": "assertEncoding node:internal/fs/utils:152:24",
    "codes": [
      21673
    ]
  },
  {
    "name": "toPathIfFileURL node:internal/url:1561:25",
    "codes": [
      21674,
      21953
    ]
  },
  {
    "name": "isURLInstance node:internal/url:1557:23",
    "codes": [
      21675,
      21877
    ]
  },
  {
    "name": " node:internal/fs/utils:669:38",
    "codes": [
      21676,
      21963
    ]
  },
  {
    "name": " node:internal/fs/utils:358:35",
    "codes": [
      21677,
      21962
    ]
  },
  {
    "name": "isUint8Array node:internal/util/types:13:22",
    "codes": [
      21678,
      21876
    ]
  },
  {
    "name": "splitRoot node:fs:2421:33",
    "codes": [
      21679,
      21958
    ]
  },
  {
    "name": "nextPart node:fs:2454:31",
    "codes": [
      21680,
      21773
    ]
  },
  {
    "name": "handleErrorFromBinding node:internal/fs/utils:341:32",
    "codes": [
      21681,
      21878
    ]
  },
  {
    "name": "isFileType node:fs:211:20",
    "codes": [
      21682,
      21774
    ]
  },
  {
    "name": "encodeRealpathResult node:fs:2430:30",
    "codes": [
      21683
    ]
  },
  {
    "name": "loadNativeModule node:internal/modules/cjs/helpers:44:26",
    "codes": [
      21684
    ]
  },
  {
    "name": "Module.load node:internal/modules/cjs/loader:969:33",
    "codes": [
      21685
    ]
  },
  {
    "name": "findLongestRegisteredExtension node:internal/modules/cjs/loader:414:40",
    "codes": [
      21686
    ]
  },
  {
    "name": "basename node:path:1306:11",
    "codes": [
      21687
    ]
  },
  {
    "name": "Module._extensions..js node:internal/modules/cjs/loader:1114:37",
    "codes": [
      21688
    ]
  },
  {
    "name": "readFileSync node:fs:456:22",
    "codes": [
      21689
    ]
  },
  {
    "name": "isEncoding node:buffer:532:40",
    "codes": [
      21690
    ]
  },
  {
    "name": "normalizeEncoding node:internal/util:160:27",
    "codes": [
      21691
    ]
  },
  {
    "name": "isUint32 node:internal/validators:39:18",
    "codes": [
      21692
    ]
  },
  {
    "name": "openSync node:fs:582:18",
    "codes": [
      21693
    ]
  },
  {
    "name": " node:internal/fs/utils:681:42",
    "codes": [
      21694,
      21957
    ]
  },
  {
    "name": "stringToFlags node:internal/fs/utils:556:23",
    "codes": [
      21695
    ]
  },
  {
    "name": "parseFileMode node:internal/validators:58:23",
    "codes": [
      21696
    ]
  },
  {
    "name": "tryStatSync node:fs:410:21",
    "codes": [
      21697
    ]
  },
  {
    "name": "tryCreateBuffer node:fs:420:25",
    "codes": [
      21698
    ]
  },
  {
    "name": "allocUnsafe node:buffer:375:42",
    "codes": [
      21699
    ]
  },
  {
    "name": " node:buffer:351:36",
    "codes": [
      21700
    ]
  },
  {
    "name": "validateNumber node:internal/validators:117:24",
    "codes": [
      21701
    ]
  },
  {
    "name": "allocate node:buffer:400:18",
    "codes": [
      21702
    ]
  },
  {
    "name": "tryReadSync node:fs:435:21",
    "codes": [
      21703
    ]
  },
  {
    "name": "readSync node:fs:696:18",
    "codes": [
      21704
    ]
  },
  {
    "name": " node:internal/fs/utils:687:40",
    "codes": [
      21705
    ]
  },
  {
    "name": " node:internal/validators:83:3",
    "codes": [
      21706
    ]
  },
  {
    "name": " node:internal/validators:185:40",
    "codes": [
      21707
    ]
  },
  {
    "name": " node:internal/validators:72:3",
    "codes": [
      21708
    ]
  },
  {
    "name": " node:internal/fs/utils:637:3",
    "codes": [
      21709
    ]
  },
  {
    "name": " node:internal/fs/utils:902:42",
    "codes": [
      21710
    ]
  },
  {
    "name": "closeSync node:fs:532:19",
    "codes": [
      21711
    ]
  },
  {
    "name": "toString node:buffer:784:46",
    "codes": [
      21712
    ]
  },
  {
    "name": "getEncodingOps node:buffer:681:24",
    "codes": [
      21713
    ]
  },
  {
    "name": "slice node:buffer:596:12",
    "codes": [
      21714
    ]
  },
  {
    "name": "Module._compile node:internal/modules/cjs/loader:1059:37",
    "codes": [
      21715
    ]
  },
  {
    "name": "maybeCacheSourceMap node:internal/source_map/source_map_cache:74:29",
    "codes": [
      21716
    ]
  },
  {
    "name": "getSourceMapsEnabled node:internal/source_map/source_map_cache:43:30",
    "codes": [
      21717
    ]
  },
  {
    "name": "setSourceMapsEnabled node:internal/source_map/source_map_cache:50:30",
    "codes": [
      21718
    ]
  },
  {
    "name": "validateBoolean node:internal/validators:133:25",
    "codes": [
      21719
    ]
  },
  {
    "name": "wrapSafe node:internal/modules/cjs/loader:1017:18",
    "codes": [
      21720
    ]
  },
  {
    "name": "compileFunction node:vm:308:25",
    "codes": [
      21721
    ]
  },
  {
    "name": " node:internal/validators:162:39",
    "codes": [
      21722
    ]
  },
  {
    "name": " node:vm:313:27",
    "codes": [
      21723,
      21780
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      21724
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/no-cluster.js:1:1",
    "codes": [
      21725
    ]
  },
  {
    "name": "importModuleDynamicallyWrap node:internal/vm/module:433:37",
    "codes": [
      21726
    ]
  },
  {
    "name": "makeRequireFunction node:internal/modules/cjs/helpers:58:29",
    "codes": [
      21727
    ]
  },
  {
    "name": "require node:internal/modules/cjs/helpers:101:31",
    "codes": [
      21728
    ]
  },
  {
    "name": " node:internal/modules/cjs/helpers:29:66",
    "codes": [
      21729
    ]
  },
  {
    "name": "compileForPublicLoader node:internal/bootstrap/loaders:262:25",
    "codes": [
      21730
    ]
  },
  {
    "name": " node:cluster:1:1",
    "codes": [
      21731
    ]
  },
  {
    "name": " node:cluster:1:1",
    "codes": [
      21732
    ]
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "codes": [
      21733
    ]
  },
  {
    "name": " node:internal/cluster/primary:1:1",
    "codes": [
      21734
    ]
  },
  {
    "name": " node:child_process:1:1",
    "codes": [
      21735
    ]
  },
  {
    "name": " node:child_process:1:1",
    "codes": [
      21736
    ]
  },
  {
    "name": " node:internal/child_process:1:1",
    "codes": [
      21737
    ]
  },
  {
    "name": " node:internal/child_process:1:1",
    "codes": [
      21738
    ]
  },
  {
    "name": "<instance_members_initializer> node:internal/child_process:522:1",
    "codes": [
      21739
    ]
  },
  {
    "name": " node:dgram:1:1",
    "codes": [
      21740
    ]
  },
  {
    "name": " node:dgram:1:1",
    "codes": [
      21741
    ]
  },
  {
    "name": " node:internal/dgram:1:1",
    "codes": [
      21742
    ]
  },
  {
    "name": " node:internal/dgram:1:1",
    "codes": [
      21743
    ]
  },
  {
    "name": " node:internal/socket_list:1:1",
    "codes": [
      21744
    ]
  },
  {
    "name": " node:internal/socket_list:1:1",
    "codes": [
      21745
    ]
  },
  {
    "name": "customPromiseExecFunction node:child_process:227:35",
    "codes": [
      21746
    ]
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "codes": [
      21747
    ]
  },
  {
    "name": " node:internal/cluster/round_robin_handle:1:1",
    "codes": [
      21748
    ]
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "codes": [
      21749
    ]
  },
  {
    "name": " node:internal/cluster/utils:1:1",
    "codes": [
      21750
    ]
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "codes": [
      21751
    ]
  },
  {
    "name": " node:internal/cluster/shared_handle:1:1",
    "codes": [
      21752
    ]
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "codes": [
      21753
    ]
  },
  {
    "name": " node:internal/cluster/worker:1:1",
    "codes": [
      21754
    ]
  },
  {
    "name": "EventEmitter node:events:208:22",
    "codes": [
      21755
    ]
  },
  {
    "name": "EventEmitter.init node:events:327:29",
    "codes": [
      21756
    ]
  },
  {
    "name": "getESMFacade node:internal/bootstrap/loaders:280:15",
    "codes": [
      21757
    ]
  },
  {
    "name": " node:internal/bootstrap/loaders:289:15",
    "codes": [
      21758
    ]
  },
  {
    "name": "syncExports node:internal/bootstrap/loaders:303:14",
    "codes": [
      21759,
      21779
    ]
  },
  {
    "name": "getOwn node:internal/bootstrap/loaders:186:16",
    "codes": [
      21760,
      21778
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      21762
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:1:1",
    "codes": [
      21763
    ]
  },
  {
    "name": "get SocketAddress node:net:1872:20",
    "codes": [
      21764
    ]
  },
  {
    "name": " node:worker_threads:1:1",
    "codes": [
      21765
    ]
  },
  {
    "name": " node:worker_threads:1:1",
    "codes": [
      21766
    ]
  },
  {
    "name": " node:internal/worker:1:1",
    "codes": [
      21767
    ]
  },
  {
    "name": " node:internal/worker:1:1",
    "codes": [
      21768
    ]
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "codes": [
      21769
    ]
  },
  {
    "name": " node:internal/error_serdes:1:1",
    "codes": [
      21770
    ]
  },
  {
    "name": "Socket node:net:292:16",
    "codes": [
      21782
    ]
  },
  {
    "name": "Duplex node:internal/streams/duplex:54:16",
    "codes": [
      21783
    ]
  },
  {
    "name": "Readable node:internal/streams/readable:186:18",
    "codes": [
      21784
    ]
  },
  {
    "name": "Stream node:internal/streams/legacy:10:16",
    "codes": [
      21785
    ]
  },
  {
    "name": "ReadableState node:internal/streams/readable:83:23",
    "codes": [
      21786
    ]
  },
  {
    "name": "getHighWaterMark node:internal/streams/state:19:26",
    "codes": [
      21787
    ]
  },
  {
    "name": "highWaterMarkFrom node:internal/streams/state:10:27",
    "codes": [
      21788
    ]
  },
  {
    "name": "getDefaultHighWaterMark node:internal/streams/state:15:33",
    "codes": [
      21789
    ]
  },
  {
    "name": "BufferList node:internal/streams/buffer_list:14:14",
    "codes": [
      21790
    ]
  },
  {
    "name": "construct node:internal/streams/destroy:219:19",
    "codes": [
      21791
    ]
  },
  {
    "name": "Writable node:internal/streams/writable:219:18",
    "codes": [
      21792
    ]
  },
  {
    "name": "WritableState node:internal/streams/writable:77:23",
    "codes": [
      21793
    ]
  },
  {
    "name": "resetBuffer node:internal/streams/writable:202:21",
    "codes": [
      21794
    ]
  },
  {
    "name": "createHandle node:net:144:22",
    "codes": [
      21795
    ]
  },
  {
    "name": "set node:net:1796:6",
    "codes": [
      21796
    ]
  },
  {
    "name": "get node:net:1795:6",
    "codes": [
      21797
    ]
  },
  {
    "name": "Readable.on node:internal/streams/readable:886:33",
    "codes": [
      21798
    ]
  },
  {
    "name": "initSocketHandle node:net:261:26",
    "codes": [
      21799
    ]
  },
  {
    "name": "undestroy node:internal/streams/destroy:154:19",
    "codes": [
      21800
    ]
  },
  {
    "name": "getNewAsyncId node:net:163:23",
    "codes": [
      21801
    ]
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:413:8",
    "codes": [
      21802
    ]
  },
  {
    "name": "get /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js:19:10",
    "codes": [
      21803
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      21806
    ]
  },
  {
    "name": " /home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/soft-exit.js:1:1",
    "codes": [
      21807
    ]
  },
  {
    "name": "initializeFrozenIntrinsics node:internal/bootstrap/pre_execution:565:36",
    "codes": [
      21808
    ]
  },
  {
    "name": "executeUserEntryPoint node:internal/modules/run_main:70:31",
    "codes": [
      21809
    ]
  },
  {
    "name": "resolveMainPath node:internal/modules/run_main:15:25",
    "codes": [
      21810
    ]
  },
  {
    "name": "shouldUseESMLoader node:internal/modules/run_main:30:28",
    "codes": [
      21811
    ]
  },
  {
    "name": "runMainESM node:internal/modules/run_main:47:20",
    "codes": [
      21812
    ]
  },
  {
    "name": "loadESM node:internal/process/esm_loader:82:41",
    "codes": [
      21813
    ]
  },
  {
    "name": "initializeLoader node:internal/process/esm_loader:50:32",
    "codes": [
      21814
    ]
  },
  {
    "name": "handleMainPromise node:internal/modules/run_main:58:33",
    "codes": [
      21815
    ]
  },
  {
    "name": " node:internal/modules/run_main:51:29",
    "codes": [
      21816
    ]
  },
  {
    "name": "pathToFileURL node:internal/url:1520:23",
    "codes": [
      21817
    ]
  },
  {
    "name": "URL node:internal/url:635:14",
    "codes": [
      21818,
      21938
    ]
  },
  {
    "name": "URLContext node:internal/url:161:14",
    "codes": [
      21819,
      21880
    ]
  },
  {
    "name": "onParseComplete node:internal/url:543:25",
    "codes": [
      21820,
      21872
    ]
  },
  {
    "name": "URLSearchParams node:internal/url:183:14",
    "codes": [
      21821
    ]
  },
  {
    "name": "initSearchParams node:internal/url:1081:26",
    "codes": [
      21822,
      21942
    ]
  },
  {
    "name": "encodePathChars node:internal/url:1505:25",
    "codes": [
      21823
    ]
  },
  {
    "name": "set pathname node:internal/url:935:15",
    "codes": [
      21824,
      21980
    ]
  },
  {
    "name": "isURLThis node:internal/url:630:19",
    "codes": [
      21825,
      21874
    ]
  },
  {
    "name": " node:internal/url:652:21",
    "codes": [
      21826,
      21879
    ]
  },
  {
    "name": "onParsePathComplete node:internal/url:602:29",
    "codes": [
      21827,
      21979
    ]
  },
  {
    "name": "get href node:internal/url:752:11",
    "codes": [
      21828,
      21952
    ]
  },
  {
    "name": " node:internal/url:698:12",
    "codes": [
      21829,
      21937
    ]
  },
  {
    "name": "import node:internal/modules/esm/loader:396:15",
    "codes": [
      21830
    ]
  },
  {
    "name": "getModuleJob node:internal/modules/esm/loader:309:21",
    "codes": [
      21831
    ]
  },
  {
    "name": "resolve node:internal/modules/esm/loader:581:16",
    "codes": [
      21832
    ]
  },
  {
    "name": "defaultResolve node:internal/modules/esm/resolve:1084:30",
    "codes": [
      21833
    ]
  },
  {
    "name": "shouldBeTreatedAsRelativeOrAbsolutePath node:internal/modules/esm/resolve:931:49",
    "codes": [
      21834,
      21975
    ]
  },
  {
    "name": "isRelativeSpecifier node:internal/modules/esm/resolve:921:29",
    "codes": [
      21835
    ]
  },
  {
    "name": "get protocol node:internal/url:794:15",
    "codes": [
      21836,
      21940
    ]
  },
  {
    "name": "checkIfDisallowedImport node:internal/modules/esm/resolve:1016:33",
    "codes": [
      21837
    ]
  },
  {
    "name": "throwIfUnsupportedURLScheme node:internal/modules/esm/resolve:1063:37",
    "codes": [
      21838
    ]
  },
  {
    "name": "getConditionsSet node:internal/modules/esm/resolve:146:26",
    "codes": [
      21839
    ]
  },
  {
    "name": "moduleResolve node:internal/modules/esm/resolve:944:23",
    "codes": [
      21840
    ]
  },
  {
    "name": "finalizeResolution node:internal/modules/esm/resolve:372:28",
    "codes": [
      21841
    ]
  },
  {
    "name": "get pathname node:internal/url:924:15",
    "codes": [
      21842,
      21941
    ]
  },
  {
    "name": "fileURLToPath node:internal/url:1478:23",
    "codes": [
      21843,
      21965
    ]
  },
  {
    "name": "get origin node:internal/url:769:13",
    "codes": [
      21844,
      21951
    ]
  },
  {
    "name": "getPathFromURLPosix node:internal/url:1460:29",
    "codes": [
      21845,
      21875
    ]
  },
  {
    "name": "get hostname node:internal/url:882:15",
    "codes": [
      21846,
      21956
    ]
  },
  {
    "name": "tryStatSync node:internal/modules/esm/resolve:165:3",
    "codes": [
      21847,
      21976
    ]
  },
  {
    "name": "statSync node:fs:1579:18",
    "codes": [
      21848,
      21961
    ]
  },
  {
    "name": "hasNoEntryError node:fs:1516:25",
    "codes": [
      21849
    ]
  },
  {
    "name": "getStatsFromBinding node:internal/fs/utils:531:29",
    "codes": [
      21850
    ]
  },
  {
    "name": "isBigUint64Array node:internal/util/types:53:26",
    "codes": [
      21851,
      21974
    ]
  },
  {
    "name": "msFromTimeSpec node:internal/fs/utils:447:24",
    "codes": [
      21852,
      21955
    ]
  },
  {
    "name": "Stats node:internal/fs/utils:496:15",
    "codes": [
      21853,
      21967
    ]
  },
  {
    "name": "StatsBase node:internal/fs/utils:401:19",
    "codes": [
      21854,
      21966
    ]
  },
  {
    "name": "dateFromMs node:internal/fs/utils:461:20",
    "codes": [
      21855,
      21954
    ]
  },
  {
    "name": "StatsBase.isDirectory node:internal/fs/utils:415:43",
    "codes": [
      21856,
      21973
    ]
  },
  {
    "name": "Stats._checkModeProperty node:internal/fs/utils:518:46",
    "codes": [
      21857,
      21977
    ]
  },
  {
    "name": "StatsBase.isFile node:internal/fs/utils:419:38",
    "codes": [
      21858,
      21978
    ]
  },
  {
    "name": "get search node:internal/url:946:13",
    "codes": [
      21859
    ]
  },
  {
    "name": "get hash node:internal/url:982:11",
    "codes": [
      21860
    ]
  },
  {
    "name": "set search node:internal/url:955:13",
    "codes": [
      21861
    ]
  },
  {
    "name": "toUSVString node:internal/util:59:21",
    "codes": [
      21862
    ]
  },
  {
    "name": "set hash node:internal/url:991:11",
    "codes": [
      21863
    ]
  },
  {
    "name": "throwIfUnsupportedURLProtocol node:internal/modules/esm/resolve:1056:39",
    "codes": [
      21864
    ]
  },
  {
    "name": "defaultGetFormatWithoutErrors node:internal/modules/esm/get_format:107:39",
    "codes": [
      21865
    ]
  },
  {
    "name": "toString node:internal/url:746:11",
    "codes": [
      21866,
      21964
    ]
  },
  {
    "name": "getFileProtocolModuleFormat node:internal/modules/esm/get_format:55:37",
    "codes": [
      21867
    ]
  },
  {
    "name": "extname node:path:1385:10",
    "codes": [
      21868,
      21959
    ]
  },
  {
    "name": "getPackageType node:internal/modules/esm/resolve:805:24",
    "codes": [
      21869
    ]
  },
  {
    "name": "getPackageScopeConfig node:internal/modules/esm/resolve:229:31",
    "codes": [
      21870
    ]
  },
  {
    "name": "getPackageConfig node:internal/modules/esm/resolve:173:26",
    "codes": [
      21871
    ]
  },
  {
    "name": "get node:internal/modules/esm/module_map:18:6",
    "codes": [
      21881
    ]
  },
  {
    "name": "#createModuleJob node:internal/modules/esm/loader:345:19",
    "codes": [
      21882
    ]
  },
  {
    "name": "ModuleJob node:internal/modules/esm/module_job:56:14",
    "codes": [
      21883
    ]
  },
  {
    "name": "moduleProvider node:internal/modules/esm/loader:346:28",
    "codes": [
      21884
    ]
  },
  {
    "name": "load node:internal/modules/esm/loader:425:13",
    "codes": [
      21885
    ]
  },
  {
    "name": "defaultLoad node:internal/modules/esm/load:13:27",
    "codes": [
      21886
    ]
  },
  {
    "name": "validateAssertions node:internal/modules/esm/assert:55:28",
    "codes": [
      21887
    ]
  },
  {
    "name": "defaultGetSource node:internal/modules/esm/get_source:30:32",
    "codes": [
      21888
    ]
  },
  {
    "name": "readFile node:internal/fs/promises:858:24",
    "codes": [
      21889
    ]
  },
  {
    "name": "checkAborted node:internal/fs/promises:372:22",
    "codes": [
      21890
    ]
  },
  {
    "name": "open node:internal/fs/promises:502:20",
    "codes": [
      21891
    ]
  },
  {
    "name": "link node:internal/modules/esm/module_job:69:18",
    "codes": [
      21892
    ]
  },
  {
    "name": "primordials.PromisePrototypeCatch node:internal/per_context/primordials:406:37",
    "codes": [
      21893
    ]
  },
  {
    "name": "set node:internal/modules/esm/module_map:23:6",
    "codes": [
      21894
    ]
  },
  {
    "name": " node:internal/modules/esm/module_map:9:63",
    "codes": [
      21895
    ]
  },
  {
    "name": " node:internal/modules/esm/loader:405:15",
    "codes": [
      21896
    ]
  },
  {
    "name": "run node:internal/modules/esm/module_job:193:12",
    "codes": [
      21897
    ]
  },
  {
    "name": "instantiate node:internal/modules/esm/module_job:102:14",
    "codes": [
      21898
    ]
  },
  {
    "name": "_instantiate node:internal/modules/esm/module_job:109:21",
    "codes": [
      21899
    ]
  },
  {
    "name": "addJobsToDependencyGraph node:internal/modules/esm/module_job:111:38",
    "codes": [
      21900
    ]
  },
  {
    "name": "FileHandle node:internal/fs/promises:129:14",
    "codes": [
      21901
    ]
  },
  {
    "name": "MixedEventEmitter node:internal/event_target:960:16",
    "codes": [
      21902
    ]
  },
  {
    "name": "readFileHandle node:internal/fs/promises:412:30",
    "codes": [
      21903
    ]
  },
  {
    "name": "get fd node:internal/fs/promises:142:9",
    "codes": [
      21904
    ]
  },
  {
    "name": "handleFdClose node:internal/fs/promises:339:29",
    "codes": [
      21905
    ]
  },
  {
    "name": "allocUnsafeSlow node:buffer:385:50",
    "codes": [
      21906
    ]
  },
  {
    "name": "createUnsafeBuffer node:internal/buffer:1059:28",
    "codes": [
      21907
    ]
  },
  {
    "name": " node:internal/fs/promises:342:5",
    "codes": [
      21908
    ]
  },
  {
    "name": "close node:internal/fs/promises:202:11",
    "codes": [
      21909
    ]
  },
  {
    "name": "primordials.SafePromisePrototypeFinally node:internal/per_context/primordials:418:43",
    "codes": [
      21910
    ]
  },
  {
    "name": " node:internal/per_context/primordials:421:15",
    "codes": [
      21911
    ]
  },
  {
    "name": "SafePromise node:internal/per_context/primordials:402:16",
    "codes": [
      21912
    ]
  },
  {
    "name": " node:internal/per_context/primordials:422:21",
    "codes": [
      21913
    ]
  },
  {
    "name": " node:internal/fs/promises:216:9",
    "codes": [
      21914
    ]
  },
  {
    "name": " node:internal/fs/promises:342:51",
    "codes": [
      21915
    ]
  },
  {
    "name": "moduleStrategy node:internal/modules/esm/translators:112:56",
    "codes": [
      21916
    ]
  },
  {
    "name": "assertBufferSource node:internal/modules/esm/translators:74:28",
    "codes": [
      21917
    ]
  },
  {
    "name": "lazyTypes node:internal/modules/esm/translators:22:19",
    "codes": [
      21918
    ]
  },
  {
    "name": "stringify node:internal/modules/esm/translators:90:19",
    "codes": [
      21919
    ]
  },
  {
    "name": "TextDecoder node:internal/encoding:380:16",
    "codes": [
      21920
    ]
  },
  {
    "name": "getEncodingFromLabel node:internal/encoding:314:30",
    "codes": [
      21921
    ]
  },
  {
    "name": "decode node:internal/encoding:409:11",
    "codes": [
      21922
    ]
  },
  {
    "name": "validateDecoder node:internal/encoding:65:25",
    "codes": [
      21923
    ]
  },
  {
    "name": "slice node:buffer:605:12",
    "codes": [
      21924
    ]
  },
  {
    "name": " node:internal/modules/esm/translators:42:63",
    "codes": [
      21925
    ]
  },
  {
    "name": " file:///media/miguel/data/4-BackEnd/Desafios/desafio16/src/index.js:1:1",
    "codes": [
      21926
    ]
  },
  {
    "name": " node:internal/modules/esm/module_job:78:41",
    "codes": [
      21927
    ]
  },
  {
    "name": "getBaseURL node:internal/modules/esm/loader:279:13",
    "codes": [
      21928
    ]
  },
  {
    "name": "onParseError node:internal/url:562:22",
    "codes": [
      21929
    ]
  },
  {
    "name": "NodeError node:internal/errors:348:28",
    "codes": [
      21930,
      21972
    ]
  },
  {
    "name": "isErrorStackTraceLimitWritable node:internal/errors:194:40",
    "codes": [
      21931,
      21960
    ]
  },
  {
    "name": "getMessage node:internal/errors:416:20",
    "codes": [
      21932
    ]
  },
  {
    "name": " node:internal/errors:1342:30",
    "codes": [
      21933
    ]
  },
  {
    "name": "captureLargerStackTrace node:internal/errors:460:35",
    "codes": [
      21934,
      21981
    ]
  },
  {
    "name": "packageResolve node:internal/modules/esm/resolve:854:24",
    "codes": [
      21935
    ]
  },
  {
    "name": "parsePackageName node:internal/modules/esm/resolve:815:26",
    "codes": [
      21936
    ]
  },
  {
    "name": "uvErrmapGet node:internal/errors:453:21",
    "codes": [
      21943
    ]
  },
  {
    "name": "lazyUv node:internal/errors:446:16",
    "codes": [
      21944
    ]
  },
  {
    "name": "legacyMainResolve node:internal/modules/esm/resolve:280:27",
    "codes": [
      21945
    ]
  },
  {
    "name": "fileExists node:internal/modules/esm/resolve:264:20",
    "codes": [
      21946
    ]
  },
  {
    "name": "emitLegacyIndexDeprecation node:internal/modules/esm/resolve:114:36",
    "codes": [
      21947
    ]
  },
  {
    "name": "lazyInternalUtilInspect node:internal/errors:183:33",
    "codes": [
      21969
    ]
  },
  {
    "name": "format node:internal/util/inspect:2026:16",
    "codes": [
      21970
    ]
  },
  {
    "name": "formatWithOptionsInternal node:internal/util/inspect:2054:35",
    "codes": [
      21971
    ]
  },
  {
    "name": "resolveAsCommonJS node:internal/modules/esm/resolve:975:27",
    "codes": [
      21982
    ]
  },
  {
    "name": "resolveExports node:internal/modules/cjs/loader:473:24",
    "codes": [
      21983
    ]
  },
  {
    "name": "promiseRejectHandler node:internal/process/promises:109:30",
    "codes": [
      21984
    ]
  },
  {
    "name": "getUnhandledRejectionsMode node:internal/process/promises:91:36",
    "codes": [
      21985
    ]
  },
  {
    "name": "unhandledRejection node:internal/process/promises:144:28",
    "codes": [
      21986
    ]
  },
  {
    "name": "setHasRejectionToWarn node:internal/process/promises:77:31",
    "codes": [
      21987
    ]
  },
  {
    "name": "handledRejection node:internal/process/promises:164:26",
    "codes": [
      21988
    ]
  },
  {
    "name": " node:internal/errors:1424:27",
    "codes": [
      21989
    ]
  },
  {
    "name": "commonjsStrategy node:internal/modules/esm/translators:148:60",
    "codes": [
      21991
    ]
  },
  {
    "name": "initCJSParse node:internal/modules/esm/translators:58:28",
    "codes": [
      21992
    ]
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1",
    "codes": [
      21993
    ]
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1",
    "codes": [
      21994
    ]
  },
  {
    "name": "init node:internal/deps/cjs-module-lexer/dist/lexer:1:1235",
    "codes": [
      21995
    ]
  },
  {
    "name": " node:internal/deps/cjs-module-lexer/dist/lexer:1:1252",
    "codes": [
      21996
    ]
  },
  {
    "name": "get node:internal/bootstrap/pre_execution:425:8",
    "codes": [
      21997
    ]
  },
  {
    "name": "byteLength node:buffer:643:17",
    "codes": [
      21998
    ]
  },
  {
    "name": "base64ByteLength node:buffer:579:26",
    "codes": [
      21999
    ]
  },
  {
    "name": "resolveError node:internal/process/promises:134:22",
    "codes": [
      22000
    ]
  },
  {
    "name": "nextTick node:internal/process/task_queues:103:18",
    "codes": [
      22001
    ]
  },
  {
    "name": "isEmpty node:internal/fixed_queue:95:10",
    "codes": [
      22002
    ]
  },
  {
    "name": "isEmpty node:internal/fixed_queue:67:10",
    "codes": [
      22003
    ]
  },
  {
    "name": "setHasTickScheduled node:internal/process/task_queues:51:29",
    "codes": [
      22004
    ]
  },
  {
    "name": "newAsyncId node:internal/async_hooks:415:20",
    "codes": [
      22005
    ]
  },
  {
    "name": "getDefaultTriggerAsyncId node:internal/async_hooks:431:34",
    "codes": [
      22006
    ]
  },
  {
    "name": "initHooksExist node:internal/async_hooks:477:24",
    "codes": [
      22007
    ]
  },
  {
    "name": "hasHooks node:internal/async_hooks:469:18",
    "codes": [
      22008
    ]
  },
  {
    "name": "push node:internal/fixed_queue:99:7",
    "codes": [
      22009
    ]
  },
  {
    "name": "isFull node:internal/fixed_queue:71:9",
    "codes": [
      22010
    ]
  },
  {
    "name": "push node:internal/fixed_queue:75:7",
    "codes": [
      22011
    ]
  },
  {
    "name": "hasUncaughtExceptionCaptureCallback node:internal/process/execution:119:45",
    "codes": [
      22012
    ]
  },
  {
    "name": " node:internal/process/execution:137:10",
    "codes": [
      22013
    ]
  },
  {
    "name": "clearDefaultTriggerAsyncId node:internal/async_hooks:440:36",
    "codes": [
      22014
    ]
  },
  {
    "name": "handleProcessExit node:internal/modules/esm/handle_process_exit:6:27",
    "codes": [
      22015
    ]
  },
  {
    "name": "beforeInspector node:internal/errors:740:18",
    "codes": [
      22016
    ]
  },
  {
    "name": "prepareStackTrace node:internal/errors:91:27",
    "codes": [
      22017
    ]
  },
  {
    "name": "maybeOverridePrepareStackTrace node:internal/errors:136:40",
    "codes": [
      22018
    ]
  },
  {
    "name": "afterInspector node:internal/errors:754:17",
    "codes": [
      22019
    ]
  },
  {
    "name": " node:internal/tty:1:1",
    "codes": [
      22020
    ]
  },
  {
    "name": " node:internal/tty:1:1",
    "codes": [
      22021
    ]
  },
  {
    "name": "hasColors node:internal/tty:222:19",
    "codes": [
      22022
    ]
  },
  {
    "name": "getColorDepth node:internal/tty:106:23",
    "codes": [
      22023
    ]
  },
  {
    "name": "get node:internal/util/inspect:352:6",
    "codes": [
      22024
    ]
  },
  {
    "name": "inspect node:internal/util/inspect:292:17",
    "codes": [
      22025
    ]
  },
  {
    "name": "formatValue node:internal/util/inspect:745:21",
    "codes": [
      22026
    ]
  },
  {
    "name": "formatRaw node:internal/util/inspect:823:19",
    "codes": [
      22027
    ]
  },
  {
    "name": "getConstructorName node:internal/util/inspect:567:28",
    "codes": [
      22028
    ]
  },
  {
    "name": "isInstanceof node:internal/util/inspect:559:22",
    "codes": [
      22029
    ]
  },
  {
    "name": "getKeys node:internal/util/inspect:688:17",
    "codes": [
      22030
    ]
  },
  {
    "name": "filter node:internal/util/inspect:709:22",
    "codes": [
      22031
    ]
  },
  {
    "name": "isError node:internal/util:80:17",
    "codes": [
      22032
    ]
  },
  {
    "name": "formatError node:internal/util/inspect:1284:21",
    "codes": [
      22033
    ]
  },
  {
    "name": "getStackString node:internal/util/inspect:1215:24",
    "codes": [
      22034
    ]
  },
  {
    "name": "removeDuplicateErrorKeys node:internal/util/inspect:1272:34",
    "codes": [
      22035
    ]
  },
  {
    "name": "improveStack node:internal/util/inspect:1239:22",
    "codes": [
      22036
    ]
  },
  {
    "name": "getStackFrames node:internal/util/inspect:1219:24",
    "codes": [
      22037
    ]
  },
  {
    "name": "exists node:internal/bootstrap/loaders:242:16",
    "codes": [
      22038
    ]
  },
  {
    "name": "stylizeWithColor node:internal/util/inspect:540:26",
    "codes": [
      22039
    ]
  },
  {
    "name": "get node:internal/util/inspect:416:8",
    "codes": [
      22040
    ]
  },
  {
    "name": "getEmptyFormatArray node:internal/util/inspect:555:29",
    "codes": [
      22042
    ]
  },
  {
    "name": "formatProperty node:internal/util/inspect:1813:24",
    "codes": [
      22043
    ]
  },
  {
    "name": "isUndetectableObject node:internal/util/inspect:158:30",
    "codes": [
      22044
    ]
  },
  {
    "name": "formatPrimitive node:internal/util/inspect:1522:25",
    "codes": [
      22045
    ]
  },
  {
    "name": "strEscape node:internal/util/inspect:475:19",
    "codes": [
      22046
    ]
  },
  {
    "name": "addQuotes node:internal/util/inspect:458:19",
    "codes": [
      22047
    ]
  },
  {
    "name": "reduceToSingleString node:internal/util/inspect:1905:30",
    "codes": [
      22050
    ]
  },
  {
    "name": "isBelowBreakLength node:internal/util/inspect:1881:28",
    "codes": [
      22051
    ]
  },
  {
    "name": "join node:internal/util:378:14",
    "codes": [
      22052
    ]
  }
],
  "ticks": [
    {
  "tm": 411,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 1438,
  "vm": 6,
  "s": [
    12596,
    1620744
  ]
},
    {
  "tm": 2499,
  "vm": 6,
  "s": [
    0,
    10442542
  ]
},
    {
  "tm": 3558,
  "vm": 6,
  "s": [
    0,
    15732842
  ]
},
    {
  "tm": 4618,
  "vm": 6,
  "s": [
    0,
    15732842
  ]
},
    {
  "tm": 5677,
  "vm": 6,
  "s": [
    0,
    15728439
  ]
},
    {
  "tm": 12812,
  "vm": 6,
  "s": [
    12910,
    371
  ]
},
    {
  "tm": 12848,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 12862,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 12876,
  "vm": 6,
  "s": [
    18118,
    87
  ]
},
    {
  "tm": 12888,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 12901,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 13249,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 14339,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 15297,
  "vm": 6,
  "s": [
    18118,
    365
  ]
},
    {
  "tm": 16399,
  "vm": 6,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 18038,
  "vm": 6,
  "s": [
    12910,
    371
  ]
},
    {
  "tm": 18464,
  "vm": 1,
  "s": [
    13523,
    79
  ]
},
    {
  "tm": 19518,
  "vm": 5,
  "s": [
    0,
    27374679
  ]
},
    {
  "tm": 20571,
  "vm": 5,
  "s": [
    0,
    15732842
  ]
},
    {
  "tm": 21628,
  "vm": 5,
  "s": [
    0,
    15728564
  ]
},
    {
  "tm": 22687,
  "vm": 5,
  "s": [
    0,
    14297500
  ]
},
    {
  "tm": 24104,
  "vm": 3,
  "s": [
    0,
    12915751,
    0,
    15447216,
    21466,
    3
  ]
},
    {
  "tm": 25214,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21467,
    71,
    21466,
    3
  ]
},
    {
  "tm": 26771,
  "vm": 3,
  "s": [
    0,
    16003824,
    0,
    15447216,
    21471,
    31,
    21466,
    15
  ]
},
    {
  "tm": 26925,
  "vm": 3,
  "s": [
    0,
    12642231,
    0,
    15447216,
    21475,
    6,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 27983,
  "vm": 3,
  "s": [
    0,
    14520964,
    0,
    15447216,
    21475,
    226,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 29834,
  "vm": 3,
  "s": [
    13044,
    127,
    0,
    15447216,
    21475,
    226,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 30218,
  "vm": 3,
  "s": [
    18103,
    27,
    0,
    15447216,
    21480,
    57,
    21475,
    226,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 31549,
  "vm": 3,
  "s": [
    12910,
    113,
    0,
    15447216,
    21475,
    268,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 32363,
  "vm": 3,
  "s": [
    18118,
    33,
    0,
    15447216,
    21488,
    137,
    21486,
    29,
    21475,
    268,
    21471,
    37,
    21466,
    15
  ]
},
    {
  "tm": 33277,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21471,
    62,
    21466,
    15
  ]
},
    {
  "tm": 34805,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21500,
    61,
    21471,
    62,
    21466,
    15
  ]
},
    {
  "tm": 35364,
  "vm": 3,
  "s": [
    15734,
    0,
    0,
    15447216,
    21471,
    68,
    21466,
    15
  ]
},
    {
  "tm": 37024,
  "vm": 3,
  "s": [
    13044,
    108,
    0,
    15447216,
    21512,
    86,
    21471,
    68,
    21466,
    15
  ]
},
    {
  "tm": 37478,
  "vm": 2,
  "s": [
    0,
    14910920,
    0,
    15447216,
    21471,
    74,
    21466,
    15
  ]
},
    {
  "tm": 38547,
  "vm": 6,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21523,
    16,
    21471,
    138,
    21466,
    15
  ]
},
    {
  "tm": 39874,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21532,
    6,
    21471,
    174,
    21466,
    15
  ]
},
    {
  "tm": 40769,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21534,
    311,
    21468,
    103,
    21504,
    603,
    21532,
    6,
    21471,
    174,
    21466,
    15
  ]
},
    {
  "tm": 41718,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 43578,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 43883,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21549,
    926,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 45225,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 46001,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21558,
    26,
    21468,
    103,
    21504,
    603,
    21555,
    371,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 47011,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 48584,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 49127,
  "vm": 6,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 50187,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21569,
    221,
    21468,
    103,
    21504,
    603,
    21567,
    172,
    21468,
    103,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 52469,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21569,
    221,
    21468,
    103,
    21504,
    603,
    21567,
    172,
    21468,
    103,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 52489,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21569,
    221,
    21468,
    103,
    21504,
    603,
    21567,
    172,
    21468,
    103,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 53362,
  "vm": 3,
  "s": [
    0,
    14520957,
    0,
    15447216,
    21571,
    1677,
    21468,
    103,
    21504,
    603,
    21569,
    221,
    21468,
    103,
    21504,
    603,
    21567,
    172,
    21468,
    103,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 54419,
  "vm": 0,
  "s": [
    0,
    14406563,
    0,
    15447216,
    21569,
    304,
    21468,
    103,
    21504,
    603,
    21567,
    172,
    21468,
    103,
    21504,
    603,
    21565,
    1130,
    21468,
    103,
    21504,
    603,
    21555,
    395,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 55578,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 57157,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21597,
    143,
    21468,
    103,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 57819,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21468,
    70,
    21504,
    603,
    21599,
    760,
    21468,
    103,
    21504,
    603,
    21597,
    143,
    21468,
    103,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 59350,
  "vm": 3,
  "s": [
    12910,
    412,
    0,
    15447216,
    21602,
    371,
    21468,
    103,
    21504,
    603,
    21599,
    760,
    21468,
    103,
    21504,
    603,
    21597,
    143,
    21468,
    103,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 59703,
  "vm": 0,
  "s": [
    0,
    14206996,
    0,
    10342528,
    21609,
    240,
    21599,
    1300,
    21468,
    103,
    21504,
    603,
    21597,
    143,
    21468,
    103,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 60766,
  "vm": 0,
  "s": [
    0,
    14142242,
    0,
    15505888,
    21599,
    1528,
    21468,
    103,
    21504,
    603,
    21597,
    143,
    21468,
    103,
    21504,
    603,
    21595,
    36,
    21468,
    103,
    21504,
    603,
    21555,
    435,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 61822,
  "vm": 0,
  "s": [
    0,
    20522222,
    21612,
    399,
    21468,
    103,
    21504,
    603,
    21555,
    452,
    21468,
    103,
    21504,
    603,
    21553,
    78,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 62879,
  "vm": 0,
  "s": [
    0,
    14295831,
    0,
    15534816,
    21553,
    159,
    21468,
    103,
    21504,
    603,
    21549,
    1195,
    21468,
    103,
    21504,
    603,
    21547,
    6,
    21471,
    198,
    21466,
    15
  ]
},
    {
  "tm": 63952,
  "vm": 3,
  "s": [
    0,
    16003824,
    0,
    15447216,
    21471,
    229,
    21466,
    15
  ]
},
    {
  "tm": 65017,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21650,
    134,
    21648,
    83,
    21647,
    23,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 66075,
  "vm": 6,
  "s": [
    0,
    7769392,
    0,
    10175072,
    21667,
    49,
    21665,
    219,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 69264,
  "vm": 3,
  "s": [
    13044,
    10,
    0,
    15447216,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 69288,
  "vm": 3,
  "s": [
    18103,
    27,
    0,
    15447216,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 69302,
  "vm": 3,
  "s": [
    0,
    10597323,
    0,
    15447216,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 70313,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21672,
    92,
    21671,
    12,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 71974,
  "vm": 3,
  "s": [
    12596,
    1619793,
    0,
    15447216,
    21671,
    25,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 72432,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21671,
    585,
    21670,
    35,
    21669,
    45,
    21668,
    23,
    21665,
    342,
    21656,
    673,
    21647,
    138,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 73477,
  "vm": 2,
  "s": [
    0,
    14957129,
    0,
    15447216,
    21689,
    65,
    21688,
    60,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 74538,
  "vm": 0,
  "s": [
    0,
    14153955,
    0,
    10331472,
    21662,
    107,
    21661,
    90,
    21688,
    86,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 75597,
  "vm": 2,
  "s": [
    0,
    14896168,
    0,
    15447216,
    21721,
    43,
    21720,
    113,
    21715,
    103,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 76916,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 78338,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21734,
    219,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 78784,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21736,
    598,
    21640,
    744,
    21504,
    603,
    21734,
    219,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 80192,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21736,
    598,
    21640,
    744,
    21504,
    603,
    21734,
    219,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 81924,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21738,
    506,
    21640,
    744,
    21504,
    603,
    21736,
    598,
    21640,
    744,
    21504,
    603,
    21734,
    219,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 81967,
  "vm": 6,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21738,
    506,
    21640,
    744,
    21504,
    603,
    21736,
    598,
    21640,
    744,
    21504,
    603,
    21734,
    219,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 83033,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21734,
    250,
    21640,
    744,
    21504,
    603,
    21732,
    29,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 84098,
  "vm": 2,
  "s": [
    0,
    10072954,
    0,
    15447216,
    21758,
    10,
    0,
    7480944,
    21757,
    140,
    21730,
    111,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21725,
    3,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 85149,
  "vm": 2,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21766,
    3,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21763,
    16,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 86347,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21768,
    603,
    21640,
    744,
    21504,
    603,
    21766,
    3,
    21640,
    744,
    21730,
    44,
    21684,
    53,
    21647,
    304,
    21646,
    76,
    21728,
    8,
    21763,
    16,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 87269,
  "vm": 3,
  "s": [
    0,
    14520969,
    0,
    15534816,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 88776,
  "vm": 3,
  "s": [
    18103,
    37,
    0,
    15534816,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 89431,
  "vm": 3,
  "s": [
    12910,
    6,
    0,
    15534816,
    21786,
    115,
    21784,
    71,
    21783,
    28,
    21782,
    368,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 91769,
  "vm": 3,
  "s": [
    18103,
    0,
    0,
    15447216,
    21783,
    44,
    21782,
    368,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 91787,
  "vm": 3,
  "s": [
    13044,
    17,
    0,
    15447216,
    21783,
    44,
    21782,
    368,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 92595,
  "vm": 0,
  "s": [
    0,
    14097334,
    0,
    12445200,
    21782,
    434,
    21763,
    65,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 93665,
  "vm": 3,
  "s": [
    0,
    12593719,
    0,
    15447216,
    21763,
    119,
    21715,
    459,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 94739,
  "vm": 0,
  "s": [
    0,
    20543190,
    21721,
    116,
    21720,
    113,
    21715,
    103,
    21688,
    477,
    21685,
    144,
    21647,
    426,
    21646,
    76,
    21633,
    141,
    21632,
    47,
    21471,
    236,
    21466,
    15
  ]
},
    {
  "tm": 95795,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21809,
    33,
    21466,
    51
  ]
},
    {
  "tm": 96859,
  "vm": 2,
  "s": [
    0,
    14922878,
    0,
    15534816,
    21820,
    144,
    0,
    8466272,
    21818,
    129,
    21817,
    10,
    21816,
    30,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 97917,
  "vm": 0,
  "s": [
    0,
    15493164,
    0,
    15508192,
    21830,
    32,
    21816,
    71,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 98981,
  "vm": 2,
  "s": [
    0,
    14913112,
    0,
    15447216,
    21833,
    491,
    21832,
    205,
    21831,
    82,
    21830,
    137,
    21816,
    71,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 100051,
  "vm": 3,
  "s": [
    12596,
    1620111,
    0,
    15447216,
    21847,
    10,
    21841,
    240,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21830,
    137,
    21816,
    71,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 101115,
  "vm": 6,
  "s": [
    0,
    8466272,
    0,
    10175072,
    21824,
    92,
    0,
    19880953,
    21817,
    276,
    21841,
    433,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21830,
    137,
    21816,
    71,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 102175,
  "vm": 2,
  "s": [
    0,
    14913913,
    0,
    15447216,
    21870,
    54,
    21869,
    3,
    21867,
    32,
    21865,
    58,
    21833,
    872,
    21832,
    205,
    21831,
    82,
    21830,
    137,
    21816,
    71,
    21813,
    63,
    0,
    19585343
  ]
},
    {
  "tm": 103234,
  "vm": 2,
  "s": [
    0,
    9956082,
    0,
    15447216,
    21884,
    43,
    21883,
    135,
    21882,
    70,
    21831,
    208,
    0,
    19585343
  ]
},
    {
  "tm": 104333,
  "vm": 3,
  "s": [
    18118,
    6,
    0,
    15447216,
    21883,
    152,
    21882,
    70,
    21831,
    208,
    0,
    19585343
  ]
},
    {
  "tm": 105350,
  "vm": 5,
  "s": [
    0,
    7803488,
    0,
    10175072,
    21903,
    68,
    21889,
    141,
    0,
    19585343
  ]
},
    {
  "tm": 106991,
  "vm": 3,
  "s": [
    18118,
    364,
    0,
    15534816,
    21919,
    36,
    21916,
    46,
    21884,
    153,
    0,
    19585343
  ]
},
    {
  "tm": 107483,
  "vm": 3,
  "s": [
    0,
    7474544,
    0,
    10175072,
    21916,
    106,
    21884,
    153,
    0,
    19585343
  ]
},
    {
  "tm": 110309,
  "vm": 3,
  "s": [
    0,
    16003824,
    0,
    15534816,
    21929,
    7,
    0,
    8466272,
    21818,
    129,
    21833,
    325,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 110345,
  "vm": 3,
  "s": [
    13044,
    127,
    0,
    15534816,
    21929,
    7,
    0,
    8466272,
    21818,
    129,
    21833,
    325,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 110640,
  "vm": 0,
  "s": [
    0,
    11227500,
    0,
    10290512,
    21934,
    44,
    21930,
    174,
    21929,
    7,
    0,
    8466272,
    21818,
    129,
    21833,
    325,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 111701,
  "vm": 0,
  "s": [
    0,
    14478103,
    0,
    10331472,
    21871,
    107,
    21935,
    311,
    21840,
    127,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 112757,
  "vm": 0,
  "s": [
    0,
    10152417,
    0,
    15484080,
    21844,
    178,
    21877,
    177,
    21843,
    25,
    21870,
    49,
    21935,
    83,
    21840,
    127,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 113816,
  "vm": 0,
  "s": [
    0,
    19376204,
    21962,
    237,
    21963,
    584,
    21957,
    278,
    21961,
    216,
    21946,
    10,
    21945,
    39,
    21935,
    372,
    21840,
    127,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 114875,
  "vm": 3,
  "s": [
    0,
    14520969,
    0,
    15447216,
    21932,
    283,
    21930,
    83,
    21841,
    276,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 117875,
  "vm": 3,
  "s": [
    18118,
    269,
    0,
    15447216,
    21932,
    283,
    21930,
    83,
    21841,
    276,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 117889,
  "vm": 3,
  "s": [
    18103,
    37,
    0,
    15447216,
    21932,
    283,
    21930,
    83,
    21841,
    276,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 118094,
  "vm": 3,
  "s": [
    12910,
    412,
    0,
    15447216,
    21970,
    8,
    21932,
    283,
    21930,
    83,
    21841,
    276,
    21840,
    160,
    21833,
    604,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 119257,
  "vm": 3,
  "s": [
    18118,
    65,
    0,
    15447216,
    0,
    19880953,
    21833,
    913,
    21832,
    205,
    21831,
    82,
    21927,
    70,
    0,
    7478864,
    21892,
    132,
    0,
    19585343
  ]
},
    {
  "tm": 120203,
  "vm": 3,
  "s": [
    0,
    12634977,
    0,
    15447216,
    21884,
    153,
    0,
    19585343
  ]
},
    {
  "tm": 121863,
  "vm": 3,
  "s": [
    0,
    8096848,
    0,
    10175072,
    21640,
    547,
    21504,
    603,
    21992,
    58,
    21991,
    146,
    21884,
    153,
    0,
    19585343
  ]
},
    {
  "tm": 122308,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    21998,
    8,
    21605,
    5,
    21604,
    104,
    21603,
    12,
    21996,
    87,
    21995,
    11,
    21992,
    73,
    21991,
    146,
    21884,
    153,
    0,
    19585343
  ]
},
    {
  "tm": 124009,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    22001,
    256,
    22000,
    32,
    21984,
    112,
    0,
    19880953,
    0,
    20180234
  ]
},
    {
  "tm": 124814,
  "vm": 3,
  "s": [
    12596,
    599856,
    0,
    15447216,
    21813,
    120,
    0,
    19585159
  ]
},
    {
  "tm": 125508,
  "vm": 2,
  "s": [
    0,
    14957012,
    0,
    15447216,
    0,
    7763168,
    21813,
    176,
    0,
    19585159
  ]
},
    {
  "tm": 126601,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    22019,
    182,
    0,
    7763168,
    21813,
    176,
    0,
    19585159
  ]
},
    {
  "tm": 127636,
  "vm": 2,
  "s": [
    0,
    14472189,
    0,
    15447216,
    22026,
    485,
    22025,
    389,
    22019,
    232,
    0,
    7763168,
    21813,
    176,
    0,
    19585159
  ]
},
    {
  "tm": 128705,
  "vm": 0,
  "s": [
    0,
    15160564,
    0,
    15560944,
    0,
    20302912,
    22033,
    337,
    22027,
    1568,
    22026,
    485,
    22025,
    389,
    22019,
    232,
    0,
    7763168,
    21813,
    176,
    0,
    19585159
  ]
},
    {
  "tm": 129792,
  "vm": 3,
  "s": [
    13523,
    79,
    0,
    15447216,
    22027,
    3214,
    22026,
    485,
    22025,
    389,
    22019,
    232,
    0,
    7763168,
    21813,
    176,
    0,
    19585159
  ]
},
    {
  "tm": 130829,
  "vm": 6,
  "s": [
    0,
    7763168,
    0,
    15531024,
    21813,
    176,
    0,
    19585159
  ]
}
  ],
  "scripts": [
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/assert",
    "source": "'use strict';\n\nlet error;\nfunction lazyError() {\n  if (!error) {\n    error = require('internal/errors').codes.ERR_INTERNAL_ASSERTION;\n  }\n  return error;\n}\n\nfunction assert(value, message) {\n  if (!value) {\n    const ERR_INTERNAL_ASSERTION = lazyError();\n    throw new ERR_INTERNAL_ASSERTION(message);\n  }\n}\n\nfunction fail(message) {\n  const ERR_INTERNAL_ASSERTION = lazyError();\n  throw new ERR_INTERNAL_ASSERTION(message);\n}\n\nassert.fail = fail;\n\nmodule.exports = assert;\n",
    "name": "assert",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 27,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/modules/esm/handle_process_exit",
    "source": "'use strict';\n\n// Handle a Promise from running code that potentially does Top-Level Await.\n// In that case, it makes sense to set the exit code to a specific non-zero\n// value if the main code never finishes running.\nfunction handleProcessExit() {\n  process.exitCode ??= 13;\n}\n\nmodule.exports = {\n  handleProcessExit,\n};\n",
    "name": "handle_process_exit",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 37,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/perf/utils",
    "source": "'use strict';\n\nconst binding = internalBinding('performance');\nconst {\n  milestones,\n  getTimeOrigin,\n} = binding;\n\n// TODO(joyeecheung): we may want to warn about access to\n// this during snapshot building.\nlet timeOrigin = getTimeOrigin();\n\nfunction now() {\n  const hr = process.hrtime();\n  return (hr[0] * 1000 + hr[1] / 1e6) - timeOrigin;\n}\n\nfunction getMilestoneTimestamp(milestoneIdx) {\n  const ns = milestones[milestoneIdx];\n  if (ns === -1)\n    return ns;\n  return ns / 1e6 - timeOrigin;\n}\n\nfunction refreshTimeOrigin() {\n  timeOrigin = getTimeOrigin();\n}\n\nmodule.exports = {\n  now,\n  getMilestoneTimestamp,\n  refreshTimeOrigin\n};\n",
    "name": "utils",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 50,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/streams/state",
    "source": "'use strict';\n\nconst {\n  MathFloor,\n  NumberIsInteger,\n} = primordials;\n\nconst { ERR_INVALID_ARG_VALUE } = require('internal/errors').codes;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark :\n    isDuplex ? options[duplexKey] : null;\n}\n\nfunction getDefaultHighWaterMark(objectMode) {\n  return objectMode ? 16 : 16 * 1024;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n  if (hwm != null) {\n    if (!NumberIsInteger(hwm) || hwm < 0) {\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark';\n      throw new ERR_INVALID_ARG_VALUE(name, hwm);\n    }\n    return MathFloor(hwm);\n  }\n\n  // Default value\n  return getDefaultHighWaterMark(state.objectMode);\n}\n\nmodule.exports = {\n  getHighWaterMark,\n  getDefaultHighWaterMark\n};\n",
    "name": "state",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 62,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/main/run_main_module",
    "source": "'use strict';\n\nconst {\n  prepareMainThreadExecution\n} = require('internal/bootstrap/pre_execution');\n\nprepareMainThreadExecution(true);\n\nmarkBootstrapComplete();\n\n// Note: this loads the module through the ESM loader if the module is\n// determined to be an ES module. This hangs from the CJS module loader\n// because we currently allow monkey-patching of the module loaders\n// in the preloaded scripts through require('module').\n// runMain here might be monkey-patched by users in --require.\n// XXX: the monkey-patchability here should probably be deprecated.\nrequire('internal/modules/cjs/loader').Module.runMain(process.argv[1]);\n",
    "name": "run_main_module",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 387,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/dtrace",
    "source": "'use strict';\n\nconst config = internalBinding('config');\n\nconst {\n  DTRACE_HTTP_CLIENT_REQUEST = () => {},\n  DTRACE_HTTP_CLIENT_RESPONSE = () => {},\n  DTRACE_HTTP_SERVER_REQUEST = () => {},\n  DTRACE_HTTP_SERVER_RESPONSE = () => {},\n  DTRACE_NET_SERVER_CONNECTION = () => {},\n  DTRACE_NET_STREAM_END = () => {}\n} = (config.hasDtrace ? internalBinding('dtrace') : {});\n\nmodule.exports = {\n  DTRACE_HTTP_CLIENT_REQUEST,\n  DTRACE_HTTP_CLIENT_RESPONSE,\n  DTRACE_HTTP_SERVER_REQUEST,\n  DTRACE_HTTP_SERVER_RESPONSE,\n  DTRACE_NET_SERVER_CONNECTION,\n  DTRACE_NET_STREAM_END\n};\n",
    "name": "dtrace",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 407,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  {
    "url": "node:internal/modules/esm/load",
    "source": "'use strict';\n\nconst { defaultGetFormat } = require('internal/modules/esm/get_format');\nconst { defaultGetSource } = require('internal/modules/esm/get_source');\nconst { validateAssertions } = require('internal/modules/esm/assert');\n\n/**\n * Node.js default load hook.\n * @param {string} url\n * @param {object} context\n * @returns {object}\n */\nasync function defaultLoad(url, context) {\n  const { importAssertions } = context;\n  let {\n    format,\n    source,\n  } = context;\n\n  if (format == null) {\n    format = await defaultGetFormat(url, context);\n  }\n\n  validateAssertions(url, format, importAssertions);\n\n  if (\n    format === 'builtin' ||\n    format === 'commonjs'\n  ) {\n    source = null;\n  } else if (source == null) {\n    source = await defaultGetSource(url, context);\n  }\n\n  return {\n    format,\n    source,\n  };\n}\n\nmodule.exports = {\n  defaultLoad,\n};\n",
    "name": "load",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 412,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "/home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/no-cluster.js",
    "source": "const cluster = require('cluster')\n\ncluster.on('fork', () => {\n  throw new Error('0x does not support clustering.')\n})\n",
    "name": "no-cluster.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 420,
    "sourcePositions": []
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "url": "/home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/redir-stdout.js",
    "source": "'use strict'\nconst net = require('net')\n\nlet isWorker = false\ntry {\n  // Skip redirecting stdout in Worker threads.\n  isWorker = !require('worker_threads').isMainThread\n} catch (e) {}\n\nif (!isWorker) {\n  const socket = new net.Socket({\n    fd: 3,\n    readable: false,\n    writable: true\n  })\n  Object.defineProperty(process, 'stdout', {\n    configurable: true,\n    enumerable: true,\n    get: () => socket\n  })\n  Object.defineProperty(process.stdout, 'fd', {\n    value: socket._handle.fd\n  })\n}\n",
    "name": "redir-stdout.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 432,
    "sourcePositions": []
  },
  {
    "url": "node:worker_threads",
    "source": "'use strict';\n\nconst {\n  isMainThread,\n  SHARE_ENV,\n  resourceLimits,\n  setEnvironmentData,\n  getEnvironmentData,\n  threadId,\n  Worker\n} = require('internal/worker');\n\nconst {\n  MessagePort,\n  MessageChannel,\n  moveMessagePortToContext,\n  receiveMessageOnPort,\n  BroadcastChannel,\n} = require('internal/worker/io');\n\nconst {\n  markAsUntransferable,\n} = require('internal/buffer');\n\nmodule.exports = {\n  isMainThread,\n  MessagePort,\n  MessageChannel,\n  markAsUntransferable,\n  moveMessagePortToContext,\n  receiveMessageOnPort,\n  resourceLimits,\n  threadId,\n  SHARE_ENV,\n  Worker,\n  parentPort: null,\n  workerData: null,\n  BroadcastChannel,\n  setEnvironmentData,\n  getEnvironmentData,\n};\n",
    "name": "node:worker_threads",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 433,
    "sourcePositions": []
  },
  null,
  null,
  {
    "url": "/home/miguel/.nvm/versions/node/v18.3.0/lib/node_modules/0x/lib/preload/soft-exit.js",
    "source": "'use strict'\n\nprocess.on('SIGINT', process.exit)\nprocess.on('SIGTERM', process.exit)\n",
    "name": "soft-exit.js",
    "lineToColumn": {},
    "_entries": [],
    "_sourceMapState": "unknown",
    "id": 436,
    "sourcePositions": []
  }
]}
